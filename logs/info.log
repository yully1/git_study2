2022-03-02 14:52:43,853 - [test_login.py - 66] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 14:52:43,897 - [test_login.py - 66] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-02 14:52:43,926 - [test_login.py - 66] - 20:测试编号3，测试用例标题测试用户名为空测场景，执行成功，
2022-03-02 14:52:43,955 - [test_login.py - 66] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-02 14:52:43,981 - [test_login.py - 66] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-02 14:52:44,049 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 14:52:44,085 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-02 14:52:44,117 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-02 14:52:44,148 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-02 14:52:44,178 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-02 14:52:44,208 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-02 14:52:44,238 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-02 14:52:44,267 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-02 14:52:44,301 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-02 14:52:44,335 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-02 14:53:04,306 - [test_login.py - 66] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 14:53:04,338 - [test_login.py - 66] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-02 14:53:04,368 - [test_login.py - 66] - 20:测试编号3，测试用例标题测试用户名为空测场景，执行成功，
2022-03-02 14:53:04,399 - [test_login.py - 66] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-02 14:53:04,425 - [test_login.py - 66] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-02 14:53:04,480 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 14:53:04,509 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-02 14:53:04,540 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-02 14:53:04,571 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-02 14:53:04,602 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-02 14:53:04,633 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-02 14:53:04,663 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-02 14:53:04,692 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-02 14:53:04,724 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-02 14:53:04,756 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-02 14:53:35,341 - [test_login.py - 66] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 14:53:35,374 - [test_login.py - 66] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-02 14:53:35,405 - [test_login.py - 66] - 20:测试编号3，测试用例标题测试用户名为空测场景，执行成功，
2022-03-02 14:53:35,435 - [test_login.py - 66] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-02 14:53:35,462 - [test_login.py - 66] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-02 14:53:35,522 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 14:53:35,552 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-02 14:53:35,584 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-02 14:53:35,615 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-02 14:53:35,645 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-02 14:53:35,674 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-02 14:53:35,703 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-02 14:53:35,731 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-02 14:53:35,763 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-02 14:53:35,798 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-02 15:24:27,202 - [test_login.py - 66] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 15:24:27,238 - [test_login.py - 66] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-02 15:24:27,269 - [test_login.py - 66] - 20:测试编号3，测试用例标题测试用户名为空测场景，执行成功，
2022-03-02 15:24:27,299 - [test_login.py - 66] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-02 15:24:27,325 - [test_login.py - 66] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-02 15:24:27,391 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 15:24:27,424 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-02 15:24:27,456 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-02 15:24:27,487 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-02 15:24:27,516 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-02 15:24:27,547 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-02 15:24:27,578 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-02 15:24:27,608 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-02 15:24:27,646 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-02 15:24:27,680 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-02 15:25:58,967 - [test_login.py - 66] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 15:25:58,998 - [test_login.py - 66] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-02 15:25:59,028 - [test_login.py - 66] - 20:测试编号3，测试用例标题测试用户名为空测场景，执行成功，
2022-03-02 15:25:59,058 - [test_login.py - 66] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-02 15:25:59,084 - [test_login.py - 66] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-02 15:25:59,142 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 15:25:59,172 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-02 15:25:59,206 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-02 15:25:59,239 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-02 15:25:59,270 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-02 15:25:59,300 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-02 15:25:59,330 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-02 15:25:59,362 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-02 15:25:59,397 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-02 15:25:59,435 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-02 15:26:12,284 - [test_login.py - 66] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 15:26:12,326 - [test_login.py - 66] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-02 15:26:12,357 - [test_login.py - 66] - 20:测试编号3，测试用例标题测试用户名为空测场景，执行成功，
2022-03-02 15:26:12,387 - [test_login.py - 66] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-02 15:26:12,412 - [test_login.py - 66] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-02 15:26:12,471 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 15:26:12,503 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-02 15:26:12,534 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-02 15:26:12,564 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-02 15:26:12,596 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-02 15:26:12,628 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-02 15:26:12,658 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-02 15:26:12,687 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-02 15:26:12,721 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-02 15:26:12,755 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-02 18:05:35,136 - [test_login01.py - 49] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-02 19:05:54,667 - [test_login02.py - 66] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-02 19:12:00,133 - [test_login03.py - 73] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-02 19:13:12,066 - [test_login03.py - 73] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-02 19:13:12,089 - [test_login.py - 66] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 19:13:12,125 - [test_login.py - 66] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-02 19:13:12,155 - [test_login.py - 66] - 20:测试编号3，测试用例标题测试用户名为空测场景，执行成功，
2022-03-02 19:13:12,188 - [test_login.py - 66] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-02 19:13:12,217 - [test_login.py - 66] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-02 19:13:12,284 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 19:13:12,322 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-02 19:13:12,362 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-02 19:13:12,402 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-02 19:13:12,442 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-02 19:13:12,482 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-02 19:13:12,521 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-02 19:13:12,558 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-02 19:13:12,599 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-02 19:13:12,636 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-02 19:29:27,100 - [test_login03.py - 73] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-02 19:29:27,141 - [test_login03.py - 73] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-02 19:29:27,181 - [test_login03.py - 73] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-02 19:29:27,222 - [test_login03.py - 73] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-02 19:29:27,264 - [test_login03.py - 73] - 20:测试编号5，测试标题测试密码为空的场景，执行成功
2022-03-02 19:29:27,307 - [test_login03.py - 73] - 20:测试编号6，测试标题测试用户类型为空的场景，执行成功
2022-03-02 19:29:27,350 - [test_login03.py - 73] - 20:测试编号7，测试标题测试用户类型非普通的场景，执行成功
2022-03-02 19:29:27,393 - [test_login03.py - 68] - 40:测试编号8，测试标题测试用户类型格式错误的场景，执行失败，实际结果{'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'}
2022-03-02 19:29:27,393 - [test_login03.py - 69] - 40:assert {'code': 1005...ypeId类型格式不正确'} == {'code': 1006...配，该入口只能为普通用户'}
  Differing items:
  {'msg': 'typeId类型格式不正确'} != {'msg': 'typeId类型不匹配，该入口只能为普通用户'}
  {'code': 1005} != {'code': 1006}
  Full diff:
  - {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'}
  ?             ^                   ^^^^^^^^^^^^^
  + {'code': 1005, 'msg': 'typeId类型格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login03.py", line 65, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1005...ypeId类型格式不正确'} == {'code': 1006...配，该入口只能为普通用户'}
  Differing items:
  {'msg': 'typeId类型格式不正确'} != {'msg': 'typeId类型不匹配，该入口只能为普通用户'}
  {'code': 1005} != {'code': 1006}
  Full diff:
  - {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'}
  ?             ^                   ^^^^^^^^^^^^^
  + {'code': 1005, 'msg': 'typeId类型格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-02 19:30:36,331 - [test_login03.py - 73] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-02 19:30:36,369 - [test_login03.py - 73] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-02 19:30:36,407 - [test_login03.py - 73] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-02 19:30:36,443 - [test_login03.py - 73] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-02 19:30:36,481 - [test_login03.py - 73] - 20:测试编号5，测试标题测试密码为空的场景，执行成功
2022-03-02 19:30:36,519 - [test_login03.py - 73] - 20:测试编号6，测试标题测试用户类型为空的场景，执行成功
2022-03-02 19:30:36,557 - [test_login03.py - 73] - 20:测试编号7，测试标题测试用户类型非普通的场景，执行成功
2022-03-02 19:30:36,599 - [test_login03.py - 73] - 20:测试编号8，测试标题测试用户类型格式错误的场景，执行成功
2022-03-02 19:30:51,473 - [test_login03.py - 73] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-02 19:30:51,514 - [test_login03.py - 73] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-02 19:30:51,553 - [test_login03.py - 73] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-02 19:30:51,593 - [test_login03.py - 73] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-02 19:30:51,632 - [test_login03.py - 73] - 20:测试编号5，测试标题测试密码为空的场景，执行成功
2022-03-02 19:30:51,674 - [test_login03.py - 73] - 20:测试编号6，测试标题测试用户类型为空的场景，执行成功
2022-03-02 19:30:51,716 - [test_login03.py - 73] - 20:测试编号7，测试标题测试用户类型非普通的场景，执行成功
2022-03-02 19:30:51,758 - [test_login03.py - 73] - 20:测试编号8，测试标题测试用户类型格式错误的场景，执行成功
2022-03-02 19:30:51,783 - [test_login.py - 66] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 19:30:51,821 - [test_login.py - 66] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-02 19:30:51,859 - [test_login.py - 66] - 20:测试编号3，测试用例标题测试用户名为空的场景，执行成功，
2022-03-02 19:30:51,902 - [test_login.py - 66] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-02 19:30:51,945 - [test_login.py - 66] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-02 19:30:52,028 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 19:30:52,068 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-02 19:30:52,109 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-02 19:30:52,150 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-02 19:30:52,190 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-02 19:30:52,230 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-02 19:30:52,273 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-02 19:30:52,315 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-02 19:30:52,362 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-02 19:30:52,406 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-02 19:56:16,424 - [test_login.py - 67] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 19:56:16,489 - [test_login.py - 67] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-02 19:56:16,633 - [test_login.py - 67] - 20:测试编号3，测试用例标题测试用户名为空的场景，执行成功，
2022-03-02 19:56:16,696 - [test_login.py - 67] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-02 19:56:16,854 - [test_login.py - 67] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-02 19:56:27,412 - [test_login03.py - 74] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-02 19:56:27,455 - [test_login03.py - 74] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-02 19:56:27,496 - [test_login03.py - 74] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-02 19:56:27,535 - [test_login03.py - 74] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-02 19:56:27,577 - [test_login03.py - 74] - 20:测试编号5，测试标题测试密码为空的场景，执行成功
2022-03-02 19:56:27,619 - [test_login03.py - 74] - 20:测试编号6，测试标题测试用户类型为空的场景，执行成功
2022-03-02 19:56:27,662 - [test_login03.py - 74] - 20:测试编号7，测试标题测试用户类型非普通的场景，执行成功
2022-03-02 19:56:27,704 - [test_login03.py - 74] - 20:测试编号8，测试标题测试用户类型格式错误的场景，执行成功
2022-03-02 19:56:27,723 - [test_login.py - 67] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 19:56:27,761 - [test_login.py - 67] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-02 19:56:27,798 - [test_login.py - 67] - 20:测试编号3，测试用例标题测试用户名为空的场景，执行成功，
2022-03-02 19:56:27,839 - [test_login.py - 67] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-02 19:56:27,878 - [test_login.py - 67] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-02 19:56:27,957 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-02 19:56:27,998 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-02 19:56:28,039 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-02 19:56:28,081 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-02 19:56:28,123 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-02 19:56:28,162 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-02 19:56:28,202 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-02 19:56:28,241 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-02 19:56:28,284 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-02 19:56:28,328 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-03 09:25:35,420 - [test_login03.py - 74] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-03 09:25:35,452 - [test_login03.py - 74] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-03 09:25:35,499 - [test_login03.py - 74] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-03 09:25:35,545 - [test_login03.py - 69] - 40:测试编号4，测试标题测试密码输入错误的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMwMDczNS41MTQ2OTc2OjA3MTBlN2M2MmM5OWVjM2ZmYTRmMDRmNmQyNzlkZDIwYjQyNTI3MzY='}
2022-03-03 09:25:35,545 - [test_login03.py - 70] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YjQyNTI3MzY='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwMDczNS41MTQ2OTc2OjA3MTBlN2M2MmM5OWVjM2ZmYTRmMDRmNmQyNzlkZDIwYjQyNTI3MzY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login03.py", line 66, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YjQyNTI3MzY='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwMDczNS41MTQ2OTc2OjA3MTBlN2M2MmM5OWVjM2ZmYTRmMDRmNmQyNzlkZDIwYjQyNTI3MzY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 09:25:35,670 - [test_login03.py - 74] - 20:测试编号5，测试标题测试密码区分大小写的场景，执行成功
2022-03-03 09:25:35,764 - [test_login03.py - 74] - 20:测试编号6，测试标题测试密码为空的场景，执行成功
2022-03-03 09:25:35,811 - [test_login03.py - 74] - 20:测试编号7，测试标题测试用户类型为空的场景，执行成功
2022-03-03 09:25:35,858 - [test_login03.py - 74] - 20:测试编号8，测试标题测试用户类型非普通的场景，执行成功
2022-03-03 09:25:35,905 - [test_login03.py - 74] - 20:测试编号9，测试标题测试用户类型格式错误的场景，执行成功
2022-03-03 09:25:35,936 - [test_login.py - 67] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 09:25:35,967 - [test_login.py - 67] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-03 09:25:35,998 - [test_login.py - 67] - 20:测试编号3，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 09:25:36,045 - [test_login.py - 67] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-03 09:25:36,092 - [test_login.py - 67] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-03 09:25:36,170 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 09:25:36,217 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 09:25:36,264 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-03 09:25:36,295 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-03 09:25:36,342 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-03 09:25:36,373 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-03 09:25:36,420 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-03 09:25:36,467 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-03 09:25:36,514 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-03 09:25:36,545 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-03 09:27:57,841 - [test_login03.py - 74] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-03 09:27:57,888 - [test_login03.py - 74] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-03 09:27:57,935 - [test_login03.py - 74] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-03 09:27:57,966 - [test_login03.py - 69] - 40:测试编号4，测试标题测试密码输入错误的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMwMDg3Ny45MzUxNzE6NDQwYzEzMTAzNjVmMDdiZWZkY2IyM2VhYzUyMWFjNjFhOTQ3MmVhNw=='}
2022-03-03 09:27:57,982 - [test_login03.py - 70] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OTQ3MmVhNw=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwMDg3Ny45MzUxNzE6NDQwYzEzMTAzNjVmMDdiZWZkY2IyM2VhYzUyMWFjNjFhOTQ3MmVhNw=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login03.py", line 66, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OTQ3MmVhNw=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwMDg3Ny45MzUxNzE6NDQwYzEzMTAzNjVmMDdiZWZkY2IyM2VhYzUyMWFjNjFhOTQ3MmVhNw=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 09:27:58,075 - [test_login03.py - 74] - 20:测试编号5，测试标题测试密码区分大小写的场景，执行成功
2022-03-03 09:27:58,122 - [test_login03.py - 69] - 40:测试编号6，测试标题测试用户名区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMwMDg3OC4wOTEzODMyOjgxOGQ3NzUyMDcwY2UxZTNiZDQyMGVhZDBkYWNhYTY2ZTE2OWU1YjQ='}
2022-03-03 09:27:58,122 - [test_login03.py - 70] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTE2OWU1YjQ='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwMDg3OC4wOTEzODMyOjgxOGQ3NzUyMDcwY2UxZTNiZDQyMGVhZDBkYWNhYTY2ZTE2OWU1YjQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login03.py", line 66, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTE2OWU1YjQ='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwMDg3OC4wOTEzODMyOjgxOGQ3NzUyMDcwY2UxZTNiZDQyMGVhZDBkYWNhYTY2ZTE2OWU1YjQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 09:27:58,185 - [test_login03.py - 74] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-03 09:27:58,231 - [test_login03.py - 74] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-03 09:27:58,278 - [test_login03.py - 74] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-03 09:27:58,325 - [test_login03.py - 74] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-03 09:27:58,341 - [test_login.py - 67] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 09:27:58,372 - [test_login.py - 67] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-03 09:27:58,419 - [test_login.py - 67] - 20:测试编号3，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 09:27:58,450 - [test_login.py - 67] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-03 09:27:58,497 - [test_login.py - 67] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-03 09:27:58,591 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 09:27:58,622 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 09:27:58,669 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-03 09:27:58,716 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-03 09:27:58,763 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-03 09:27:58,794 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-03 09:27:58,841 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-03 09:27:58,888 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-03 09:27:58,934 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-03 09:27:58,997 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-03 10:49:49,846 - [test_login.py - 67] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 10:49:49,971 - [test_login.py - 67] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-03 10:49:50,065 - [test_login.py - 67] - 20:测试编号3，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 10:49:50,128 - [test_login.py - 67] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-03 10:49:50,221 - [test_login.py - 67] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-03 10:50:02,284 - [test_login03.py - 77] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-03 10:50:02,331 - [test_login03.py - 77] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-03 10:50:02,362 - [test_login03.py - 77] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-03 10:50:02,409 - [test_login03.py - 72] - 40:测试编号4，测试标题测试密码输入错误的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMwNTgwMi4zNzgwNjUzOmUzZDVjOTdjZDhhYjhjYjJjNmU5ODlkODQ2MzNhNTEzZTFjMGUxZDc='}
2022-03-03 10:50:02,409 - [test_login03.py - 73] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTFjMGUxZDc='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNTgwMi4zNzgwNjUzOmUzZDVjOTdjZDhhYjhjYjJjNmU5ODlkODQ2MzNhNTEzZTFjMGUxZDc='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login03.py", line 69, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTFjMGUxZDc='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNTgwMi4zNzgwNjUzOmUzZDVjOTdjZDhhYjhjYjJjNmU5ODlkODQ2MzNhNTEzZTFjMGUxZDc='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 10:50:02,534 - [test_login03.py - 77] - 20:测试编号5，测试标题测试密码区分大小写的场景，执行成功
2022-03-03 10:50:02,581 - [test_login03.py - 72] - 40:测试编号6，测试标题测试用户名区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMwNTgwMi41NDk4OTk4OjliODVmNWY4OWFjNDQxZTI3YWE5NmZhNTU1NTExMjVhZTE0NTJkMDI='}
2022-03-03 10:50:02,581 - [test_login03.py - 73] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTE0NTJkMDI='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNTgwMi41NDk4OTk4OjliODVmNWY4OWFjNDQxZTI3YWE5NmZhNTU1NTExMjVhZTE0NTJkMDI='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login03.py", line 69, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTE0NTJkMDI='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNTgwMi41NDk4OTk4OjliODVmNWY4OWFjNDQxZTI3YWE5NmZhNTU1NTExMjVhZTE0NTJkMDI='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 10:50:02,643 - [test_login03.py - 77] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-03 10:50:02,690 - [test_login03.py - 77] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-03 10:50:02,737 - [test_login03.py - 77] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-03 10:50:02,784 - [test_login03.py - 77] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-03 10:50:02,799 - [test_login.py - 67] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 10:50:02,846 - [test_login.py - 67] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-03 10:50:02,877 - [test_login.py - 67] - 20:测试编号3，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 10:50:02,924 - [test_login.py - 67] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-03 10:50:02,956 - [test_login.py - 67] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-03 10:50:03,034 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 10:50:03,081 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 10:50:03,127 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-03 10:50:03,159 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-03 10:50:03,205 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-03 10:50:03,252 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-03 10:50:03,299 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-03 10:50:03,330 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-03 10:50:03,377 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-03 10:50:03,440 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-03 11:10:10,475 - [test_login04.py - 73] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-03 11:10:10,507 - [test_login04.py - 73] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-03 11:10:10,553 - [test_login04.py - 73] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-03 11:10:10,600 - [test_login04.py - 68] - 40:测试编号4，测试标题测试密码输入错误的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMwNzAxMC41Njk1NTg0OmUzMGI4NzhiODE5NDNkMWNlNjhiOTJhYTEzYTlkOWI5NTFhYWRmNzQ='}
2022-03-03 11:10:10,600 - [test_login04.py - 69] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTFhYWRmNzQ='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNzAxMC41Njk1NTg0OmUzMGI4NzhiODE5NDNkMWNlNjhiOTJhYTEzYTlkOWI5NTFhYWRmNzQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login04.py", line 65, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTFhYWRmNzQ='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNzAxMC41Njk1NTg0OmUzMGI4NzhiODE5NDNkMWNlNjhiOTJhYTEzYTlkOWI5NTFhYWRmNzQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 11:10:10,742 - [test_login04.py - 73] - 20:测试编号5，测试标题测试密码区分大小写的场景，执行成功
2022-03-03 11:10:10,852 - [test_login04.py - 68] - 40:测试编号6，测试标题测试用户名区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMwNzAxMC43NTgzNTU2OmRjZWRiMjE5ZTdmNWRhZWM4MzhhZTA3NDY2YzQ4MWQzMDAxYjU2OTI='}
2022-03-03 11:10:10,852 - [test_login04.py - 69] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MDAxYjU2OTI='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNzAxMC43NTgzNTU2OmRjZWRiMjE5ZTdmNWRhZWM4MzhhZTA3NDY2YzQ4MWQzMDAxYjU2OTI='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login04.py", line 65, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MDAxYjU2OTI='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNzAxMC43NTgzNTU2OmRjZWRiMjE5ZTdmNWRhZWM4MzhhZTA3NDY2YzQ4MWQzMDAxYjU2OTI='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 11:10:10,914 - [test_login04.py - 73] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-03 11:10:10,961 - [test_login04.py - 73] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-03 11:10:10,992 - [test_login04.py - 73] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-03 11:10:11,039 - [test_login04.py - 73] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-03 11:11:06,032 - [test_login04.py - 73] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-03 11:11:06,141 - [test_login04.py - 73] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-03 11:11:06,188 - [test_login04.py - 73] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-03 11:11:06,235 - [test_login04.py - 68] - 40:测试编号5，测试标题测试密码区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMwNzA2Ni4xODg3NTc3OjZlODQ3MDcxYTA1MDQzZmJlZWMzZTI1YzA5YmRmM2FmZTQxYTE2NzU='}
2022-03-03 11:11:06,235 - [test_login04.py - 69] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTQxYTE2NzU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNzA2Ni4xODg3NTc3OjZlODQ3MDcxYTA1MDQzZmJlZWMzZTI1YzA5YmRmM2FmZTQxYTE2NzU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login04.py", line 65, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTQxYTE2NzU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNzA2Ni4xODg3NTc3OjZlODQ3MDcxYTA1MDQzZmJlZWMzZTI1YzA5YmRmM2FmZTQxYTE2NzU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 11:11:06,298 - [test_login04.py - 68] - 40:测试编号6，测试标题测试用户名区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMwNzA2Ni4yNTEyNDIyOjNmMDgxZTA3ZTU5MGU1ZGFjYzUxZWFlM2I2OTNhMmVkZTMwNjQyNjg='}
2022-03-03 11:11:06,298 - [test_login04.py - 69] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTMwNjQyNjg='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNzA2Ni4yNTEyNDIyOjNmMDgxZTA3ZTU5MGU1ZGFjYzUxZWFlM2I2OTNhMmVkZTMwNjQyNjg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login04.py", line 65, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTMwNjQyNjg='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNzA2Ni4yNTEyNDIyOjNmMDgxZTA3ZTU5MGU1ZGFjYzUxZWFlM2I2OTNhMmVkZTMwNjQyNjg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 11:11:06,344 - [test_login04.py - 73] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-03 11:11:06,391 - [test_login04.py - 73] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-03 11:11:06,454 - [test_login04.py - 73] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-03 11:11:06,501 - [test_login04.py - 73] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-03 11:13:42,682 - [test_login04.py - 73] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-03 11:13:42,729 - [test_login04.py - 73] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-03 11:13:42,776 - [test_login04.py - 73] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-03 11:13:42,823 - [test_login04.py - 73] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-03 11:13:42,870 - [test_login04.py - 68] - 40:测试编号5，测试标题测试密码区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMwNzIyMi44MjM1NjQ4OmEyOTFmNTE0NDczNTUyYWE3MDVjOTdkMzYzMGRkNWQ1OGFmOGFiZTg='}
2022-03-03 11:13:42,870 - [test_login04.py - 69] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OGFmOGFiZTg='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNzIyMi44MjM1NjQ4OmEyOTFmNTE0NDczNTUyYWE3MDVjOTdkMzYzMGRkNWQ1OGFmOGFiZTg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login04.py", line 65, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OGFmOGFiZTg='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNzIyMi44MjM1NjQ4OmEyOTFmNTE0NDczNTUyYWE3MDVjOTdkMzYzMGRkNWQ1OGFmOGFiZTg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 11:13:42,979 - [test_login04.py - 68] - 40:测试编号6，测试标题测试用户名区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMwNzIyMi45NDg1Mzc6MjdmNjBiNTZlMTgxODE4YjIyY2IwZTg2OWI0ZDU2YzZiZTM2NmNiYg=='}
2022-03-03 11:13:42,979 - [test_login04.py - 69] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTM2NmNiYg=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNzIyMi45NDg1Mzc6MjdmNjBiNTZlMTgxODE4YjIyY2IwZTg2OWI0ZDU2YzZiZTM2NmNiYg=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login04.py", line 65, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTM2NmNiYg=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjMwNzIyMi45NDg1Mzc6MjdmNjBiNTZlMTgxODE4YjIyY2IwZTg2OWI0ZDU2YzZiZTM2NmNiYg=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 11:13:43,057 - [test_login04.py - 73] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-03 11:13:43,104 - [test_login04.py - 73] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-03 11:13:43,151 - [test_login04.py - 73] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-03 11:13:43,198 - [test_login04.py - 73] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-03 11:58:43,681 - [test_login05.py - 80] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-03 11:58:43,730 - [test_login05.py - 80] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-03 11:58:43,778 - [test_login05.py - 80] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-03 11:58:43,830 - [test_login05.py - 80] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-03 11:58:43,882 - [test_login05.py - 75] - 40:测试编号5，测试标题测试密码区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMwOTkyMy44NDI2MzY4OmRmNjc2Mzc5ZWQxYzEyMDM1ZGRmZTQxNzZjZDEwYTk3MDYyYzQ1MDg='}
2022-03-03 11:58:43,882 - [test_login05.py - 76] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MDYyYzQ1MDg='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwOTkyMy44NDI2MzY4OmRmNjc2Mzc5ZWQxYzEyMDM1ZGRmZTQxNzZjZDEwYTk3MDYyYzQ1MDg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login05.py", line 72, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MDYyYzQ1MDg='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwOTkyMy44NDI2MzY4OmRmNjc2Mzc5ZWQxYzEyMDM1ZGRmZTQxNzZjZDEwYTk3MDYyYzQ1MDg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 11:58:43,989 - [test_login05.py - 75] - 40:测试编号6，测试标题测试用户名区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMwOTkyMy45NTEzNDU3OmEwOTgxNzc3NmU0MzFhODUzMTNkMWYwYmQyZWJiMjMwMjI3OTJkZDE='}
2022-03-03 11:58:43,989 - [test_login05.py - 76] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MjI3OTJkZDE='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwOTkyMy45NTEzNDU3OmEwOTgxNzc3NmU0MzFhODUzMTNkMWYwYmQyZWJiMjMwMjI3OTJkZDE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login05.py", line 72, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MjI3OTJkZDE='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMwOTkyMy45NTEzNDU3OmEwOTgxNzc3NmU0MzFhODUzMTNkMWYwYmQyZWJiMjMwMjI3OTJkZDE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 11:58:44,042 - [test_login05.py - 80] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-03 11:58:44,089 - [test_login05.py - 80] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-03 11:58:44,138 - [test_login05.py - 80] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-03 11:58:44,187 - [test_login05.py - 80] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-03 11:58:44,208 - [test_login.py - 67] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 11:58:44,254 - [test_login.py - 67] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-03 11:58:44,297 - [test_login.py - 67] - 20:测试编号3，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 11:58:44,344 - [test_login.py - 67] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-03 11:58:44,387 - [test_login.py - 67] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-03 11:58:44,477 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 11:58:44,526 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 11:58:44,575 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-03 11:58:44,623 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-03 11:58:44,674 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-03 11:58:44,721 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-03 11:58:44,768 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-03 11:58:44,815 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-03 11:58:44,867 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-03 11:58:44,915 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-03 14:34:41,697 - [test_business_register01.py - 30] - 40:测试标号1，测试标题正常流程，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 14:34:41,697 - [test_business_register01.py - 31] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1000} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register01.py", line 27, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1000} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-03 14:34:56,469 - [test_business_register01.py - 35] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 14:45:42,465 - [test_business_register02.py - 59] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 14:48:15,962 - [test_business_register02.py - 59] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 14:50:52,761 - [test_business_register02.py - 59] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 14:51:58,082 - [test_business_register02.py - 59] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 14:52:40,694 - [test_business_register01.py - 30] - 40:测试标号1，测试标题正常流程，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 14:52:40,694 - [test_business_register01.py - 31] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1000} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register01.py", line 27, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1000} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-03 14:52:56,050 - [test_business_register01.py - 35] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 14:53:51,273 - [test_business_register02.py - 59] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 15:01:06,310 - [test_business_register03.py - 69] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 15:02:29,054 - [test_business_register03.py - 69] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 15:04:17,272 - [test_business_register03.py - 69] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 15:07:29,214 - [test_business_register03.py - 69] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 15:07:29,235 - [test_login.py - 67] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 15:07:29,282 - [test_login.py - 67] - 20:测试编号2，测试用例标题测试用户名输出错误的场景，执行成功，
2022-03-03 15:07:29,327 - [test_login.py - 67] - 20:测试编号3，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 15:07:29,377 - [test_login.py - 67] - 20:测试编号4，测试用例标题测试密码输入错误的场景，执行成功，
2022-03-03 15:07:29,424 - [test_login.py - 67] - 20:测试编号5，测试用例标题测试密码为空的场景，执行成功，
2022-03-03 15:07:29,515 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 15:07:29,563 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 15:07:29,615 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-03 15:07:29,663 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-03 15:07:29,711 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-03 15:07:29,759 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-03 15:07:29,808 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-03 15:07:29,860 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-03 15:07:29,911 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-03 15:07:29,962 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-03 16:38:26,479 - [test_business_register03.py - 69] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 16:38:26,542 - [test_business_register03.py - 69] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-03 16:38:26,606 - [test_business_register03.py - 69] - 20:测试标号3，测试标题测试用户名非字母开头的场景，执行成功
2022-03-03 16:38:26,714 - [test_business_register03.py - 69] - 20:测试标号4，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-03 16:38:26,777 - [test_business_register03.py - 69] - 20:测试标号5，测试标题测试用户名已注册的场景，执行成功
2022-03-03 16:38:26,841 - [test_business_register03.py - 69] - 20:测试标号6，测试标题测试密码为空的场景，执行成功
2022-03-03 16:38:26,922 - [test_business_register03.py - 69] - 20:测试标号7，测试标题测试密码错误的场景，执行成功
2022-03-03 16:38:26,988 - [test_business_register03.py - 69] - 20:测试标号8，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-03 16:38:27,060 - [test_business_register03.py - 64] - 40:测试标号9，测试标题测试确认密码为空的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:38:27,061 - [test_business_register03.py - 65] - 40:assert {'code': 1004...': '重复密码不能为空'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1004} != {'code': 1000}
  {'msg': '重复密码不能为空'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1004, 'msg': '重复密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1004...': '重复密码不能为空'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1004} != {'code': 1000}
  {'msg': '重复密码不能为空'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1004, 'msg': '重复密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-03 16:38:27,196 - [test_business_register03.py - 64] - 40:测试标号10，测试标题测试确认密码和密码不一致的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:38:27,196 - [test_business_register03.py - 65] - 40:assert {'code': 1007...g': '两次密码不一致'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '两次密码不一致'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1007, 'msg': '两次密码不一致'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...g': '两次密码不一致'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '两次密码不一致'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1007, 'msg': '两次密码不一致'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-03 16:38:27,264 - [test_business_register03.py - 69] - 20:测试标号11，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-03 16:38:27,330 - [test_business_register03.py - 69] - 20:测试标号12，测试标题测试手机号码为空的场景，执行成功
2022-03-03 16:38:27,399 - [test_business_register03.py - 64] - 40:测试标号13，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:38:27,399 - [test_business_register03.py - 65] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-03 16:38:27,513 - [test_business_register03.py - 69] - 20:测试标号14，测试标题测试手机号码非11位的场景，执行成功
2022-03-03 16:38:27,604 - [test_business_register03.py - 69] - 20:测试标号15，测试标题测试手机号码非数字的场景，执行成功
2022-03-03 16:38:27,668 - [test_business_register03.py - 69] - 20:测试标号16，测试标题测试手机号码已注册的场景，执行成功
2022-03-03 16:38:27,736 - [test_business_register03.py - 69] - 20:测试标号17，测试标题测试性别为空的场景，执行成功
2022-03-03 16:38:27,802 - [test_business_register03.py - 69] - 20:测试标号18，测试标题测试性别非枚举的场景，执行成功
2022-03-03 16:38:27,866 - [test_business_register03.py - 69] - 20:测试标号19，测试标题测试性别非男或女的场景，执行成功
2022-03-03 16:38:27,934 - [test_business_register03.py - 69] - 20:测试标号20，测试标题测试生日为空的场景，执行成功
2022-03-03 16:38:27,999 - [test_business_register03.py - 69] - 20:测试标号21，测试标题测试生日年月日不完整的场景，执行成功
2022-03-03 16:38:28,065 - [test_business_register03.py - 69] - 20:测试标号22，测试标题测试生日非数字的场景，执行成功
2022-03-03 16:38:28,129 - [test_business_register03.py - 69] - 20:测试标号23，测试标题测试生日不存在的时间的场景，执行成功
2022-03-03 16:38:28,214 - [test_business_register03.py - 64] - 40:测试标号24，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:38:28,214 - [test_business_register03.py - 65] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 16:38:28,290 - [test_business_register03.py - 64] - 40:测试标号25，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:38:28,290 - [test_business_register03.py - 65] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 16:38:28,364 - [test_business_register03.py - 69] - 20:测试标号26，测试标题测试qq号码为空的场景，执行成功
2022-03-03 16:38:28,434 - [test_business_register03.py - 69] - 20:测试标号27，测试标题测试qq号码错误的场景，执行成功
2022-03-03 16:38:28,516 - [test_business_register03.py - 69] - 20:测试标号29，测试标题测试email为空的场景，执行成功
2022-03-03 16:38:28,592 - [test_business_register03.py - 69] - 20:测试标号31，测试标题测试email已注册的场景，执行成功
2022-03-03 16:38:40,732 - [test_business_register03.py - 69] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 16:38:40,799 - [test_business_register03.py - 69] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-03 16:38:40,861 - [test_business_register03.py - 69] - 20:测试标号3，测试标题测试用户名非字母开头的场景，执行成功
2022-03-03 16:38:40,926 - [test_business_register03.py - 69] - 20:测试标号4，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-03 16:38:40,993 - [test_business_register03.py - 69] - 20:测试标号5，测试标题测试用户名已注册的场景，执行成功
2022-03-03 16:38:41,058 - [test_business_register03.py - 69] - 20:测试标号6，测试标题测试密码为空的场景，执行成功
2022-03-03 16:38:41,132 - [test_business_register03.py - 69] - 20:测试标号7，测试标题测试密码错误的场景，执行成功
2022-03-03 16:38:41,199 - [test_business_register03.py - 69] - 20:测试标号8，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-03 16:38:41,266 - [test_business_register03.py - 64] - 40:测试标号9，测试标题测试确认密码为空的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:38:41,266 - [test_business_register03.py - 65] - 40:assert {'code': 1004...': '重复密码不能为空'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '重复密码不能为空'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1004} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1004, 'msg': '重复密码不能为空'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1004...': '重复密码不能为空'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '重复密码不能为空'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1004} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1004, 'msg': '重复密码不能为空'}
2022-03-03 16:38:41,392 - [test_business_register03.py - 64] - 40:测试标号10，测试标题测试确认密码和密码不一致的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:38:41,392 - [test_business_register03.py - 65] - 40:assert {'code': 1007...g': '两次密码不一致'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '两次密码不一致'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1007} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1007, 'msg': '两次密码不一致'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...g': '两次密码不一致'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '两次密码不一致'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1007} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1007, 'msg': '两次密码不一致'}
2022-03-03 16:38:41,463 - [test_business_register03.py - 69] - 20:测试标号11，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-03 16:38:41,527 - [test_business_register03.py - 69] - 20:测试标号12，测试标题测试手机号码为空的场景，执行成功
2022-03-03 16:38:41,593 - [test_business_register03.py - 64] - 40:测试标号13，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:38:41,593 - [test_business_register03.py - 65] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '手机号格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1008} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1008, 'msg': '手机号格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '手机号格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1008} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1008, 'msg': '手机号格式错误'}
2022-03-03 16:38:41,664 - [test_business_register03.py - 69] - 20:测试标号14，测试标题测试手机号码非11位的场景，执行成功
2022-03-03 16:38:41,729 - [test_business_register03.py - 69] - 20:测试标号15，测试标题测试手机号码非数字的场景，执行成功
2022-03-03 16:38:41,795 - [test_business_register03.py - 69] - 20:测试标号16，测试标题测试手机号码已注册的场景，执行成功
2022-03-03 16:38:41,863 - [test_business_register03.py - 64] - 40:测试标号17，测试标题测试性别为空的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:38:41,863 - [test_business_register03.py - 65] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1000} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1000} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-03 16:38:41,935 - [test_business_register03.py - 69] - 20:测试标号18，测试标题测试性别非枚举的场景，执行成功
2022-03-03 16:38:41,998 - [test_business_register03.py - 69] - 20:测试标号19，测试标题测试性别非男或女的场景，执行成功
2022-03-03 16:38:42,061 - [test_business_register03.py - 64] - 40:测试标号20，测试标题测试生日为空的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:38:42,061 - [test_business_register03.py - 65] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1000} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1000} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-03 16:38:42,133 - [test_business_register03.py - 69] - 20:测试标号21，测试标题测试生日年月日不完整的场景，执行成功
2022-03-03 16:38:42,198 - [test_business_register03.py - 69] - 20:测试标号22，测试标题测试生日非数字的场景，执行成功
2022-03-03 16:38:42,266 - [test_business_register03.py - 69] - 20:测试标号23，测试标题测试生日不存在的时间的场景，执行成功
2022-03-03 16:38:42,352 - [test_business_register03.py - 64] - 40:测试标号24，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:38:42,352 - [test_business_register03.py - 65] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 9999} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 9999} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 16:38:42,426 - [test_business_register03.py - 64] - 40:测试标号25，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:38:42,426 - [test_business_register03.py - 65] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 9999} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 9999} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 16:38:42,499 - [test_business_register03.py - 64] - 40:测试标号26，测试标题测试qq号码为空的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:38:42,499 - [test_business_register03.py - 65] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1000} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1000} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-03 16:38:42,570 - [test_business_register03.py - 69] - 20:测试标号27，测试标题测试qq号码错误的场景，执行成功
2022-03-03 16:38:42,647 - [test_business_register03.py - 64] - 40:测试标号29，测试标题测试email为空的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:38:42,647 - [test_business_register03.py - 65] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1000} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1000} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-03 16:38:42,727 - [test_business_register03.py - 69] - 20:测试标号31，测试标题测试email已注册的场景，执行成功
2022-03-03 16:39:58,957 - [test_business_register03.py - 69] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 16:39:59,021 - [test_business_register03.py - 69] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-03 16:39:59,083 - [test_business_register03.py - 69] - 20:测试标号3，测试标题测试用户名非字母开头的场景，执行成功
2022-03-03 16:39:59,149 - [test_business_register03.py - 69] - 20:测试标号4，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-03 16:39:59,216 - [test_business_register03.py - 69] - 20:测试标号5，测试标题测试用户名已注册的场景，执行成功
2022-03-03 16:39:59,280 - [test_business_register03.py - 69] - 20:测试标号6，测试标题测试密码为空的场景，执行成功
2022-03-03 16:39:59,345 - [test_business_register03.py - 69] - 20:测试标号7，测试标题测试密码错误的场景，执行成功
2022-03-03 16:39:59,418 - [test_business_register03.py - 69] - 20:测试标号8，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-03 16:39:59,491 - [test_business_register03.py - 64] - 40:测试标号9，测试标题测试确认密码为空的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:39:59,492 - [test_business_register03.py - 65] - 40:assert {'code': 1004...': '重复密码不能为空'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1004} != {'code': 1000}
  {'msg': '重复密码不能为空'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1004, 'msg': '重复密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1004...': '重复密码不能为空'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1004} != {'code': 1000}
  {'msg': '重复密码不能为空'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1004, 'msg': '重复密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-03 16:39:59,621 - [test_business_register03.py - 64] - 40:测试标号10，测试标题测试确认密码和密码不一致的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:39:59,621 - [test_business_register03.py - 65] - 40:assert {'code': 1007...g': '两次密码不一致'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '两次密码不一致'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1007, 'msg': '两次密码不一致'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...g': '两次密码不一致'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '两次密码不一致'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1007, 'msg': '两次密码不一致'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-03 16:39:59,691 - [test_business_register03.py - 69] - 20:测试标号11，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-03 16:39:59,755 - [test_business_register03.py - 69] - 20:测试标号12，测试标题测试手机号码为空的场景，执行成功
2022-03-03 16:39:59,824 - [test_business_register03.py - 64] - 40:测试标号13，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:39:59,824 - [test_business_register03.py - 65] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-03 16:39:59,895 - [test_business_register03.py - 69] - 20:测试标号14，测试标题测试手机号码非11位的场景，执行成功
2022-03-03 16:39:59,962 - [test_business_register03.py - 69] - 20:测试标号15，测试标题测试手机号码非数字的场景，执行成功
2022-03-03 16:40:00,029 - [test_business_register03.py - 69] - 20:测试标号16，测试标题测试手机号码已注册的场景，执行成功
2022-03-03 16:40:00,099 - [test_business_register03.py - 69] - 20:测试标号17，测试标题测试性别为空的场景，执行成功
2022-03-03 16:40:00,165 - [test_business_register03.py - 69] - 20:测试标号18，测试标题测试性别非枚举的场景，执行成功
2022-03-03 16:40:00,228 - [test_business_register03.py - 69] - 20:测试标号19，测试标题测试性别非男或女的场景，执行成功
2022-03-03 16:40:00,298 - [test_business_register03.py - 69] - 20:测试标号20，测试标题测试生日为空的场景，执行成功
2022-03-03 16:40:00,364 - [test_business_register03.py - 69] - 20:测试标号21，测试标题测试生日年月日不完整的场景，执行成功
2022-03-03 16:40:00,428 - [test_business_register03.py - 69] - 20:测试标号22，测试标题测试生日非数字的场景，执行成功
2022-03-03 16:40:00,494 - [test_business_register03.py - 69] - 20:测试标号23，测试标题测试生日不存在的时间的场景，执行成功
2022-03-03 16:40:00,584 - [test_business_register03.py - 64] - 40:测试标号24，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:40:00,584 - [test_business_register03.py - 65] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 16:40:00,658 - [test_business_register03.py - 64] - 40:测试标号25，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:40:00,658 - [test_business_register03.py - 65] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 16:40:00,734 - [test_business_register03.py - 69] - 20:测试标号26，测试标题测试qq号码为空的场景，执行成功
2022-03-03 16:40:00,800 - [test_business_register03.py - 69] - 20:测试标号27，测试标题测试qq号码错误的场景，执行成功
2022-03-03 16:40:00,876 - [test_business_register03.py - 69] - 20:测试标号29，测试标题测试email为空的场景，执行成功
2022-03-03 16:40:00,951 - [test_business_register03.py - 69] - 20:测试标号31，测试标题测试email已注册的场景，执行成功
2022-03-03 16:44:08,971 - [test_business_register03.py - 69] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 16:44:09,034 - [test_business_register03.py - 69] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-03 16:44:09,097 - [test_business_register03.py - 69] - 20:测试标号3，测试标题测试用户名非字母开头的场景，执行成功
2022-03-03 16:44:09,163 - [test_business_register03.py - 69] - 20:测试标号4，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-03 16:44:09,229 - [test_business_register03.py - 69] - 20:测试标号5，测试标题测试用户名已注册的场景，执行成功
2022-03-03 16:44:09,297 - [test_business_register03.py - 69] - 20:测试标号6，测试标题测试密码为空的场景，执行成功
2022-03-03 16:44:09,364 - [test_business_register03.py - 69] - 20:测试标号7，测试标题测试密码错误的场景，执行成功
2022-03-03 16:44:09,431 - [test_business_register03.py - 69] - 20:测试标号8，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-03 16:44:09,503 - [test_business_register03.py - 69] - 20:测试标号9，测试标题测试确认密码为空的场景，执行成功
2022-03-03 16:44:09,566 - [test_business_register03.py - 69] - 20:测试标号10，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-03 16:44:09,645 - [test_business_register03.py - 69] - 20:测试标号11，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-03 16:44:09,715 - [test_business_register03.py - 69] - 20:测试标号12，测试标题测试手机号码为空的场景，执行成功
2022-03-03 16:44:09,790 - [test_business_register03.py - 64] - 40:测试标号13，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:44:09,790 - [test_business_register03.py - 65] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-03 16:44:09,976 - [test_business_register03.py - 69] - 20:测试标号14，测试标题测试手机号码非11位的场景，执行成功
2022-03-03 16:44:10,042 - [test_business_register03.py - 69] - 20:测试标号15，测试标题测试手机号码非数字的场景，执行成功
2022-03-03 16:44:10,109 - [test_business_register03.py - 69] - 20:测试标号16，测试标题测试手机号码已注册的场景，执行成功
2022-03-03 16:44:10,177 - [test_business_register03.py - 69] - 20:测试标号17，测试标题测试性别为空的场景，执行成功
2022-03-03 16:44:10,240 - [test_business_register03.py - 69] - 20:测试标号18，测试标题测试性别非枚举的场景，执行成功
2022-03-03 16:44:10,305 - [test_business_register03.py - 69] - 20:测试标号19，测试标题测试性别非男或女的场景，执行成功
2022-03-03 16:44:10,374 - [test_business_register03.py - 69] - 20:测试标号20，测试标题测试生日为空的场景，执行成功
2022-03-03 16:44:10,438 - [test_business_register03.py - 69] - 20:测试标号21，测试标题测试生日年月日不完整的场景，执行成功
2022-03-03 16:44:10,503 - [test_business_register03.py - 69] - 20:测试标号22，测试标题测试生日非数字的场景，执行成功
2022-03-03 16:44:10,572 - [test_business_register03.py - 69] - 20:测试标号23，测试标题测试生日不存在的时间的场景，执行成功
2022-03-03 16:44:10,656 - [test_business_register03.py - 64] - 40:测试标号24，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:44:10,656 - [test_business_register03.py - 65] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 16:44:10,732 - [test_business_register03.py - 64] - 40:测试标号25，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:44:10,732 - [test_business_register03.py - 65] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 16:44:10,808 - [test_business_register03.py - 69] - 20:测试标号26，测试标题测试qq号码为空的场景，执行成功
2022-03-03 16:44:10,870 - [test_business_register03.py - 69] - 20:测试标号27，测试标题测试qq号码错误的场景，执行成功
2022-03-03 16:44:10,949 - [test_business_register03.py - 69] - 20:测试标号29，测试标题测试email为空的场景，执行成功
2022-03-03 16:44:11,027 - [test_business_register03.py - 69] - 20:测试标号31，测试标题测试email已注册的场景，执行成功
2022-03-03 16:47:26,259 - [test_business_register03.py - 69] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 16:47:26,323 - [test_business_register03.py - 69] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-03 16:47:26,385 - [test_business_register03.py - 69] - 20:测试标号3，测试标题测试用户名非字母开头的场景，执行成功
2022-03-03 16:47:26,452 - [test_business_register03.py - 69] - 20:测试标号4，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-03 16:47:26,519 - [test_business_register03.py - 69] - 20:测试标号5，测试标题测试用户名已注册的场景，执行成功
2022-03-03 16:47:26,581 - [test_business_register03.py - 69] - 20:测试标号6，测试标题测试密码为空的场景，执行成功
2022-03-03 16:47:26,645 - [test_business_register03.py - 69] - 20:测试标号7，测试标题测试密码错误的场景，执行成功
2022-03-03 16:47:26,710 - [test_business_register03.py - 69] - 20:测试标号8，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-03 16:47:26,773 - [test_business_register03.py - 69] - 20:测试标号9，测试标题测试确认密码为空的场景，执行成功
2022-03-03 16:47:26,837 - [test_business_register03.py - 69] - 20:测试标号10，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-03 16:47:26,903 - [test_business_register03.py - 69] - 20:测试标号11，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-03 16:47:26,968 - [test_business_register03.py - 69] - 20:测试标号12，测试标题测试手机号码为空的场景，执行成功
2022-03-03 16:47:27,034 - [test_business_register03.py - 64] - 40:测试标号13，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:47:27,035 - [test_business_register03.py - 65] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1008} != {'code': 1013}
  {'msg': '手机号格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1008, 'msg': '手机号格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1008} != {'code': 1013}
  {'msg': '手机号格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1008, 'msg': '手机号格式错误'}
2022-03-03 16:47:27,161 - [test_business_register03.py - 69] - 20:测试标号14，测试标题测试手机号码非11位的场景，执行成功
2022-03-03 16:47:27,225 - [test_business_register03.py - 69] - 20:测试标号15，测试标题测试手机号码非数字的场景，执行成功
2022-03-03 16:47:27,289 - [test_business_register03.py - 69] - 20:测试标号16，测试标题测试手机号码已注册的场景，执行成功
2022-03-03 16:47:27,362 - [test_business_register03.py - 64] - 40:测试标号17，测试标题测试性别为空的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:47:27,362 - [test_business_register03.py - 65] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-03 16:47:27,435 - [test_business_register03.py - 69] - 20:测试标号18，测试标题测试性别非枚举的场景，执行成功
2022-03-03 16:47:27,502 - [test_business_register03.py - 69] - 20:测试标号19，测试标题测试性别非男或女的场景，执行成功
2022-03-03 16:47:27,570 - [test_business_register03.py - 64] - 40:测试标号20，测试标题测试生日为空的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:47:27,570 - [test_business_register03.py - 65] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-03 16:47:27,642 - [test_business_register03.py - 69] - 20:测试标号21，测试标题测试生日年月日不完整的场景，执行成功
2022-03-03 16:47:27,704 - [test_business_register03.py - 69] - 20:测试标号22，测试标题测试生日非数字的场景，执行成功
2022-03-03 16:47:27,769 - [test_business_register03.py - 69] - 20:测试标号23，测试标题测试生日不存在的时间的场景，执行成功
2022-03-03 16:47:27,853 - [test_business_register03.py - 64] - 40:测试标号24，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:47:27,853 - [test_business_register03.py - 65] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 16:47:27,923 - [test_business_register03.py - 64] - 40:测试标号25，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:47:27,924 - [test_business_register03.py - 65] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 16:47:27,995 - [test_business_register03.py - 64] - 40:测试标号26，测试标题测试qq号码为空的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:47:27,995 - [test_business_register03.py - 65] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-03 16:47:28,066 - [test_business_register03.py - 69] - 20:测试标号27，测试标题测试qq号码错误的场景，执行成功
2022-03-03 16:47:28,128 - [test_business_register03.py - 69] - 20:测试标号28，测试标题测试qq号码非数字的场景，执行成功
2022-03-03 16:47:28,194 - [test_business_register03.py - 64] - 40:测试标号29，测试标题测试email为空的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:47:28,194 - [test_business_register03.py - 65] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-03 16:47:28,265 - [test_business_register03.py - 69] - 20:测试标号30，测试标题测试email格式错误的场景，执行成功
2022-03-03 16:47:28,332 - [test_business_register03.py - 69] - 20:测试标号31，测试标题测试email已注册的场景，执行成功
2022-03-03 16:47:55,697 - [test_business_register03.py - 69] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 16:47:55,760 - [test_business_register03.py - 69] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-03 16:47:55,822 - [test_business_register03.py - 69] - 20:测试标号3，测试标题测试用户名非字母开头的场景，执行成功
2022-03-03 16:47:55,887 - [test_business_register03.py - 69] - 20:测试标号4，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-03 16:47:55,954 - [test_business_register03.py - 69] - 20:测试标号5，测试标题测试用户名已注册的场景，执行成功
2022-03-03 16:47:56,017 - [test_business_register03.py - 69] - 20:测试标号6，测试标题测试密码为空的场景，执行成功
2022-03-03 16:47:56,082 - [test_business_register03.py - 69] - 20:测试标号7，测试标题测试密码错误的场景，执行成功
2022-03-03 16:47:56,146 - [test_business_register03.py - 69] - 20:测试标号8，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-03 16:47:56,209 - [test_business_register03.py - 69] - 20:测试标号9，测试标题测试确认密码为空的场景，执行成功
2022-03-03 16:47:56,272 - [test_business_register03.py - 69] - 20:测试标号10，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-03 16:47:56,338 - [test_business_register03.py - 69] - 20:测试标号11，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-03 16:47:56,405 - [test_business_register03.py - 69] - 20:测试标号12，测试标题测试手机号码为空的场景，执行成功
2022-03-03 16:47:56,480 - [test_business_register03.py - 64] - 40:测试标号13，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:47:56,480 - [test_business_register03.py - 65] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-03 16:47:56,605 - [test_business_register03.py - 69] - 20:测试标号14，测试标题测试手机号码非11位的场景，执行成功
2022-03-03 16:47:56,671 - [test_business_register03.py - 69] - 20:测试标号15，测试标题测试手机号码非数字的场景，执行成功
2022-03-03 16:47:56,735 - [test_business_register03.py - 69] - 20:测试标号16，测试标题测试手机号码已注册的场景，执行成功
2022-03-03 16:47:56,805 - [test_business_register03.py - 69] - 20:测试标号17，测试标题测试性别为空的场景，执行成功
2022-03-03 16:47:56,872 - [test_business_register03.py - 69] - 20:测试标号18，测试标题测试性别非枚举的场景，执行成功
2022-03-03 16:47:56,935 - [test_business_register03.py - 69] - 20:测试标号19，测试标题测试性别非男或女的场景，执行成功
2022-03-03 16:47:57,002 - [test_business_register03.py - 69] - 20:测试标号20，测试标题测试生日为空的场景，执行成功
2022-03-03 16:47:57,068 - [test_business_register03.py - 69] - 20:测试标号21，测试标题测试生日年月日不完整的场景，执行成功
2022-03-03 16:47:57,133 - [test_business_register03.py - 69] - 20:测试标号22，测试标题测试生日非数字的场景，执行成功
2022-03-03 16:47:57,198 - [test_business_register03.py - 69] - 20:测试标号23，测试标题测试生日不存在的时间的场景，执行成功
2022-03-03 16:47:57,283 - [test_business_register03.py - 64] - 40:测试标号24，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:47:57,284 - [test_business_register03.py - 65] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 16:47:57,358 - [test_business_register03.py - 64] - 40:测试标号25，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 16:47:57,358 - [test_business_register03.py - 65] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 16:47:57,431 - [test_business_register03.py - 69] - 20:测试标号26，测试标题测试qq号码为空的场景，执行成功
2022-03-03 16:47:57,514 - [test_business_register03.py - 69] - 20:测试标号27，测试标题测试qq号码错误的场景，执行成功
2022-03-03 16:47:57,581 - [test_business_register03.py - 69] - 20:测试标号28，测试标题测试qq号码非数字的场景，执行成功
2022-03-03 16:47:57,650 - [test_business_register03.py - 69] - 20:测试标号29，测试标题测试email为空的场景，执行成功
2022-03-03 16:47:57,715 - [test_business_register03.py - 69] - 20:测试标号30，测试标题测试email格式错误的场景，执行成功
2022-03-03 16:47:57,781 - [test_business_register03.py - 69] - 20:测试标号31，测试标题测试email已注册的场景，执行成功
2022-03-03 16:50:27,155 - [test_business_register03.py - 69] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 16:50:27,219 - [test_business_register03.py - 69] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-03 16:50:27,285 - [test_business_register03.py - 69] - 20:测试标号3，测试标题测试用户名非字母开头的场景，执行成功
2022-03-03 16:50:27,352 - [test_business_register03.py - 69] - 20:测试标号4，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-03 16:50:27,417 - [test_business_register03.py - 69] - 20:测试标号5，测试标题测试用户名已注册的场景，执行成功
2022-03-03 16:50:27,480 - [test_business_register03.py - 69] - 20:测试标号6，测试标题测试密码为空的场景，执行成功
2022-03-03 16:50:27,546 - [test_business_register03.py - 69] - 20:测试标号7，测试标题测试密码错误的场景，执行成功
2022-03-03 16:50:27,612 - [test_business_register03.py - 69] - 20:测试标号8，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-03 16:50:27,674 - [test_business_register03.py - 69] - 20:测试标号9，测试标题测试确认密码为空的场景，执行成功
2022-03-03 16:50:27,737 - [test_business_register03.py - 69] - 20:测试标号10，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-03 16:50:27,801 - [test_business_register03.py - 69] - 20:测试标号11，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-03 16:50:27,868 - [test_business_register03.py - 69] - 20:测试标号12，测试标题测试手机号码为空的场景，执行成功
2022-03-03 16:50:27,936 - [test_business_register03.py - 64] - 40:测试标号13，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:50:27,936 - [test_business_register03.py - 65] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1008} != {'code': 1013}
  {'msg': '手机号格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1008, 'msg': '手机号格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1008} != {'code': 1013}
  {'msg': '手机号格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1008, 'msg': '手机号格式错误'}
2022-03-03 16:50:28,058 - [test_business_register03.py - 69] - 20:测试标号14，测试标题测试手机号码非11位的场景，执行成功
2022-03-03 16:50:28,125 - [test_business_register03.py - 69] - 20:测试标号15，测试标题测试手机号码非数字的场景，执行成功
2022-03-03 16:50:28,189 - [test_business_register03.py - 69] - 20:测试标号16，测试标题测试手机号码已注册的场景，执行成功
2022-03-03 16:50:28,254 - [test_business_register03.py - 64] - 40:测试标号17，测试标题测试性别为空的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:50:28,254 - [test_business_register03.py - 65] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-03 16:50:28,327 - [test_business_register03.py - 69] - 20:测试标号18，测试标题测试性别非枚举的场景，执行成功
2022-03-03 16:50:28,394 - [test_business_register03.py - 69] - 20:测试标号19，测试标题测试性别非男或女的场景，执行成功
2022-03-03 16:50:28,460 - [test_business_register03.py - 64] - 40:测试标号20，测试标题测试生日为空的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:50:28,460 - [test_business_register03.py - 65] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-03 16:50:28,537 - [test_business_register03.py - 69] - 20:测试标号21，测试标题测试生日年月日不完整的场景，执行成功
2022-03-03 16:50:28,604 - [test_business_register03.py - 69] - 20:测试标号22，测试标题测试生日非数字的场景，执行成功
2022-03-03 16:50:28,667 - [test_business_register03.py - 69] - 20:测试标号23，测试标题测试生日不存在的时间的场景，执行成功
2022-03-03 16:50:28,748 - [test_business_register03.py - 64] - 40:测试标号24，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:50:28,749 - [test_business_register03.py - 65] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 16:50:28,821 - [test_business_register03.py - 64] - 40:测试标号25，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:50:28,821 - [test_business_register03.py - 65] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 16:50:28,892 - [test_business_register03.py - 64] - 40:测试标号26，测试标题测试qq号码为空的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:50:28,892 - [test_business_register03.py - 65] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-03 16:50:28,967 - [test_business_register03.py - 69] - 20:测试标号27，测试标题测试qq号码错误的场景，执行成功
2022-03-03 16:50:29,042 - [test_business_register03.py - 69] - 20:测试标号28，测试标题测试qq号码非数字的场景，执行成功
2022-03-03 16:50:29,108 - [test_business_register03.py - 64] - 40:测试标号29，测试标题测试email为空的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 16:50:29,108 - [test_business_register03.py - 65] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 56, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-03 16:50:29,177 - [test_business_register03.py - 69] - 20:测试标号30，测试标题测试email格式错误的场景，执行成功
2022-03-03 16:50:29,244 - [test_business_register03.py - 69] - 20:测试标号31，测试标题测试email已注册的场景，执行成功
2022-03-03 17:01:37,647 - [test_business_register03.py - 71] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-03 17:01:37,710 - [test_business_register03.py - 71] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-03 17:01:37,772 - [test_business_register03.py - 71] - 20:测试标号3，测试标题测试用户名非字母开头的场景，执行成功
2022-03-03 17:01:37,843 - [test_business_register03.py - 71] - 20:测试标号4，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-03 17:01:37,920 - [test_business_register03.py - 66] - 40:测试标号5，测试标题测试用户名已注册的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 17:01:37,920 - [test_business_register03.py - 67] - 40:assert {'code': 1013...、手机号、邮箱已经被注册'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1013} != {'code': 1000}
  {'msg': '该用户名、手机号、邮箱已经被注册'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 58, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1013...、手机号、邮箱已经被注册'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1013} != {'code': 1000}
  {'msg': '该用户名、手机号、邮箱已经被注册'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 17:01:38,053 - [test_business_register03.py - 71] - 20:测试标号6，测试标题测试密码为空的场景，执行成功
2022-03-03 17:01:38,119 - [test_business_register03.py - 71] - 20:测试标号7，测试标题测试密码错误的场景，执行成功
2022-03-03 17:01:38,182 - [test_business_register03.py - 71] - 20:测试标号8，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-03 17:01:38,246 - [test_business_register03.py - 71] - 20:测试标号9，测试标题测试确认密码为空的场景，执行成功
2022-03-03 17:01:38,312 - [test_business_register03.py - 71] - 20:测试标号10，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-03 17:01:38,377 - [test_business_register03.py - 71] - 20:测试标号11，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-03 17:01:38,440 - [test_business_register03.py - 71] - 20:测试标号12，测试标题测试手机号码为空的场景，执行成功
2022-03-03 17:01:38,513 - [test_business_register03.py - 66] - 40:测试标号13，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 17:01:38,513 - [test_business_register03.py - 67] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 58, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-03 17:01:38,583 - [test_business_register03.py - 71] - 20:测试标号14，测试标题测试手机号码非11位的场景，执行成功
2022-03-03 17:01:38,647 - [test_business_register03.py - 71] - 20:测试标号15，测试标题测试手机号码非数字的场景，执行成功
2022-03-03 17:01:38,718 - [test_business_register03.py - 66] - 40:测试标号16，测试标题测试手机号码已注册的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 17:01:38,719 - [test_business_register03.py - 67] - 40:assert {'code': 1013...、手机号、邮箱已经被注册'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1013} != {'code': 1000}
  {'msg': '该用户名、手机号、邮箱已经被注册'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 58, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1013...、手机号、邮箱已经被注册'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1013} != {'code': 1000}
  {'msg': '该用户名、手机号、邮箱已经被注册'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 17:01:38,793 - [test_business_register03.py - 71] - 20:测试标号17，测试标题测试性别为空的场景，执行成功
2022-03-03 17:01:38,858 - [test_business_register03.py - 71] - 20:测试标号18，测试标题测试性别非枚举的场景，执行成功
2022-03-03 17:01:38,920 - [test_business_register03.py - 71] - 20:测试标号19，测试标题测试性别非男或女的场景，执行成功
2022-03-03 17:01:38,989 - [test_business_register03.py - 71] - 20:测试标号20，测试标题测试生日为空的场景，执行成功
2022-03-03 17:01:39,057 - [test_business_register03.py - 71] - 20:测试标号21，测试标题测试生日年月日不完整的场景，执行成功
2022-03-03 17:01:39,123 - [test_business_register03.py - 71] - 20:测试标号22，测试标题测试生日非数字的场景，执行成功
2022-03-03 17:01:39,193 - [test_business_register03.py - 71] - 20:测试标号23，测试标题测试生日不存在的时间的场景，执行成功
2022-03-03 17:01:39,281 - [test_business_register03.py - 66] - 40:测试标号24，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 17:01:39,281 - [test_business_register03.py - 67] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 58, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 17:01:39,354 - [test_business_register03.py - 66] - 40:测试标号25，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 17:01:39,354 - [test_business_register03.py - 67] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 58, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-03 17:01:39,429 - [test_business_register03.py - 71] - 20:测试标号26，测试标题测试qq号码为空的场景，执行成功
2022-03-03 17:01:39,494 - [test_business_register03.py - 71] - 20:测试标号27，测试标题测试qq号码错误的场景，执行成功
2022-03-03 17:01:39,558 - [test_business_register03.py - 71] - 20:测试标号28，测试标题测试qq号码非数字的场景，执行成功
2022-03-03 17:01:39,627 - [test_business_register03.py - 71] - 20:测试标号29，测试标题测试email为空的场景，执行成功
2022-03-03 17:01:39,692 - [test_business_register03.py - 71] - 20:测试标号30，测试标题测试email格式错误的场景，执行成功
2022-03-03 17:01:39,765 - [test_business_register03.py - 66] - 40:测试标号31，测试标题测试email已注册的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-03 17:01:39,765 - [test_business_register03.py - 67] - 40:assert {'code': 1013...、手机号、邮箱已经被注册'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1013} != {'code': 1000}
  {'msg': '该用户名、手机号、邮箱已经被注册'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 58, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1013...、手机号、邮箱已经被注册'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1013} != {'code': 1000}
  {'msg': '该用户名、手机号、邮箱已经被注册'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-03 17:06:04,306 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 17:06:04,380 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 17:06:04,453 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-03 17:06:04,518 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-03 17:06:04,583 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-03 17:06:04,647 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-03 17:06:04,715 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-03 17:06:04,780 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-03 17:06:04,846 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-03 17:06:04,911 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-03 17:06:14,987 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 17:06:15,076 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 17:06:15,164 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-03 17:06:15,249 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-03 17:06:15,339 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-03 17:06:15,449 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-03 17:06:15,521 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-03 17:06:15,588 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-03 17:06:15,653 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-03 17:06:15,743 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-03 17:06:30,707 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 17:06:30,769 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 17:06:30,831 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-03 17:06:30,895 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-03 17:06:30,961 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-03 17:06:31,021 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-03 17:06:31,085 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-03 17:06:31,152 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-03 17:06:31,219 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-03 17:06:31,284 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-03 17:06:42,429 - [test_register.py - 58] - 20:测试编号1，测试用例标题正常流程，执行成功，
2022-03-03 17:06:42,504 - [test_register.py - 58] - 20:测试编号2，测试用例标题测试用户名为空的场景，执行成功，
2022-03-03 17:06:42,576 - [test_register.py - 58] - 20:测试编号3，测试用例标题测试密码为空测场景，执行成功，
2022-03-03 17:06:42,648 - [test_register.py - 58] - 20:测试编号4，测试用例标题测试两次密码输入不一致的场景，执行成功，
2022-03-03 17:06:42,718 - [test_register.py - 58] - 20:测试编号5，测试用例标题测试用户名和密码必须在6-18位之间的场景，执行成功，
2022-03-03 17:06:42,798 - [test_register.py - 58] - 20:测试编号6，测试用例标题测试邮箱为空的场景，执行成功，
2022-03-03 17:06:42,871 - [test_register.py - 58] - 20:测试编号7，测试用例标题测试手机号为空的场景，执行成功，
2022-03-03 17:06:42,944 - [test_register.py - 58] - 20:测试编号8，测试用例标题测试邮箱格式错误的场景，执行成功，
2022-03-03 17:06:43,017 - [test_register.py - 58] - 20:测试编号9，测试用例标题测试该用户已存在的场景，执行成功，
2022-03-03 17:06:43,096 - [test_register.py - 58] - 20:测试编号10，测试用例标题测试该手机号已被注册的场景，执行成功，
2022-03-04 10:31:38,508 - [test_business_register03.py - 70] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-04 10:31:38,573 - [test_business_register03.py - 70] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-04 10:31:38,639 - [test_business_register03.py - 70] - 20:测试标号3，测试标题测试用户名非字母开头的场景，执行成功
2022-03-04 10:31:38,732 - [test_business_register03.py - 70] - 20:测试标号4，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-04 10:31:38,826 - [test_business_register03.py - 70] - 20:测试标号5，测试标题测试用户名已注册的场景，执行成功
2022-03-04 10:31:38,933 - [test_business_register03.py - 70] - 20:测试标号6，测试标题测试密码为空的场景，执行成功
2022-03-04 10:31:39,018 - [test_business_register03.py - 70] - 20:测试标号7，测试标题测试密码错误的场景，执行成功
2022-03-04 10:31:39,084 - [test_business_register03.py - 70] - 20:测试标号8，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-04 10:31:39,153 - [test_business_register03.py - 70] - 20:测试标号9，测试标题测试确认密码为空的场景，执行成功
2022-03-04 10:31:39,224 - [test_business_register03.py - 70] - 20:测试标号10，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-04 10:31:39,291 - [test_business_register03.py - 70] - 20:测试标号11，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-04 10:31:39,361 - [test_business_register03.py - 70] - 20:测试标号12，测试标题测试手机号码为空的场景，执行成功
2022-03-04 10:31:39,440 - [test_business_register03.py - 65] - 40:测试标号13，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 10:31:39,440 - [test_business_register03.py - 66] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 57, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-04 10:31:39,572 - [test_business_register03.py - 70] - 20:测试标号14，测试标题测试手机号码非11位的场景，执行成功
2022-03-04 10:31:39,645 - [test_business_register03.py - 70] - 20:测试标号15，测试标题测试手机号码非数字的场景，执行成功
2022-03-04 10:31:39,714 - [test_business_register03.py - 65] - 40:测试标号16，测试标题测试手机号码已注册的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 10:31:39,715 - [test_business_register03.py - 66] - 40:assert {'code': 1013...、手机号、邮箱已经被注册'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1013} != {'code': 1000}
  {'msg': '该用户名、手机号、邮箱已经被注册'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 57, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1013...、手机号、邮箱已经被注册'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1013} != {'code': 1000}
  {'msg': '该用户名、手机号、邮箱已经被注册'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-04 10:31:39,802 - [test_business_register03.py - 70] - 20:测试标号17，测试标题测试性别为空的场景，执行成功
2022-03-04 10:31:39,873 - [test_business_register03.py - 70] - 20:测试标号18，测试标题测试性别非枚举的场景，执行成功
2022-03-04 10:31:39,940 - [test_business_register03.py - 70] - 20:测试标号19，测试标题测试性别非男或女的场景，执行成功
2022-03-04 10:31:40,030 - [test_business_register03.py - 70] - 20:测试标号20，测试标题测试生日为空的场景，执行成功
2022-03-04 10:31:40,103 - [test_business_register03.py - 70] - 20:测试标号21，测试标题测试生日年月日不完整的场景，执行成功
2022-03-04 10:31:40,174 - [test_business_register03.py - 70] - 20:测试标号22，测试标题测试生日非数字的场景，执行成功
2022-03-04 10:31:40,246 - [test_business_register03.py - 70] - 20:测试标号23，测试标题测试生日不存在的时间的场景，执行成功
2022-03-04 10:31:40,336 - [test_business_register03.py - 65] - 40:测试标号24，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 10:31:40,337 - [test_business_register03.py - 66] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 57, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-04 10:31:40,419 - [test_business_register03.py - 65] - 40:测试标号25，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 10:31:40,419 - [test_business_register03.py - 66] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 57, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-04 10:31:40,498 - [test_business_register03.py - 70] - 20:测试标号26，测试标题测试qq号码为空的场景，执行成功
2022-03-04 10:31:40,562 - [test_business_register03.py - 70] - 20:测试标号27，测试标题测试qq号码错误的场景，执行成功
2022-03-04 10:31:40,629 - [test_business_register03.py - 70] - 20:测试标号28，测试标题测试qq号码非数字的场景，执行成功
2022-03-04 10:31:40,702 - [test_business_register03.py - 70] - 20:测试标号29，测试标题测试email为空的场景，执行成功
2022-03-04 10:31:40,769 - [test_business_register03.py - 70] - 20:测试标号30，测试标题测试email格式错误的场景，执行成功
2022-03-04 10:31:40,841 - [test_business_register03.py - 65] - 40:测试标号31，测试标题测试email已注册的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 10:31:40,841 - [test_business_register03.py - 66] - 40:assert {'code': 1013...、手机号、邮箱已经被注册'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1013} != {'code': 1000}
  {'msg': '该用户名、手机号、邮箱已经被注册'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 57, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1013...、手机号、邮箱已经被注册'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1013} != {'code': 1000}
  {'msg': '该用户名、手机号、邮箱已经被注册'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-04 10:32:24,208 - [test_business_register03.py - 70] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-04 10:32:24,273 - [test_business_register03.py - 70] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-04 10:32:24,339 - [test_business_register03.py - 70] - 20:测试标号3，测试标题测试用户名非字母开头的场景，执行成功
2022-03-04 10:32:24,405 - [test_business_register03.py - 70] - 20:测试标号4，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-04 10:32:24,473 - [test_business_register03.py - 70] - 20:测试标号5，测试标题测试用户名已注册的场景，执行成功
2022-03-04 10:32:24,538 - [test_business_register03.py - 70] - 20:测试标号6，测试标题测试密码为空的场景，执行成功
2022-03-04 10:32:24,612 - [test_business_register03.py - 70] - 20:测试标号7，测试标题测试密码错误的场景，执行成功
2022-03-04 10:32:24,685 - [test_business_register03.py - 70] - 20:测试标号8，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-04 10:32:24,751 - [test_business_register03.py - 70] - 20:测试标号9，测试标题测试确认密码为空的场景，执行成功
2022-03-04 10:32:24,822 - [test_business_register03.py - 70] - 20:测试标号10，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-04 10:32:24,899 - [test_business_register03.py - 70] - 20:测试标号11，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-04 10:32:24,963 - [test_business_register03.py - 70] - 20:测试标号12，测试标题测试手机号码为空的场景，执行成功
2022-03-04 10:32:25,037 - [test_business_register03.py - 65] - 40:测试标号13，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 10:32:25,038 - [test_business_register03.py - 66] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  {'code': 1008} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 57, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  {'code': 1008} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-04 10:32:25,170 - [test_business_register03.py - 70] - 20:测试标号14，测试标题测试手机号码非11位的场景，执行成功
2022-03-04 10:32:25,237 - [test_business_register03.py - 70] - 20:测试标号15，测试标题测试手机号码非数字的场景，执行成功
2022-03-04 10:32:25,310 - [test_business_register03.py - 65] - 40:测试标号16，测试标题测试手机号码已注册的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 10:32:25,310 - [test_business_register03.py - 66] - 40:assert {'code': 1013...、手机号、邮箱已经被注册'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '该用户名、手机号、邮箱已经被注册'} != {'msg': '注册成功'}
  {'code': 1013} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 57, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1013...、手机号、邮箱已经被注册'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '该用户名、手机号、邮箱已经被注册'} != {'msg': '注册成功'}
  {'code': 1013} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-04 10:32:25,386 - [test_business_register03.py - 70] - 20:测试标号17，测试标题测试性别为空的场景，执行成功
2022-03-04 10:32:25,450 - [test_business_register03.py - 70] - 20:测试标号18，测试标题测试性别非枚举的场景，执行成功
2022-03-04 10:32:25,535 - [test_business_register03.py - 70] - 20:测试标号19，测试标题测试性别非男或女的场景，执行成功
2022-03-04 10:32:25,608 - [test_business_register03.py - 70] - 20:测试标号20，测试标题测试生日为空的场景，执行成功
2022-03-04 10:32:25,676 - [test_business_register03.py - 70] - 20:测试标号21，测试标题测试生日年月日不完整的场景，执行成功
2022-03-04 10:32:25,742 - [test_business_register03.py - 70] - 20:测试标号22，测试标题测试生日非数字的场景，执行成功
2022-03-04 10:32:25,812 - [test_business_register03.py - 70] - 20:测试标号23，测试标题测试生日不存在的时间的场景，执行成功
2022-03-04 10:32:25,897 - [test_business_register03.py - 65] - 40:测试标号24，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 10:32:25,897 - [test_business_register03.py - 66] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  {'code': 9999} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 57, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  {'code': 9999} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-04 10:32:25,974 - [test_business_register03.py - 65] - 40:测试标号25，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 10:32:25,975 - [test_business_register03.py - 66] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  {'code': 9999} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 57, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  {'code': 9999} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-04 10:32:26,060 - [test_business_register03.py - 70] - 20:测试标号26，测试标题测试qq号码为空的场景，执行成功
2022-03-04 10:32:26,125 - [test_business_register03.py - 70] - 20:测试标号27，测试标题测试qq号码错误的场景，执行成功
2022-03-04 10:32:26,190 - [test_business_register03.py - 70] - 20:测试标号28，测试标题测试qq号码非数字的场景，执行成功
2022-03-04 10:32:26,265 - [test_business_register03.py - 70] - 20:测试标号29，测试标题测试email为空的场景，执行成功
2022-03-04 10:32:26,331 - [test_business_register03.py - 70] - 20:测试标号30，测试标题测试email格式错误的场景，执行成功
2022-03-04 10:32:26,436 - [test_business_register03.py - 65] - 40:测试标号31，测试标题测试email已注册的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 10:32:26,436 - [test_business_register03.py - 66] - 40:assert {'code': 1013...、手机号、邮箱已经被注册'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '该用户名、手机号、邮箱已经被注册'} != {'msg': '注册成功'}
  {'code': 1013} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 57, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1013...、手机号、邮箱已经被注册'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '该用户名、手机号、邮箱已经被注册'} != {'msg': '注册成功'}
  {'code': 1013} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-04 10:45:05,008 - [test_business_register03.py - 70] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-04 10:45:05,075 - [test_business_register03.py - 70] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-04 10:45:05,146 - [test_business_register03.py - 70] - 20:测试标号3，测试标题测试用户名非字母开头的场景，执行成功
2022-03-04 10:45:05,219 - [test_business_register03.py - 70] - 20:测试标号4，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-04 10:45:05,285 - [test_business_register03.py - 70] - 20:测试标号5，测试标题测试用户名已注册的场景，执行成功
2022-03-04 10:45:05,353 - [test_business_register03.py - 70] - 20:测试标号6，测试标题测试密码为空的场景，执行成功
2022-03-04 10:45:05,426 - [test_business_register03.py - 70] - 20:测试标号7，测试标题测试密码错误的场景，执行成功
2022-03-04 10:45:05,491 - [test_business_register03.py - 70] - 20:测试标号8，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-04 10:45:05,555 - [test_business_register03.py - 70] - 20:测试标号9，测试标题测试确认密码为空的场景，执行成功
2022-03-04 10:45:05,626 - [test_business_register03.py - 70] - 20:测试标号10，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-04 10:45:05,695 - [test_business_register03.py - 70] - 20:测试标号11，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-04 10:45:05,761 - [test_business_register03.py - 70] - 20:测试标号12，测试标题测试手机号码为空的场景，执行成功
2022-03-04 10:45:05,839 - [test_business_register03.py - 65] - 40:测试标号13，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 10:45:05,839 - [test_business_register03.py - 66] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  {'code': 1008} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 57, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  {'code': 1008} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-04 10:45:05,979 - [test_business_register03.py - 70] - 20:测试标号14，测试标题测试手机号码非11位的场景，执行成功
2022-03-04 10:45:06,052 - [test_business_register03.py - 70] - 20:测试标号15，测试标题测试手机号码非数字的场景，执行成功
2022-03-04 10:45:06,128 - [test_business_register03.py - 70] - 20:测试标号16，测试标题测试手机号码已注册的场景，执行成功
2022-03-04 10:45:06,213 - [test_business_register03.py - 70] - 20:测试标号17，测试标题测试性别为空的场景，执行成功
2022-03-04 10:45:06,281 - [test_business_register03.py - 70] - 20:测试标号18，测试标题测试性别非枚举的场景，执行成功
2022-03-04 10:45:06,356 - [test_business_register03.py - 70] - 20:测试标号19，测试标题测试性别非男或女的场景，执行成功
2022-03-04 10:45:06,427 - [test_business_register03.py - 70] - 20:测试标号20，测试标题测试生日为空的场景，执行成功
2022-03-04 10:45:06,491 - [test_business_register03.py - 70] - 20:测试标号21，测试标题测试生日年月日不完整的场景，执行成功
2022-03-04 10:45:06,562 - [test_business_register03.py - 70] - 20:测试标号22，测试标题测试生日非数字的场景，执行成功
2022-03-04 10:45:06,653 - [test_business_register03.py - 70] - 20:测试标号23，测试标题测试生日不存在的时间的场景，执行成功
2022-03-04 10:45:06,731 - [test_business_register03.py - 65] - 40:测试标号24，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 10:45:06,731 - [test_business_register03.py - 66] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  {'code': 9999} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 57, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  {'code': 9999} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-04 10:45:06,809 - [test_business_register03.py - 65] - 40:测试标号25，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 10:45:06,809 - [test_business_register03.py - 66] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  {'code': 9999} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 57, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  {'code': 9999} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-04 10:45:06,883 - [test_business_register03.py - 70] - 20:测试标号26，测试标题测试qq号码为空的场景，执行成功
2022-03-04 10:45:06,946 - [test_business_register03.py - 70] - 20:测试标号27，测试标题测试qq号码错误的场景，执行成功
2022-03-04 10:45:07,019 - [test_business_register03.py - 70] - 20:测试标号28，测试标题测试qq号码非数字的场景，执行成功
2022-03-04 10:45:07,092 - [test_business_register03.py - 70] - 20:测试标号29，测试标题测试email为空的场景，执行成功
2022-03-04 10:45:07,158 - [test_business_register03.py - 70] - 20:测试标号30，测试标题测试email格式错误的场景，执行成功
2022-03-04 10:45:07,236 - [test_business_register03.py - 70] - 20:测试标号31，测试标题测试email已注册的场景，执行成功
2022-03-04 11:08:55,731 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-04 11:08:55,795 - [test_business_register03.py - 76] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-04 11:08:55,866 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-04 11:08:55,934 - [test_business_register03.py - 76] - 20:测试标号4，测试标题测试用户名非字母开头的场景，执行成功
2022-03-04 11:08:55,999 - [test_business_register03.py - 76] - 20:测试标号5，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-04 11:08:56,067 - [test_business_register03.py - 76] - 20:测试标号6，测试标题测试用户名已注册的场景，执行成功
2022-03-04 11:08:56,135 - [test_business_register03.py - 76] - 20:测试标号7，测试标题测试密码为空的场景，执行成功
2022-03-04 11:08:56,208 - [test_business_register03.py - 76] - 20:测试标号8，测试标题密码为8位有效边界值的场景，执行成功
2022-03-04 11:08:56,272 - [test_business_register03.py - 76] - 20:测试标号9，测试标题测试密码错误的场景，执行成功
2022-03-04 11:08:56,340 - [test_business_register03.py - 76] - 20:测试标号10，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-04 11:08:56,406 - [test_business_register03.py - 76] - 20:测试标号11，测试标题测试确认密码为空的场景，执行成功
2022-03-04 11:08:56,486 - [test_business_register03.py - 76] - 20:测试标号12，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-04 11:08:56,552 - [test_business_register03.py - 76] - 20:测试标号13，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-04 11:08:56,635 - [test_business_register03.py - 76] - 20:测试标号14，测试标题测试手机号码为空的场景，执行成功
2022-03-04 11:08:56,710 - [test_business_register03.py - 71] - 40:测试标号15，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 11:08:56,710 - [test_business_register03.py - 72] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-04 11:08:56,843 - [test_business_register03.py - 76] - 20:测试标号16，测试标题测试手机号码非11位的场景，执行成功
2022-03-04 11:08:56,909 - [test_business_register03.py - 76] - 20:测试标号17，测试标题测试手机号码非数字的场景，执行成功
2022-03-04 11:08:56,980 - [test_business_register03.py - 76] - 20:测试标号18，测试标题测试手机号码已注册的场景，执行成功
2022-03-04 11:08:57,054 - [test_business_register03.py - 76] - 20:测试标号19，测试标题测试性别为空的场景，执行成功
2022-03-04 11:08:57,120 - [test_business_register03.py - 76] - 20:测试标号20，测试标题测试性别非枚举的场景，执行成功
2022-03-04 11:08:57,186 - [test_business_register03.py - 76] - 20:测试标号21，测试标题测试性别非男或女的场景，执行成功
2022-03-04 11:08:57,256 - [test_business_register03.py - 76] - 20:测试标号22，测试标题测试生日为空的场景，执行成功
2022-03-04 11:08:57,356 - [test_business_register03.py - 76] - 20:测试标号23，测试标题测试生日年月日不完整的场景，执行成功
2022-03-04 11:08:57,420 - [test_business_register03.py - 76] - 20:测试标号24，测试标题测试生日非数字的场景，执行成功
2022-03-04 11:08:57,486 - [test_business_register03.py - 76] - 20:测试标号25，测试标题测试生日不存在的时间的场景，执行成功
2022-03-04 11:08:57,560 - [test_business_register03.py - 71] - 40:测试标号26，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 11:08:57,560 - [test_business_register03.py - 72] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-04 11:08:57,634 - [test_business_register03.py - 71] - 40:测试标号27，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-04 11:08:57,634 - [test_business_register03.py - 72] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 9999} != {'code': 1000}
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-04 11:08:57,713 - [test_business_register03.py - 76] - 20:测试标号28，测试标题测试qq号码为空的场景，执行成功
2022-03-04 11:08:57,788 - [test_business_register03.py - 76] - 20:测试标号29，测试标题测试qq号码错误的场景，执行成功
2022-03-04 11:08:57,852 - [test_business_register03.py - 76] - 20:测试标号30，测试标题测试qq号码非数字的场景，执行成功
2022-03-04 11:08:57,924 - [test_business_register03.py - 76] - 20:测试标号31，测试标题测试email为空的场景，执行成功
2022-03-04 11:08:58,003 - [test_business_register03.py - 76] - 20:测试标号32，测试标题测试email格式错误的场景，执行成功
2022-03-04 11:08:58,076 - [test_business_register03.py - 76] - 20:测试标号33，测试标题测试email已注册的场景，执行成功
2022-03-04 11:09:15,268 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-04 11:09:15,332 - [test_business_register03.py - 76] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-04 11:09:15,404 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-04 11:09:15,471 - [test_business_register03.py - 76] - 20:测试标号4，测试标题测试用户名非字母开头的场景，执行成功
2022-03-04 11:09:15,537 - [test_business_register03.py - 76] - 20:测试标号5，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-04 11:09:15,602 - [test_business_register03.py - 76] - 20:测试标号6，测试标题测试用户名已注册的场景，执行成功
2022-03-04 11:09:15,669 - [test_business_register03.py - 76] - 20:测试标号7，测试标题测试密码为空的场景，执行成功
2022-03-04 11:09:15,743 - [test_business_register03.py - 76] - 20:测试标号8，测试标题密码为8位有效边界值的场景，执行成功
2022-03-04 11:09:15,806 - [test_business_register03.py - 76] - 20:测试标号9，测试标题测试密码错误的场景，执行成功
2022-03-04 11:09:15,875 - [test_business_register03.py - 76] - 20:测试标号10，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-04 11:09:15,944 - [test_business_register03.py - 76] - 20:测试标号11，测试标题测试确认密码为空的场景，执行成功
2022-03-04 11:09:16,012 - [test_business_register03.py - 76] - 20:测试标号12，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-04 11:09:16,078 - [test_business_register03.py - 76] - 20:测试标号13，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-04 11:09:16,147 - [test_business_register03.py - 76] - 20:测试标号14，测试标题测试手机号码为空的场景，执行成功
2022-03-04 11:09:16,218 - [test_business_register03.py - 71] - 40:测试标号15，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-04 11:09:16,218 - [test_business_register03.py - 72] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1008} != {'code': 1013}
  {'msg': '手机号格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1008, 'msg': '手机号格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1008} != {'code': 1013}
  {'msg': '手机号格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1008, 'msg': '手机号格式错误'}
2022-03-04 11:09:16,413 - [test_business_register03.py - 76] - 20:测试标号16，测试标题测试手机号码非11位的场景，执行成功
2022-03-04 11:09:16,477 - [test_business_register03.py - 76] - 20:测试标号17，测试标题测试手机号码非数字的场景，执行成功
2022-03-04 11:09:16,544 - [test_business_register03.py - 76] - 20:测试标号18，测试标题测试手机号码已注册的场景，执行成功
2022-03-04 11:09:16,646 - [test_business_register03.py - 76] - 20:测试标号19，测试标题测试性别为空的场景，执行成功
2022-03-04 11:09:16,758 - [test_business_register03.py - 76] - 20:测试标号20，测试标题测试性别非枚举的场景，执行成功
2022-03-04 11:09:16,834 - [test_business_register03.py - 76] - 20:测试标号21，测试标题测试性别非男或女的场景，执行成功
2022-03-04 11:09:16,907 - [test_business_register03.py - 76] - 20:测试标号22，测试标题测试生日为空的场景，执行成功
2022-03-04 11:09:16,985 - [test_business_register03.py - 76] - 20:测试标号23，测试标题测试生日年月日不完整的场景，执行成功
2022-03-04 11:09:17,054 - [test_business_register03.py - 76] - 20:测试标号24，测试标题测试生日非数字的场景，执行成功
2022-03-04 11:09:17,122 - [test_business_register03.py - 76] - 20:测试标号25，测试标题测试生日不存在的时间的场景，执行成功
2022-03-04 11:09:17,188 - [test_business_register03.py - 71] - 40:测试标号26，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-04 11:09:17,189 - [test_business_register03.py - 72] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-04 11:09:17,270 - [test_business_register03.py - 71] - 40:测试标号27，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-04 11:09:17,270 - [test_business_register03.py - 72] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-04 11:09:17,356 - [test_business_register03.py - 76] - 20:测试标号28，测试标题测试qq号码为空的场景，执行成功
2022-03-04 11:09:17,422 - [test_business_register03.py - 76] - 20:测试标号29，测试标题测试qq号码错误的场景，执行成功
2022-03-04 11:09:17,486 - [test_business_register03.py - 76] - 20:测试标号30，测试标题测试qq号码非数字的场景，执行成功
2022-03-04 11:09:17,587 - [test_business_register03.py - 76] - 20:测试标号31，测试标题测试email为空的场景，执行成功
2022-03-04 11:09:17,653 - [test_business_register03.py - 76] - 20:测试标号32，测试标题测试email格式错误的场景，执行成功
2022-03-04 11:09:17,719 - [test_business_register03.py - 76] - 20:测试标号33，测试标题测试email已注册的场景，执行成功
2022-03-04 11:09:26,862 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-04 11:09:26,944 - [test_business_register03.py - 76] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-04 11:09:27,023 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-04 11:09:27,091 - [test_business_register03.py - 76] - 20:测试标号4，测试标题测试用户名非字母开头的场景，执行成功
2022-03-04 11:09:27,377 - [test_business_register03.py - 76] - 20:测试标号5，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-04 11:09:27,473 - [test_business_register03.py - 76] - 20:测试标号6，测试标题测试用户名已注册的场景，执行成功
2022-03-04 11:09:27,539 - [test_business_register03.py - 76] - 20:测试标号7，测试标题测试密码为空的场景，执行成功
2022-03-04 11:09:27,614 - [test_business_register03.py - 76] - 20:测试标号8，测试标题密码为8位有效边界值的场景，执行成功
2022-03-04 11:09:27,706 - [test_business_register03.py - 76] - 20:测试标号9，测试标题测试密码错误的场景，执行成功
2022-03-04 11:09:27,778 - [test_business_register03.py - 76] - 20:测试标号10，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-04 11:09:27,848 - [test_business_register03.py - 76] - 20:测试标号11，测试标题测试确认密码为空的场景，执行成功
2022-03-04 11:09:27,922 - [test_business_register03.py - 76] - 20:测试标号12，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-04 11:09:27,993 - [test_business_register03.py - 76] - 20:测试标号13，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-04 11:09:28,058 - [test_business_register03.py - 76] - 20:测试标号14，测试标题测试手机号码为空的场景，执行成功
2022-03-04 11:09:28,136 - [test_business_register03.py - 71] - 40:测试标号15，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-04 11:09:28,137 - [test_business_register03.py - 72] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '手机号格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1008} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1008, 'msg': '手机号格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '手机号格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1008} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1008, 'msg': '手机号格式错误'}
2022-03-04 11:09:28,344 - [test_business_register03.py - 76] - 20:测试标号16，测试标题测试手机号码非11位的场景，执行成功
2022-03-04 11:09:28,433 - [test_business_register03.py - 76] - 20:测试标号17，测试标题测试手机号码非数字的场景，执行成功
2022-03-04 11:09:28,503 - [test_business_register03.py - 76] - 20:测试标号18，测试标题测试手机号码已注册的场景，执行成功
2022-03-04 11:09:28,580 - [test_business_register03.py - 76] - 20:测试标号19，测试标题测试性别为空的场景，执行成功
2022-03-04 11:09:28,648 - [test_business_register03.py - 76] - 20:测试标号20，测试标题测试性别非枚举的场景，执行成功
2022-03-04 11:09:28,717 - [test_business_register03.py - 76] - 20:测试标号21，测试标题测试性别非男或女的场景，执行成功
2022-03-04 11:09:28,791 - [test_business_register03.py - 76] - 20:测试标号22，测试标题测试生日为空的场景，执行成功
2022-03-04 11:09:28,876 - [test_business_register03.py - 76] - 20:测试标号23，测试标题测试生日年月日不完整的场景，执行成功
2022-03-04 11:09:28,940 - [test_business_register03.py - 76] - 20:测试标号24，测试标题测试生日非数字的场景，执行成功
2022-03-04 11:09:29,005 - [test_business_register03.py - 76] - 20:测试标号25，测试标题测试生日不存在的时间的场景，执行成功
2022-03-04 11:09:29,074 - [test_business_register03.py - 71] - 40:测试标号26，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-04 11:09:29,075 - [test_business_register03.py - 72] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 9999} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 9999} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-04 11:09:29,150 - [test_business_register03.py - 71] - 40:测试标号27，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-04 11:09:29,150 - [test_business_register03.py - 72] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 9999} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 9999} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-04 11:09:29,231 - [test_business_register03.py - 76] - 20:测试标号28，测试标题测试qq号码为空的场景，执行成功
2022-03-04 11:09:29,302 - [test_business_register03.py - 76] - 20:测试标号29，测试标题测试qq号码错误的场景，执行成功
2022-03-04 11:09:29,372 - [test_business_register03.py - 76] - 20:测试标号30，测试标题测试qq号码非数字的场景，执行成功
2022-03-04 11:09:29,445 - [test_business_register03.py - 76] - 20:测试标号31，测试标题测试email为空的场景，执行成功
2022-03-04 11:09:29,512 - [test_business_register03.py - 76] - 20:测试标号32，测试标题测试email格式错误的场景，执行成功
2022-03-04 11:09:29,581 - [test_business_register03.py - 76] - 20:测试标号33，测试标题测试email已注册的场景，执行成功
2022-03-04 14:30:36,235 - [test_business_token_goodsinfo01.py - 39] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 14:47:06,598 - [test_business_token_goodsinfo02.py - 56] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 15:02:59,358 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 15:46:47,858 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 15:46:47,942 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号2，测试标题测试token值为空的场景，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-04 15:46:47,943 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1001... 'token值不能为空'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1001} != {'code': 1000}
  {'msg': 'token值不能为空'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1001... 'token值不能为空'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1001} != {'code': 1000}
  {'msg': 'token值不能为空'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-04 15:46:48,088 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号3，测试标题测试token值错误的场景，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-04 15:46:48,088 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-04 15:46:48,177 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号4，测试标题测试token值过期的场景，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-04 15:46:48,177 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-04 15:46:48,265 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号5，测试标题测试goodsId错误的场景，执行成功
2022-03-04 15:46:48,357 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号6，测试标题测试goodsId为空的场景，执行成功
2022-03-04 15:46:48,438 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号7，测试标题测试goodsId非数字的场景，执行成功
2022-03-04 15:46:48,528 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号8，测试标题测试isOnSale为空的场景，执行成功
2022-03-04 15:46:48,610 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号9，测试标题测试isOnSale非0和1的数字的场景，执行成功
2022-03-04 15:46:48,691 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号10，测试标题测试isOnSale是字符的场景，执行成功
2022-03-04 15:46:48,780 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号11，测试标题测试isPromote非0和1的数字的场景，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-04 15:46:48,780 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1006...品促销状态必须为0或者1'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1006} != {'code': 1000}
  {'msg': '商品促销状态必须为0或者1'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1006...品促销状态必须为0或者1'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1006} != {'code': 1000}
  {'msg': '商品促销状态必须为0或者1'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-04 15:46:48,897 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号12，测试标题测试isPromote是字符的场景，执行失败，实际结果为{'code': 1005, 'msg': '商品销售状态必须为0或者1'}
2022-03-04 15:46:48,897 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1006...品促销状态必须为0或者1'} == {'code': 1005...品销售状态必须为0或者1'}
  Differing items:
  {'code': 1006} != {'code': 1005}
  {'msg': '商品促销状态必须为0或者1'} != {'msg': '商品销售状态必须为0或者1'}
  Full diff:
  - {'code': 1005, 'msg': '商品销售状态必须为0或者1'}
  ?             ^             -
  + {'code': 1006, 'msg': '商品促销状态必须为0或者1'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1006...品促销状态必须为0或者1'} == {'code': 1005...品销售状态必须为0或者1'}
  Differing items:
  {'code': 1006} != {'code': 1005}
  {'msg': '商品促销状态必须为0或者1'} != {'msg': '商品销售状态必须为0或者1'}
  Full diff:
  - {'code': 1005, 'msg': '商品销售状态必须为0或者1'}
  ?             ^             -
  + {'code': 1006, 'msg': '商品促销状态必须为0或者1'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-04 15:46:49,019 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号13，测试标题测试isPromote为空的场景，执行成功
2022-03-04 15:50:10,357 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 15:50:10,455 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号2，测试标题测试token值为空的场景，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-04 15:50:10,455 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1001... 'token值不能为空'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1001} != {'code': 1000}
  {'msg': 'token值不能为空'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1001... 'token值不能为空'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1001} != {'code': 1000}
  {'msg': 'token值不能为空'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-04 15:50:10,561 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号3，测试标题测试token值错误的场景，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-04 15:50:10,561 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-04 15:50:10,698 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号4，测试标题测试token值过期的场景，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-04 15:50:10,699 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-04 15:50:10,850 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号5，测试标题测试goodsId错误的场景，执行成功
2022-03-04 15:50:11,019 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号6，测试标题测试goodsId为空的场景，执行成功
2022-03-04 15:50:11,145 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号7，测试标题测试goodsId非数字的场景，执行成功
2022-03-04 15:50:11,282 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号8，测试标题测试isOnSale为空的场景，执行成功
2022-03-04 15:50:11,410 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号9，测试标题测试isOnSale非0和1的数字的场景，执行成功
2022-03-04 15:50:11,530 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号10，测试标题测试isOnSale是字符的场景，执行成功
2022-03-04 15:50:11,674 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号11，测试标题测试isPromote非0和1的数字的场景，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-04 15:50:11,675 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1006...品促销状态必须为0或者1'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1006} != {'code': 1000}
  {'msg': '商品促销状态必须为0或者1'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1006...品促销状态必须为0或者1'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1006} != {'code': 1000}
  {'msg': '商品促销状态必须为0或者1'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-04 15:50:11,837 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号12，测试标题测试isPromote是字符的场景，执行失败，实际结果为{'code': 1005, 'msg': '商品销售状态必须为0或者1'}
2022-03-04 15:50:11,838 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1006...品促销状态必须为0或者1'} == {'code': 1005...品销售状态必须为0或者1'}
  Differing items:
  {'code': 1006} != {'code': 1005}
  {'msg': '商品促销状态必须为0或者1'} != {'msg': '商品销售状态必须为0或者1'}
  Full diff:
  - {'code': 1005, 'msg': '商品销售状态必须为0或者1'}
  ?             ^             -
  + {'code': 1006, 'msg': '商品促销状态必须为0或者1'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1006...品促销状态必须为0或者1'} == {'code': 1005...品销售状态必须为0或者1'}
  Differing items:
  {'code': 1006} != {'code': 1005}
  {'msg': '商品促销状态必须为0或者1'} != {'msg': '商品销售状态必须为0或者1'}
  Full diff:
  - {'code': 1005, 'msg': '商品销售状态必须为0或者1'}
  ?             ^             -
  + {'code': 1006, 'msg': '商品促销状态必须为0或者1'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-04 15:50:12,017 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号13，测试标题测试isPromote为空的场景，执行成功
2022-03-04 15:53:35,903 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 15:53:35,993 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号2，测试标题测试token值为空的场景，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-04 15:53:35,994 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1001... 'token值不能为空'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1001} != {'code': 1000}
  {'msg': 'token值不能为空'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1001... 'token值不能为空'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1001} != {'code': 1000}
  {'msg': 'token值不能为空'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-04 15:53:36,081 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号3，测试标题测试token值错误的场景，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-04 15:53:36,082 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-04 15:53:36,166 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号4，测试标题测试token值过期的场景，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-04 15:53:36,167 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-04 15:53:36,254 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号5，测试标题测试goodsId错误的场景，执行成功
2022-03-04 15:53:36,340 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号6，测试标题测试goodsId为空的场景，执行成功
2022-03-04 15:53:36,421 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号7，测试标题测试goodsId非数字的场景，执行成功
2022-03-04 15:53:36,504 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号8，测试标题测试isOnSale为空的场景，执行成功
2022-03-04 15:53:36,588 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号9，测试标题测试isOnSale非0和1的数字的场景，执行成功
2022-03-04 15:53:36,668 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号10，测试标题测试isOnSale是字符的场景，执行成功
2022-03-04 15:53:36,759 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号11，测试标题测试isPromote非0和1的数字的场景，执行成功
2022-03-04 15:53:36,848 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号12，测试标题测试isPromote是字符的场景，执行失败，实际结果为{'code': 1005, 'msg': '商品销售状态必须为0或者1'}
2022-03-04 15:53:36,849 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1006...品促销状态必须为0或者1'} == {'code': 1005...品销售状态必须为0或者1'}
  Differing items:
  {'code': 1006} != {'code': 1005}
  {'msg': '商品促销状态必须为0或者1'} != {'msg': '商品销售状态必须为0或者1'}
  Full diff:
  - {'code': 1005, 'msg': '商品销售状态必须为0或者1'}
  ?             ^             -
  + {'code': 1006, 'msg': '商品促销状态必须为0或者1'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1006...品促销状态必须为0或者1'} == {'code': 1005...品销售状态必须为0或者1'}
  Differing items:
  {'code': 1006} != {'code': 1005}
  {'msg': '商品促销状态必须为0或者1'} != {'msg': '商品销售状态必须为0或者1'}
  Full diff:
  - {'code': 1005, 'msg': '商品销售状态必须为0或者1'}
  ?             ^             -
  + {'code': 1006, 'msg': '商品促销状态必须为0或者1'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-04 15:53:36,940 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号13，测试标题测试isPromote为空的场景，执行成功
2022-03-04 15:58:12,049 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 15:58:12,131 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号2，测试标题测试token值为空的场景，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-04 15:58:12,131 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1001... 'token值不能为空'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': 'token值不能为空'} != {'msg': '查询成功'}
  {'code': 1001} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1001... 'token值不能为空'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': 'token值不能为空'} != {'msg': '查询成功'}
  {'code': 1001} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-04 15:58:12,270 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号3，测试标题测试token值错误的场景，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-04 15:58:12,270 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-04 15:58:12,355 - [test_business_token_goodsinfo03.py - 62] - 40:测试编号4，测试标题测试token值过期的场景，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-04 15:58:12,355 - [test_business_token_goodsinfo03.py - 63] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 58, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-04 15:58:12,443 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号5，测试标题测试goodsId错误的场景，执行成功
2022-03-04 15:58:12,528 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号6，测试标题测试goodsId为空的场景，执行成功
2022-03-04 15:58:12,608 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号7，测试标题测试goodsId非数字的场景，执行成功
2022-03-04 15:58:12,688 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号8，测试标题测试isOnSale为空的场景，执行成功
2022-03-04 15:58:12,772 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号9，测试标题测试isOnSale非0和1的数字的场景，执行成功
2022-03-04 15:58:12,853 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号10，测试标题测试isOnSale是字符的场景，执行成功
2022-03-04 15:58:12,935 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号11，测试标题测试isPromote非0和1的数字的场景，执行成功
2022-03-04 15:58:13,015 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号12，测试标题测试isPromote是字符的场景，执行成功
2022-03-04 15:58:13,094 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号13，测试标题测试isPromote为空的场景，执行成功
2022-03-04 15:59:35,095 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 15:59:35,170 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号2，测试标题测试token值为空的场景，执行成功
2022-03-04 15:59:35,246 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号3，测试标题测试token值错误的场景，执行成功
2022-03-04 15:59:35,322 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号4，测试标题测试token值过期的场景，执行成功
2022-03-04 15:59:35,485 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号5，测试标题测试goodsId错误的场景，执行成功
2022-03-04 15:59:35,621 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号6，测试标题测试goodsId为空的场景，执行成功
2022-03-04 15:59:35,702 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号7，测试标题测试goodsId非数字的场景，执行成功
2022-03-04 15:59:35,799 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号8，测试标题测试isOnSale为空的场景，执行成功
2022-03-04 15:59:35,883 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号9，测试标题测试isOnSale非0和1的数字的场景，执行成功
2022-03-04 15:59:35,966 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号10，测试标题测试isOnSale是字符的场景，执行成功
2022-03-04 15:59:36,051 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号11，测试标题测试isPromote非0和1的数字的场景，执行成功
2022-03-04 15:59:36,132 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号12，测试标题测试isPromote是字符的场景，执行成功
2022-03-04 15:59:36,216 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号13，测试标题测试isPromote为空的场景，执行成功
2022-03-04 17:03:41,878 - [test_1.py - 49] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 17:04:01,685 - [test_1.py - 49] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 17:04:01,757 - [test_1.py - 49] - 20:测试编号2，测试标题测试用户名输出错误的场景，执行成功
2022-03-04 17:04:01,833 - [test_1.py - 49] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-04 17:04:01,909 - [test_1.py - 49] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-04 17:04:01,979 - [test_1.py - 49] - 20:测试编号5，测试标题测试密码为空的场景，执行成功
2022-03-04 17:18:36,335 - [test_1.py - 57] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 17:18:36,412 - [test_1.py - 57] - 20:测试编号2，测试标题测试用户名输出错误的场景，执行成功
2022-03-04 17:18:36,491 - [test_1.py - 57] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-04 17:18:36,579 - [test_1.py - 57] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-04 17:18:36,664 - [test_1.py - 57] - 20:测试编号5，测试标题测试密码为空的场景，执行成功
2022-03-04 17:45:32,076 - [test_1.py - 49] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 17:45:32,148 - [test_1.py - 49] - 20:测试编号2，测试标题测试用户名为空的场景，执行成功
2022-03-04 17:45:32,224 - [test_1.py - 49] - 20:测试编号3，测试标题测试密码为空测场景，执行成功
2022-03-04 17:45:32,296 - [test_1.py - 49] - 20:测试编号4，测试标题测试两次密码输入不一致的场景，执行成功
2022-03-04 17:45:32,367 - [test_1.py - 49] - 20:测试编号5，测试标题测试用户名和密码必须在6-18位之间的场景，执行成功
2022-03-04 17:45:32,439 - [test_1.py - 49] - 20:测试编号6，测试标题测试邮箱为空的场景，执行成功
2022-03-04 17:45:32,512 - [test_1.py - 49] - 20:测试编号7，测试标题测试手机号为空的场景，执行成功
2022-03-04 17:45:32,587 - [test_1.py - 49] - 20:测试编号8，测试标题测试邮箱格式错误的场景，执行成功
2022-03-04 17:45:32,664 - [test_1.py - 49] - 20:测试编号9，测试标题测试该用户已存在的场景，执行成功
2022-03-04 17:45:32,741 - [test_1.py - 49] - 20:测试编号10，测试标题测试该手机号已被注册的场景，执行成功
2022-03-04 17:51:12,605 - [test_1.py - 59] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 17:51:12,676 - [test_1.py - 59] - 20:测试编号2，测试标题测试用户名为空的场景，执行成功
2022-03-04 17:51:12,764 - [test_1.py - 59] - 20:测试编号3，测试标题测试密码为空测场景，执行成功
2022-03-04 17:51:12,879 - [test_1.py - 59] - 20:测试编号4，测试标题测试两次密码输入不一致的场景，执行成功
2022-03-04 17:51:12,973 - [test_1.py - 59] - 20:测试编号5，测试标题测试用户名和密码必须在6-18位之间的场景，执行成功
2022-03-04 17:51:13,046 - [test_1.py - 59] - 20:测试编号6，测试标题测试邮箱为空的场景，执行成功
2022-03-04 17:51:13,143 - [test_1.py - 59] - 20:测试编号7，测试标题测试手机号为空的场景，执行成功
2022-03-04 17:51:13,268 - [test_1.py - 59] - 20:测试编号8，测试标题测试邮箱格式错误的场景，执行成功
2022-03-04 17:51:13,343 - [test_1.py - 59] - 20:测试编号9，测试标题测试该用户已存在的场景，执行成功
2022-03-04 17:51:13,418 - [test_1.py - 59] - 20:测试编号10，测试标题测试该手机号已被注册的场景，执行成功
2022-03-04 19:13:40,411 - [test_01.py - 34] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 19:13:40,480 - [test_01.py - 34] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-04 19:13:40,553 - [test_01.py - 34] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-04 19:13:40,629 - [test_01.py - 29] - 40:测试编号4，测试标题测试密码输入错误的场景，执行失败，实际结果为{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjQyMjQyMC41NTk2Nzc0OjA2ZDI4NTY3YWMyNzk5MzYzN2E5NjQ2YTQwZGIzMDZmNWZhZTQ5NTc='}
2022-03-04 19:13:40,629 - [test_01.py - 30] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NWZhZTQ5NTc='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjQyMjQyMC41NTk2Nzc0OjA2ZDI4NTY3YWMyNzk5MzYzN2E5NjQ2YTQwZGIzMDZmNWZhZTQ5NTc='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_01.py", line 26, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NWZhZTQ5NTc='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjQyMjQyMC41NTk2Nzc0OjA2ZDI4NTY3YWMyNzk5MzYzN2E5NjQ2YTQwZGIzMDZmNWZhZTQ5NTc='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-04 19:13:40,755 - [test_01.py - 34] - 20:测试编号5，测试标题测试密码区分大小写的场景，执行成功
2022-03-04 19:13:40,828 - [test_01.py - 29] - 40:测试编号6，测试标题测试用户名区分大小写的场景，执行失败，实际结果为{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjQyMjQyMC43NjExMzg0OjMyYjE0NDEwNzZhMDNiNWY4MDhhZDE5YjFmNjA5NjdiZDUyMjFiOTI='}
2022-03-04 19:13:40,828 - [test_01.py - 30] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZDUyMjFiOTI='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjQyMjQyMC43NjExMzg0OjMyYjE0NDEwNzZhMDNiNWY4MDhhZDE5YjFmNjA5NjdiZDUyMjFiOTI='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_01.py", line 26, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZDUyMjFiOTI='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjQyMjQyMC43NjExMzg0OjMyYjE0NDEwNzZhMDNiNWY4MDhhZDE5YjFmNjA5NjdiZDUyMjFiOTI='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-04 19:13:40,900 - [test_01.py - 34] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-04 19:13:40,969 - [test_01.py - 34] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-04 19:13:41,040 - [test_01.py - 34] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-04 19:13:41,110 - [test_01.py - 34] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-04 19:29:39,516 - [test_01.py - 50] - 40:测试编号1，测试标题正常流程，执行失败，实际结果为{'code': 1007, 'msg': '用户名或者密码错误'}
2022-03-04 19:29:39,516 - [test_01.py - 51] - 40:assert '登录成功' in "{'code': 1007, 'msg': '用户名或者密码错误'}"
 +  where '登录成功' = <comms.excel_utils.CaseData object at 0x0000028EA7FA2E48>.expect
 +  and   "{'code': 1007, 'msg': '用户名或者密码错误'}" = str({'code': 1007, 'msg': '用户名或者密码错误'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_01.py", line 45, in test_login
    assert case.expect in str(res)
AssertionError: assert '登录成功' in "{'code': 1007, 'msg': '用户名或者密码错误'}"
 +  where '登录成功' = <comms.excel_utils.CaseData object at 0x0000028EA7FA2E48>.expect
 +  and   "{'code': 1007, 'msg': '用户名或者密码错误'}" = str({'code': 1007, 'msg': '用户名或者密码错误'})
2022-03-04 19:29:39,653 - [test_01.py - 55] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-04 19:29:39,730 - [test_01.py - 55] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-04 19:29:39,804 - [test_01.py - 55] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-04 19:29:39,881 - [test_01.py - 55] - 20:测试编号5，测试标题测试密码区分大小写的场景，执行成功
2022-03-04 19:29:39,959 - [test_01.py - 55] - 20:测试编号6，测试标题测试用户名区分大小写的场景，执行成功
2022-03-04 19:29:40,032 - [test_01.py - 55] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-04 19:29:40,105 - [test_01.py - 55] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-04 19:29:40,179 - [test_01.py - 55] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-04 19:29:40,253 - [test_01.py - 55] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-04 19:31:13,168 - [test_01.py - 50] - 40:测试编号1，测试标题正常流程，执行失败，实际结果为{'code': 1007, 'msg': '用户名或者密码错误'}
2022-03-04 19:31:13,168 - [test_01.py - 51] - 40:assert '登录成功' in "{'code': 1007, 'msg': '用户名或者密码错误'}"
 +  where '登录成功' = <comms.excel_utils.CaseData object at 0x000002555EBB24A8>.expect
 +  and   "{'code': 1007, 'msg': '用户名或者密码错误'}" = str({'code': 1007, 'msg': '用户名或者密码错误'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_01.py", line 45, in test_login
    assert case.expect in str(res)
AssertionError: assert '登录成功' in "{'code': 1007, 'msg': '用户名或者密码错误'}"
 +  where '登录成功' = <comms.excel_utils.CaseData object at 0x000002555EBB24A8>.expect
 +  and   "{'code': 1007, 'msg': '用户名或者密码错误'}" = str({'code': 1007, 'msg': '用户名或者密码错误'})
2022-03-04 19:31:13,304 - [test_01.py - 55] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-04 19:31:13,381 - [test_01.py - 55] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-04 19:31:13,454 - [test_01.py - 55] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-04 19:31:13,526 - [test_01.py - 55] - 20:测试编号5，测试标题测试密码区分大小写的场景，执行成功
2022-03-04 19:31:13,601 - [test_01.py - 55] - 20:测试编号6，测试标题测试用户名区分大小写的场景，执行成功
2022-03-04 19:31:13,673 - [test_01.py - 55] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-04 19:31:13,746 - [test_01.py - 55] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-04 19:31:13,821 - [test_01.py - 55] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-04 19:31:13,894 - [test_01.py - 55] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-04 19:31:50,025 - [test_01.py - 50] - 40:测试编号1，测试标题正常流程，执行失败，实际结果为{'code': 1007, 'msg': '用户名或者密码错误'}
2022-03-04 19:31:50,025 - [test_01.py - 51] - 40:assert '登录成功' in "{'code': 1007, 'msg': '用户名或者密码错误'}"
 +  where '登录成功' = <comms.excel_utils.CaseData object at 0x0000021967E28BE0>.expect
 +  and   "{'code': 1007, 'msg': '用户名或者密码错误'}" = str({'code': 1007, 'msg': '用户名或者密码错误'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_01.py", line 45, in test_login
    assert case.expect in str(res)
AssertionError: assert '登录成功' in "{'code': 1007, 'msg': '用户名或者密码错误'}"
 +  where '登录成功' = <comms.excel_utils.CaseData object at 0x0000021967E28BE0>.expect
 +  and   "{'code': 1007, 'msg': '用户名或者密码错误'}" = str({'code': 1007, 'msg': '用户名或者密码错误'})
2022-03-04 19:31:50,155 - [test_01.py - 55] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-04 19:31:50,229 - [test_01.py - 55] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-04 19:31:50,301 - [test_01.py - 55] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-04 19:31:50,374 - [test_01.py - 55] - 20:测试编号5，测试标题测试密码区分大小写的场景，执行成功
2022-03-04 19:31:50,449 - [test_01.py - 55] - 20:测试编号6，测试标题测试用户名区分大小写的场景，执行成功
2022-03-04 19:31:50,521 - [test_01.py - 55] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-04 19:31:50,594 - [test_01.py - 55] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-04 19:31:50,668 - [test_01.py - 55] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-04 19:31:50,741 - [test_01.py - 55] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-04 19:34:10,305 - [test_01.py - 55] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-04 19:34:10,376 - [test_01.py - 55] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-04 19:34:10,453 - [test_01.py - 55] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-04 19:34:10,531 - [test_01.py - 55] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-04 19:34:10,613 - [test_01.py - 50] - 40:测试编号5，测试标题测试密码区分大小写的场景，执行失败，实际结果为{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjQyMzY1MC41NDA0MDg0OmQzMjA0N2UyNmUyMTUzZjUxNjc3NDE4YWMyNDFjOWE4ZTdmMGFlZDg='}
2022-03-04 19:34:10,613 - [test_01.py - 51] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTdmMGFlZDg='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjQyMzY1MC41NDA0MDg0OmQzMjA0N2UyNmUyMTUzZjUxNjc3NDE4YWMyNDFjOWE4ZTdmMGFlZDg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_01.py", line 47, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTdmMGFlZDg='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjQyMzY1MC41NDA0MDg0OmQzMjA0N2UyNmUyMTUzZjUxNjc3NDE4YWMyNDFjOWE4ZTdmMGFlZDg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-04 19:34:10,746 - [test_01.py - 50] - 40:测试编号6，测试标题测试用户名区分大小写的场景，执行失败，实际结果为{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjQyMzY1MC42ODAwMzQ5OjZlOWFiNzVhNDRlY2NkZTljYzk0OTgzZTQwMTNkZDkwOTJjZGEzOWI='}
2022-03-04 19:34:10,746 - [test_01.py - 51] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OTJjZGEzOWI='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjQyMzY1MC42ODAwMzQ5OjZlOWFiNzVhNDRlY2NkZTljYzk0OTgzZTQwMTNkZDkwOTJjZGEzOWI='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_01.py", line 47, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OTJjZGEzOWI='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjQyMzY1MC42ODAwMzQ5OjZlOWFiNzVhNDRlY2NkZTljYzk0OTgzZTQwMTNkZDkwOTJjZGEzOWI='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-04 19:34:10,823 - [test_01.py - 55] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-04 19:34:10,897 - [test_01.py - 55] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-04 19:34:10,972 - [test_01.py - 55] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-04 19:34:11,045 - [test_01.py - 55] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-05 10:34:46,092 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-05 10:34:46,174 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号2，测试标题测试token值为空的场景，执行成功
2022-03-05 10:34:46,264 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号3，测试标题测试token值错误的场景，执行成功
2022-03-05 10:34:46,349 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号4，测试标题测试token值过期的场景，执行成功
2022-03-05 10:34:46,442 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号5，测试标题测试goodsId错误的场景，执行成功
2022-03-05 10:34:46,537 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号6，测试标题测试goodsId为空的场景，执行成功
2022-03-05 10:34:46,627 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号7，测试标题测试goodsId非数字的场景，执行成功
2022-03-05 10:34:46,726 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号8，测试标题测试isOnSale为空的场景，执行成功
2022-03-05 10:34:46,817 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号9，测试标题测试isOnSale非0和1的数字的场景，执行成功
2022-03-05 10:34:46,913 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号10，测试标题测试isOnSale是字符的场景，执行成功
2022-03-05 10:34:47,011 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号11，测试标题测试isPromote非0和1的数字的场景，执行成功
2022-03-05 10:34:47,113 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号12，测试标题测试isPromote是字符的场景，执行成功
2022-03-05 10:34:47,216 - [test_business_token_goodsinfo03.py - 67] - 20:测试编号13，测试标题测试isPromote为空的场景，执行成功
2022-03-05 15:31:58,124 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号24，测试标题商品信息查询—商品编号非6位数字，执行成功
2022-03-05 15:31:58,216 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号25，测试标题商品信息查询—不存在的商品编号（6位数字），执行成功
2022-03-05 15:32:03,864 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号1，测试标题商品信息查询主流程，执行成功
2022-03-05 15:32:03,950 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号2，测试标题商品信息查询—token为空，执行成功
2022-03-05 15:32:04,069 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号3，测试标题商品信息查询—token区分大小写，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-05 15:32:04,071 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-05 15:32:04,265 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号4，测试标题商品信息查询—上一次token值，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}]}
2022-03-05 15:32:04,265 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (31 lines hidden), use '-vv' to show
2022-03-05 15:32:04,365 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号5，测试标题商品信息查询—（不带商品）销售状态为0，执行成功
2022-03-05 15:32:04,465 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号6，测试标题商品信息查询—（不带商品）销售状态为1，执行成功
2022-03-05 15:32:04,559 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号7，测试标题商品信息查询—（不带商品）促销状态为0，执行成功
2022-03-05 15:32:04,646 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号8，测试标题商品信息查询—（不带商品）促销状态为1，执行成功
2022-03-05 15:32:04,736 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号9，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:32:04,737 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682DC50>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 79, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682DC50>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:32:04,834 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号10，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为1，执行成功
2022-03-05 15:32:04,923 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号11，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为0，执行成功
2022-03-05 15:32:05,024 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号12，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为1，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:32:05,024 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682DAC8>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 79, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682DAC8>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:32:05,120 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号13，测试标题商品信息查询—（带商品）销售状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:32:05,120 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682DD30>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682DD30>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:32:05,287 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号14，测试标题商品信息查询—（带商品）销售状态为1，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:32:05,287 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682DA90>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682DA90>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:32:05,421 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号15，测试标题商品信息查询—（带商品）促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:32:05,422 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682DDD8>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682DDD8>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:32:05,623 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号16，测试标题商品信息查询—（带商品）促销状态为1，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:32:05,624 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682DB38>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682DB38>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:32:05,752 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号17，测试标题商品信息查询—（带商品）销售状态为0、促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:32:05,752 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682D080>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682D080>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:32:05,846 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号18，测试标题商品信息查询—（带商品）销售状态为0、促销状态为1，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:32:05,846 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682D0B8>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682D0B8>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:32:05,969 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号19，测试标题商品信息查询—（带商品）销售状态为1、促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:32:05,970 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682D0F0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682D0F0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:32:06,077 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号20，测试标题商品信息查询—（带商品）销售状态为1、促销状态为1，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:32:06,077 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682D128>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001EB3682D128>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:32:06,180 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号21，测试标题商品信息查询—销售状态为非枚举，执行成功
2022-03-05 15:32:06,270 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号22，测试标题商品信息查询—促销状态为非枚举，执行成功
2022-03-05 15:32:06,380 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号23，测试标题商品信息查询—存在的商品编号（6位数字），执行成功
2022-03-05 15:32:06,474 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号24，测试标题商品信息查询—商品编号非6位数字，执行成功
2022-03-05 15:32:06,563 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号25，测试标题商品信息查询—不存在的商品编号（6位数字），执行成功
2022-03-05 15:39:28,678 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号1，测试标题商品信息查询主流程，执行成功
2022-03-05 15:39:28,768 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号2，测试标题商品信息查询—token为空，执行成功
2022-03-05 15:39:28,881 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号3，测试标题商品信息查询—token区分大小写，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '西瓜', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '草莓', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '面条', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}]}
2022-03-05 15:39:28,881 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
2022-03-05 15:39:29,034 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号4，测试标题商品信息查询—上一次token值，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '西瓜', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '草莓', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '面条', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}]}
2022-03-05 15:39:29,034 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
2022-03-05 15:39:29,129 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号5，测试标题商品信息查询—（不带商品）销售状态为0，执行成功
2022-03-05 15:39:29,221 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号6，测试标题商品信息查询—（不带商品）销售状态为1，执行成功
2022-03-05 15:39:29,316 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号7，测试标题商品信息查询—（不带商品）促销状态为0，执行成功
2022-03-05 15:39:29,404 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号8，测试标题商品信息查询—（不带商品）促销状态为1，执行成功
2022-03-05 15:39:29,529 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号9，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为0，执行成功
2022-03-05 15:39:29,643 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号10，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为1，执行成功
2022-03-05 15:39:29,737 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号11，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为0，执行成功
2022-03-05 15:39:29,824 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号12，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为1，执行成功
2022-03-05 15:39:29,916 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号13，测试标题商品信息查询—（带商品）销售状态为0，执行成功
2022-03-05 15:39:30,023 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号14，测试标题商品信息查询—（带商品）销售状态为1，执行成功
2022-03-05 15:39:30,113 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号15，测试标题商品信息查询—（带商品）促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:39:30,113 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000024F15640668>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000024F15640668>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:39:30,235 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号16，测试标题商品信息查询—（带商品）促销状态为1，执行成功
2022-03-05 15:39:30,337 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号17，测试标题商品信息查询—（带商品）销售状态为0、促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:39:30,338 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000024F156407B8>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000024F156407B8>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:39:30,435 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号18，测试标题商品信息查询—（带商品）销售状态为0、促销状态为1，执行成功
2022-03-05 15:39:30,521 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号19，测试标题商品信息查询—（带商品）销售状态为1、促销状态为0，执行成功
2022-03-05 15:39:30,615 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号20，测试标题商品信息查询—（带商品）销售状态为1、促销状态为1，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:39:30,615 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000024F15640860>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000024F15640860>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:39:30,715 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号21，测试标题商品信息查询—销售状态为非枚举，执行成功
2022-03-05 15:39:30,805 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号22，测试标题商品信息查询—促销状态为非枚举，执行成功
2022-03-05 15:39:30,893 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号23，测试标题商品信息查询—存在的商品编号（6位数字），执行成功
2022-03-05 15:39:31,033 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号24，测试标题商品信息查询—商品编号非6位数字，执行成功
2022-03-05 15:39:31,170 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号25，测试标题商品信息查询—不存在的商品编号（6位数字），执行成功
2022-03-05 15:41:21,606 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号1，测试标题商品信息查询主流程，执行成功
2022-03-05 15:41:21,688 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号2，测试标题商品信息查询—token为空，执行成功
2022-03-05 15:41:21,800 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号3，测试标题商品信息查询—token区分大小写，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '西瓜', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '草莓', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '面条', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}]}
2022-03-05 15:41:21,800 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
2022-03-05 15:41:21,951 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号4，测试标题商品信息查询—上一次token值，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '西瓜', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '草莓', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '面条', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}]}
2022-03-05 15:41:21,951 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
2022-03-05 15:41:22,086 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号5，测试标题商品信息查询—（不带商品）销售状态为0，执行成功
2022-03-05 15:41:22,177 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号6，测试标题商品信息查询—（不带商品）销售状态为1，执行成功
2022-03-05 15:41:22,267 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号7，测试标题商品信息查询—（不带商品）促销状态为0，执行成功
2022-03-05 15:41:22,360 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号8，测试标题商品信息查询—（不带商品）促销状态为1，执行成功
2022-03-05 15:41:22,461 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号9，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为0，执行成功
2022-03-05 15:41:22,549 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号10，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为1，执行成功
2022-03-05 15:41:22,640 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号11，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为0，执行成功
2022-03-05 15:41:22,745 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号12，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为1，执行成功
2022-03-05 15:41:22,832 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号13，测试标题商品信息查询—（带商品）销售状态为0，执行成功
2022-03-05 15:41:22,925 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号14，测试标题商品信息查询—（带商品）销售状态为1，执行成功
2022-03-05 15:41:23,011 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号15，测试标题商品信息查询—（带商品）促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:41:23,011 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000015208A93E48>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000015208A93E48>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:41:23,109 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号16，测试标题商品信息查询—（带商品）促销状态为1，执行成功
2022-03-05 15:41:23,200 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号17，测试标题商品信息查询—（带商品）销售状态为0、促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:41:23,200 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000015208A93908>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000015208A93908>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:41:23,294 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号18，测试标题商品信息查询—（带商品）销售状态为0、促销状态为1，执行成功
2022-03-05 15:41:23,384 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号19，测试标题商品信息查询—（带商品）销售状态为1、促销状态为0，执行成功
2022-03-05 15:41:23,472 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号20，测试标题商品信息查询—（带商品）销售状态为1、促销状态为1，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:41:23,472 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000015208A93B70>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000015208A93B70>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:41:23,574 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号21，测试标题商品信息查询—销售状态为非枚举，执行成功
2022-03-05 15:41:23,668 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号22，测试标题商品信息查询—促销状态为非枚举，执行成功
2022-03-05 15:41:23,760 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号23，测试标题商品信息查询—存在的商品编号（6位数字），执行成功
2022-03-05 15:41:23,857 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号24，测试标题商品信息查询—商品编号非6位数字，执行成功
2022-03-05 15:41:23,945 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号25，测试标题商品信息查询—不存在的商品编号（6位数字），执行成功
2022-03-05 15:42:58,189 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号1，测试标题商品信息查询主流程，执行成功
2022-03-05 15:42:58,271 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号2，测试标题商品信息查询—token为空，执行成功
2022-03-05 15:42:58,382 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号3，测试标题商品信息查询—token区分大小写，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '西瓜', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '草莓', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '面条', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}]}
2022-03-05 15:42:58,383 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
2022-03-05 15:42:58,475 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号4，测试标题商品信息查询—上一次token值，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '西瓜', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '草莓', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '面条', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}]}
2022-03-05 15:42:58,476 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
2022-03-05 15:42:58,570 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号5，测试标题商品信息查询—（不带商品）销售状态为0，执行成功
2022-03-05 15:42:58,659 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号6，测试标题商品信息查询—（不带商品）销售状态为1，执行成功
2022-03-05 15:42:58,748 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号7，测试标题商品信息查询—（不带商品）促销状态为0，执行成功
2022-03-05 15:42:58,846 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号8，测试标题商品信息查询—（不带商品）促销状态为1，执行成功
2022-03-05 15:42:58,938 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号9，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为0，执行成功
2022-03-05 15:42:59,029 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号10，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为1，执行成功
2022-03-05 15:42:59,121 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号11，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为0，执行成功
2022-03-05 15:42:59,212 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号12，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为1，执行成功
2022-03-05 15:42:59,329 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号13，测试标题商品信息查询—（带商品）销售状态为0，执行成功
2022-03-05 15:42:59,420 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号14，测试标题商品信息查询—（带商品）销售状态为1，执行成功
2022-03-05 15:42:59,517 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号15，测试标题商品信息查询—（带商品）促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:42:59,517 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001A138B04DA0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001A138B04DA0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:42:59,607 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号16，测试标题商品信息查询—（带商品）促销状态为1，执行成功
2022-03-05 15:42:59,698 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号17，测试标题商品信息查询—（带商品）销售状态为0、促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:42:59,698 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001A138B047F0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001A138B047F0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:42:59,791 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号18，测试标题商品信息查询—（带商品）销售状态为0、促销状态为1，执行成功
2022-03-05 15:42:59,877 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号19，测试标题商品信息查询—（带商品）销售状态为1、促销状态为0，执行成功
2022-03-05 15:43:00,021 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号20，测试标题商品信息查询—（带商品）销售状态为1、促销状态为1，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:43:00,021 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001A138B049B0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000001A138B049B0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:43:00,111 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号21，测试标题商品信息查询—销售状态为非枚举，执行成功
2022-03-05 15:43:00,201 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号22，测试标题商品信息查询—促销状态为非枚举，执行成功
2022-03-05 15:43:00,291 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号23，测试标题商品信息查询—存在的商品编号（6位数字），执行成功
2022-03-05 15:43:00,379 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号24，测试标题商品信息查询—商品编号非6位数字，执行成功
2022-03-05 15:43:00,472 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号25，测试标题商品信息查询—不存在的商品编号（6位数字），执行成功
2022-03-05 15:43:44,132 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号1，测试标题商品信息查询主流程，执行成功
2022-03-05 15:43:44,214 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号2，测试标题商品信息查询—token为空，执行成功
2022-03-05 15:43:44,327 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号3，测试标题商品信息查询—token区分大小写，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '西瓜', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '草莓', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '面条', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}]}
2022-03-05 15:43:44,327 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
2022-03-05 15:43:44,421 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号4，测试标题商品信息查询—上一次token值，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '西瓜', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '草莓', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '面条', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}]}
2022-03-05 15:43:44,421 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
2022-03-05 15:43:44,514 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号5，测试标题商品信息查询—（不带商品）销售状态为0，执行成功
2022-03-05 15:43:44,603 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号6，测试标题商品信息查询—（不带商品）销售状态为1，执行成功
2022-03-05 15:43:44,692 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号7，测试标题商品信息查询—（不带商品）促销状态为0，执行成功
2022-03-05 15:43:44,785 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号8，测试标题商品信息查询—（不带商品）促销状态为1，执行成功
2022-03-05 15:43:44,874 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号9，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为0，执行成功
2022-03-05 15:43:44,967 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号10，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为1，执行成功
2022-03-05 15:43:45,060 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号11，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为0，执行成功
2022-03-05 15:43:45,150 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号12，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为1，执行成功
2022-03-05 15:43:45,241 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号13，测试标题商品信息查询—（带商品）销售状态为0，执行成功
2022-03-05 15:43:45,342 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号14，测试标题商品信息查询—（带商品）销售状态为1，执行成功
2022-03-05 15:43:45,468 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号15，测试标题商品信息查询—（带商品）促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:43:45,469 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000024A393DA6A0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000024A393DA6A0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:43:45,603 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号16，测试标题商品信息查询—（带商品）促销状态为1，执行成功
2022-03-05 15:43:45,694 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号17，测试标题商品信息查询—（带商品）销售状态为0、促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:43:45,694 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000024A393DA748>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000024A393DA748>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:43:45,783 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号18，测试标题商品信息查询—（带商品）销售状态为0、促销状态为1，执行成功
2022-03-05 15:43:45,873 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号19，测试标题商品信息查询—（带商品）销售状态为1、促销状态为0，执行成功
2022-03-05 15:43:45,964 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号20，测试标题商品信息查询—（带商品）销售状态为1、促销状态为1，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:43:45,964 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000024A393DAF98>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000024A393DAF98>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:43:46,052 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号21，测试标题商品信息查询—销售状态为非枚举，执行成功
2022-03-05 15:43:46,155 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号22，测试标题商品信息查询—促销状态为非枚举，执行成功
2022-03-05 15:43:46,259 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号23，测试标题商品信息查询—存在的商品编号（6位数字），执行成功
2022-03-05 15:43:46,362 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号24，测试标题商品信息查询—商品编号非6位数字，执行成功
2022-03-05 15:43:46,449 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号25，测试标题商品信息查询—不存在的商品编号（6位数字），执行成功
2022-03-05 15:47:54,962 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号1，测试标题商品信息查询主流程，执行成功
2022-03-05 15:47:55,044 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号2，测试标题商品信息查询—token为空，执行成功
2022-03-05 15:47:55,161 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号3，测试标题商品信息查询—token区分大小写，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '西瓜', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '草莓', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '面条', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}]}
2022-03-05 15:47:55,161 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
2022-03-05 15:47:55,262 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号4，测试标题商品信息查询—上一次token值，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '西瓜', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '草莓', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '面条', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}]}
2022-03-05 15:47:55,262 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
2022-03-05 15:47:55,393 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号5，测试标题商品信息查询—（不带商品）销售状态为0，执行成功
2022-03-05 15:47:55,502 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号6，测试标题商品信息查询—（不带商品）销售状态为1，执行成功
2022-03-05 15:47:55,618 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号7，测试标题商品信息查询—（不带商品）促销状态为0，执行成功
2022-03-05 15:47:55,704 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号8，测试标题商品信息查询—（不带商品）促销状态为1，执行成功
2022-03-05 15:47:55,796 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号9，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为0，执行成功
2022-03-05 15:47:55,886 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号10，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为1，执行成功
2022-03-05 15:47:56,000 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号11，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为0，执行成功
2022-03-05 15:47:56,114 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号12，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为1，执行成功
2022-03-05 15:47:56,211 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号13，测试标题商品信息查询—（带商品）销售状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:47:56,211 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000002109DBCED30>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000002109DBCED30>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:47:56,329 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号14，测试标题商品信息查询—（带商品）销售状态为1，执行成功
2022-03-05 15:47:56,432 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号15，测试标题商品信息查询—（带商品）促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:47:56,433 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000002109DBCE0F0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000002109DBCE0F0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:47:56,547 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号16，测试标题商品信息查询—（带商品）促销状态为1，执行成功
2022-03-05 15:47:56,647 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号17，测试标题商品信息查询—（带商品）销售状态为0、促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:47:56,647 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000002109DBCE160>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000002109DBCE160>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:47:56,738 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号18，测试标题商品信息查询—（带商品）销售状态为0、促销状态为1，执行成功
2022-03-05 15:47:56,828 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号19，测试标题商品信息查询—（带商品）销售状态为1、促销状态为0，执行成功
2022-03-05 15:47:56,915 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号20，测试标题商品信息查询—（带商品）销售状态为1、促销状态为1，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-05 15:47:56,915 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000002109DBCE208>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x000002109DBCE208>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-05 15:47:57,011 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号21，测试标题商品信息查询—销售状态为非枚举，执行成功
2022-03-05 15:47:57,097 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号22，测试标题商品信息查询—促销状态为非枚举，执行成功
2022-03-05 15:47:57,188 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号23，测试标题商品信息查询—存在的商品编号（6位数字），执行成功
2022-03-05 15:47:57,276 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号24，测试标题商品信息查询—商品编号非6位数字，执行成功
2022-03-05 15:47:57,363 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号25，测试标题商品信息查询—不存在的商品编号（6位数字），执行成功
2022-03-05 15:51:29,561 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号1，测试标题商品信息查询主流程，执行成功
2022-03-05 15:51:29,642 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号2，测试标题商品信息查询—token为空，执行成功
2022-03-05 15:51:29,752 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号3，测试标题商品信息查询—token区分大小写，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '西瓜', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '草莓', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '面条', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}]}
2022-03-05 15:51:29,753 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
2022-03-05 15:51:29,846 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号4，测试标题商品信息查询—上一次token值，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '西瓜', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '草莓', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '面条', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}]}
2022-03-05 15:51:29,846 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (95 lines hidden), use '-vv' to show
2022-03-05 15:51:29,939 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号5，测试标题商品信息查询—（不带商品）销售状态为0，执行成功
2022-03-05 15:51:30,028 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号6，测试标题商品信息查询—（不带商品）销售状态为1，执行成功
2022-03-05 15:51:30,117 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号7，测试标题商品信息查询—（不带商品）促销状态为0，执行成功
2022-03-05 15:51:30,209 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号8，测试标题商品信息查询—（不带商品）促销状态为1，执行成功
2022-03-05 15:51:30,328 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号9，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为0，执行成功
2022-03-05 15:51:30,433 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号10，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为1，执行成功
2022-03-05 15:51:30,526 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号11，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为0，执行成功
2022-03-05 15:51:30,618 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号12，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为1，执行成功
2022-03-05 15:51:30,706 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号13，测试标题商品信息查询—（带商品）销售状态为0，执行成功
2022-03-05 15:51:30,808 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号14，测试标题商品信息查询—（带商品）销售状态为1，执行成功
2022-03-05 15:51:30,899 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号15，测试标题商品信息查询—（带商品）促销状态为0，执行成功
2022-03-05 15:51:30,985 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号16，测试标题商品信息查询—（带商品）促销状态为1，执行成功
2022-03-05 15:51:31,075 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号17，测试标题商品信息查询—（带商品）销售状态为0、促销状态为0，执行成功
2022-03-05 15:51:31,166 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号18，测试标题商品信息查询—（带商品）销售状态为0、促销状态为1，执行成功
2022-03-05 15:51:31,253 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号19，测试标题商品信息查询—（带商品）销售状态为1、促销状态为0，执行成功
2022-03-05 15:51:31,376 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号20，测试标题商品信息查询—（带商品）销售状态为1、促销状态为1，执行成功
2022-03-05 15:51:31,465 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号21，测试标题商品信息查询—销售状态为非枚举，执行成功
2022-03-05 15:51:31,556 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号22，测试标题商品信息查询—促销状态为非枚举，执行成功
2022-03-05 15:51:31,649 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号23，测试标题商品信息查询—存在的商品编号（6位数字），执行成功
2022-03-05 15:51:31,741 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号24，测试标题商品信息查询—商品编号非6位数字，执行成功
2022-03-05 15:51:31,836 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号25，测试标题商品信息查询—不存在的商品编号（6位数字），执行成功
2022-03-05 16:37:42,121 - [test_login05.py - 80] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-05 16:37:42,210 - [test_login05.py - 80] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-05 16:37:42,299 - [test_login05.py - 80] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-05 16:37:42,387 - [test_login05.py - 80] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-05 16:37:42,475 - [test_login05.py - 75] - 40:测试编号5，测试标题测试密码区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjQ5OTQ2Mi4zOTg2NDQyOmQ5OTlhZTQ5YzY5MDdhZTc2YTY0NmVmMDhlYjg1NGVmMWY5NDFmODg='}
2022-03-05 16:37:42,476 - [test_login05.py - 76] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MWY5NDFmODg='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjQ5OTQ2Mi4zOTg2NDQyOmQ5OTlhZTQ5YzY5MDdhZTc2YTY0NmVmMDhlYjg1NGVmMWY5NDFmODg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login05.py", line 72, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MWY5NDFmODg='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjQ5OTQ2Mi4zOTg2NDQyOmQ5OTlhZTQ5YzY5MDdhZTc2YTY0NmVmMDhlYjg1NGVmMWY5NDFmODg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-05 16:37:42,572 - [test_login05.py - 75] - 40:测试编号6，测试标题测试用户名区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjQ5OTQ2Mi40OTAzOTg0OmQ3ZjY3NjI3OTJkMWM0NzljZGI0MzM0YTgyMzU3YWJjNDE1MzVmMmU='}
2022-03-05 16:37:42,572 - [test_login05.py - 76] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NDE1MzVmMmU='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjQ5OTQ2Mi40OTAzOTg0OmQ3ZjY3NjI3OTJkMWM0NzljZGI0MzM0YTgyMzU3YWJjNDE1MzVmMmU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login05.py", line 72, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NDE1MzVmMmU='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjQ5OTQ2Mi40OTAzOTg0OmQ3ZjY3NjI3OTJkMWM0NzljZGI0MzM0YTgyMzU3YWJjNDE1MzVmMmU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-05 16:37:42,662 - [test_login05.py - 80] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-05 16:37:42,748 - [test_login05.py - 80] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-05 16:37:42,838 - [test_login05.py - 80] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-05 16:37:42,926 - [test_login05.py - 80] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-05 17:29:07,621 - [test_business_token_order_items01.py - 61] - 20:测试编号1，测试标题正常流程，测试成功
2022-03-05 17:35:26,310 - [test_business_token_order_items01.py - 70] - 20:测试编号1，测试标题正常流程，测试成功
2022-03-05 17:45:54,599 - [test_business_token_order_items01.py - 77] - 20:测试编号1，测试标题订单信息查询主流程，测试成功
2022-03-05 17:46:14,727 - [test_business_token_order_items01.py - 77] - 20:测试编号1，测试标题订单信息查询主流程，测试成功
2022-03-05 17:46:14,820 - [test_business_token_order_items01.py - 77] - 20:测试编号2，测试标题订单信息查询—token为空，测试成功
2022-03-05 17:46:14,926 - [test_business_token_order_items01.py - 77] - 20:测试编号3，测试标题订单信息查询—token区分大小写，测试成功
2022-03-05 17:46:15,041 - [test_business_token_order_items01.py - 72] - 40:测试编号4，测试标题订单信息查询——上一次token值，测试失败，实际结果{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15888888888', 'status': '未支付', 'value': 0.0, 'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}]}
2022-03-05 17:46:15,041 - [test_business_token_order_items01.py - 73] - 40:assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'code': 1004} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_order_items05\test_business_token_order_items01.py", line 69, in test_order_items
    assert eval(case.expect) == res
AssertionError: assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'code': 1004} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
2022-03-05 17:46:15,149 - [test_business_token_order_items01.py - 77] - 20:测试编号5，测试标题订单信息查询订单编号为空，测试成功
2022-03-05 17:46:15,248 - [test_business_token_order_items01.py - 77] - 20:测试编号6，测试标题订单信息查询订单编号错误，测试成功
2022-03-05 17:46:49,195 - [test_business_token_order_items01.py - 77] - 20:测试编号1，测试标题订单信息查询主流程，测试成功
2022-03-05 17:46:49,291 - [test_business_token_order_items01.py - 77] - 20:测试编号2，测试标题订单信息查询—token为空，测试成功
2022-03-05 17:46:49,397 - [test_business_token_order_items01.py - 77] - 20:测试编号3，测试标题订单信息查询—token区分大小写，测试成功
2022-03-05 17:46:49,511 - [test_business_token_order_items01.py - 72] - 40:测试编号4，测试标题订单信息查询——上一次token值，测试失败，实际结果{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15888888888', 'status': '未支付', 'value': 100.0, 'goods_tiems': [{'goods_name': '预留数据', 'goods_price': 100.0}]}
2022-03-05 17:46:49,511 - [test_business_token_order_items01.py - 73] - 40:assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1004} != {'code': 1000}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '预留数据', 'goods_price': 100.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_order_items05\test_business_token_order_items01.py", line 69, in test_order_items
    assert eval(case.expect) == res
AssertionError: assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1004} != {'code': 1000}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '预留数据', 'goods_price': 100.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
2022-03-05 17:46:49,624 - [test_business_token_order_items01.py - 77] - 20:测试编号5，测试标题订单信息查询订单编号为空，测试成功
2022-03-05 17:46:49,726 - [test_business_token_order_items01.py - 77] - 20:测试编号6，测试标题订单信息查询订单编号错误，测试成功
2022-03-07 10:10:48,660 - [test_business_token_order_items01.py - 75] - 40:测试编号4，测试标题订单信息查询——上一次token值，测试失败，实际结果{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15888888888', 'status': '未支付', 'value': 0.0, 'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}]}
2022-03-07 10:10:48,661 - [test_business_token_order_items01.py - 76] - 40:assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'code': 1004} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_order_items05\test_business_token_order_items01.py", line 72, in test_order_items
    assert eval(case.expect) == res
AssertionError: assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'code': 1004} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
2022-03-07 10:10:48,763 - [test_business_token_order_items01.py - 80] - 20:测试编号5，测试标题订单信息查询订单编号为空，测试成功
2022-03-07 10:10:48,862 - [test_business_token_order_items01.py - 80] - 20:测试编号6，测试标题订单信息查询订单编号错误，测试成功
2022-03-07 10:10:48,966 - [test_business_token_order_items01.py - 80] - 20:测试编号7，测试标题订单信息查询订单编号不存在，测试成功
2022-03-07 10:10:53,980 - [test_business_token_order_items01.py - 80] - 20:测试编号1，测试标题订单信息查询主流程，测试成功
2022-03-07 10:10:54,075 - [test_business_token_order_items01.py - 80] - 20:测试编号2，测试标题订单信息查询—token为空，测试成功
2022-03-07 10:10:54,186 - [test_business_token_order_items01.py - 80] - 20:测试编号3，测试标题订单信息查询—token区分大小写，测试成功
2022-03-07 10:10:54,302 - [test_business_token_order_items01.py - 75] - 40:测试编号4，测试标题订单信息查询——上一次token值，测试失败，实际结果{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15888888888', 'status': '未支付', 'value': 0.0, 'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}]}
2022-03-07 10:10:54,303 - [test_business_token_order_items01.py - 76] - 40:assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'code': 1004} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_order_items05\test_business_token_order_items01.py", line 72, in test_order_items
    assert eval(case.expect) == res
AssertionError: assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'code': 1004} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
2022-03-07 10:10:54,416 - [test_business_token_order_items01.py - 80] - 20:测试编号5，测试标题订单信息查询订单编号为空，测试成功
2022-03-07 10:10:54,513 - [test_business_token_order_items01.py - 80] - 20:测试编号6，测试标题订单信息查询订单编号错误，测试成功
2022-03-07 10:10:54,623 - [test_business_token_order_items01.py - 80] - 20:测试编号7，测试标题订单信息查询订单编号不存在，测试成功
2022-03-07 10:44:56,545 - [test_business_token_goods_input01.py - 30] - 40:测试编号1，测试标题正常的流程，执行失败，实际结果为{'code': 1007, 'msg': '商品类别格式不正确'}
2022-03-07 10:44:56,545 - [test_business_token_goods_input01.py - 31] - 40:assert {'code': 1000...sg': '商品录入成功'} == {'code': 1007...: '商品类别格式不正确'}
  Differing items:
  {'msg': '商品录入成功'} != {'msg': '商品类别格式不正确'}
  {'code': 1000} != {'code': 1007}
  Full diff:
  - {'code': 1007, 'msg': '商品类别格式不正确'}
  ?             ^            ^^^^^^^
  + {'code': 1000, 'msg': '商品录入成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 27, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品录入成功'} == {'code': 1007...: '商品类别格式不正确'}
  Differing items:
  {'msg': '商品录入成功'} != {'msg': '商品类别格式不正确'}
  {'code': 1000} != {'code': 1007}
  Full diff:
  - {'code': 1007, 'msg': '商品类别格式不正确'}
  ?             ^            ^^^^^^^
  + {'code': 1000, 'msg': '商品录入成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-07 10:46:06,910 - [test_business_token_goods_input01.py - 30] - 40:测试编号1，测试标题正常的流程，执行失败，实际结果为{'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-07 10:46:06,910 - [test_business_token_goods_input01.py - 31] - 40:assert {'code': 1000...sg': '商品录入成功'} == {'code': 1011...请检查token是否失效'}
  Differing items:
  {'code': 1000} != {'code': 1011}
  {'msg': '商品录入成功'} != {'msg': '鉴权失败,请检查token是否失效'}
  Full diff:
  - {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
  + {'code': 1000, 'msg': '商品录入成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 27, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品录入成功'} == {'code': 1011...请检查token是否失效'}
  Differing items:
  {'code': 1000} != {'code': 1011}
  {'msg': '商品录入成功'} != {'msg': '鉴权失败,请检查token是否失效'}
  Full diff:
  - {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
  + {'code': 1000, 'msg': '商品录入成功'}
2022-03-07 10:48:15,953 - [test_business_token_goods_input01.py - 34] - 40:测试编号1，测试标题正常的流程，执行失败，实际结果为{'code': 1013, 'msg': '产品名称不能重复'}
2022-03-07 10:48:15,953 - [test_business_token_goods_input01.py - 35] - 40:assert {'code': 1000...sg': '商品录入成功'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '商品录入成功'} != {'msg': '产品名称不能重复'}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  ?            ^^          ^ ^^^^^^
  + {'code': 1000, 'msg': '商品录入成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 31, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品录入成功'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '商品录入成功'} != {'msg': '产品名称不能重复'}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  ?            ^^          ^ ^^^^^^
  + {'code': 1000, 'msg': '商品录入成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-07 10:48:34,728 - [test_business_token_goods_input01.py - 39] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-07 11:19:13,874 - [test_business_token_goods_input01.py - 52] - 40:测试编号1，测试标题正常的流程，执行失败，实际结果为{'code': 1000, 'msg': '商品录入成功'}
2022-03-07 11:19:13,874 - [test_business_token_goods_input01.py - 53] - 40:assert (100020, '精华面... 19, 13), ...) == 1
  +(100020, '精华面霜', 10001, None, 100, datetime.datetime(2022, 3, 7, 11, 19, 13), datetime.date(2099, 12, 31), Decimal('2000.00'), Decimal('0.00'), None, None, 0, 1, '10')
  -1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 48, in test_goods_input
    assert count == 1
AssertionError: assert (100020, '精华面... 19, 13), ...) == 1
  +(100020, '精华面霜', 10001, None, 100, datetime.datetime(2022, 3, 7, 11, 19, 13), datetime.date(2099, 12, 31), Decimal('2000.00'), Decimal('0.00'), None, None, 0, 1, '10')
  -1
2022-03-07 11:20:01,300 - [test_business_token_goods_input01.py - 57] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-07 15:02:16,524 - [test_business_token_goods_input01.py - 79] - 40:测试编号1，测试标题正常的流程，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:02:16,524 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1000...sg': '商品录入成功'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1000} != {'code': 9999}
  {'msg': '商品录入成功'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1000, 'msg': '商品录入成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品录入成功'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1000} != {'code': 9999}
  {'msg': '商品录入成功'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1000, 'msg': '商品录入成功'}
2022-03-07 15:02:16,764 - [test_business_token_goods_input01.py - 79] - 40:测试编号9，测试标题测试商品分类id为空，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:02:16,765 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1003...sTypeId值不能为空'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1003} != {'code': 9999}
  {'msg': '商品编号goodsTypeId值不能为空'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1003, 'msg': '商品编号goodsTypeId值不能为空'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1003...sTypeId值不能为空'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1003} != {'code': 9999}
  {'msg': '商品编号goodsTypeId值不能为空'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1003, 'msg': '商品编号goodsTypeId值不能为空'}
2022-03-07 15:06:03,687 - [test_business_token_goods_input01.py - 79] - 40:测试编号1，测试标题正常的流程，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:06:03,687 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1000...sg': '商品录入成功'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1000} != {'code': 9999}
  {'msg': '商品录入成功'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1000, 'msg': '商品录入成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品录入成功'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1000} != {'code': 9999}
  {'msg': '商品录入成功'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1000, 'msg': '商品录入成功'}
2022-03-07 15:06:03,805 - [test_business_token_goods_input01.py - 79] - 40:测试编号2，测试标题测试商品信息录入—token为空，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:06:03,805 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1001... 'token值不能为空'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1001} != {'code': 9999}
  {'msg': 'token值不能为空'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1001, 'msg': 'token值不能为空'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1001... 'token值不能为空'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1001} != {'code': 9999}
  {'msg': 'token值不能为空'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1001, 'msg': 'token值不能为空'}
2022-03-07 15:06:03,931 - [test_business_token_goods_input01.py - 79] - 40:测试编号3，测试标题测试商品信息录入——token区分大小写，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:06:03,932 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1011} != {'code': 9999}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1011} != {'code': 9999}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-07 15:06:04,066 - [test_business_token_goods_input01.py - 79] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:06:04,066 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1011} != {'code': 9999}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1011} != {'code': 9999}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-07 15:06:04,183 - [test_business_token_goods_input01.py - 79] - 40:测试编号5，测试标题测试商品名为空的场景，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:06:04,183 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1002...odsName值不能为空'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1002} != {'code': 9999}
  {'msg': '商品名称goodsName值不能为空'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1002, 'msg': '商品名称goodsName值不能为空'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1002...odsName值不能为空'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1002} != {'code': 9999}
  {'msg': '商品名称goodsName值不能为空'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1002, 'msg': '商品名称goodsName值不能为空'}
2022-03-07 15:06:04,326 - [test_business_token_goods_input01.py - 79] - 40:测试编号6，测试标题测试商品名有效边界的场景，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:06:04,326 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1000...sg': '商品录入成功'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1000} != {'code': 9999}
  {'msg': '商品录入成功'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1000, 'msg': '商品录入成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品录入成功'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1000} != {'code': 9999}
  {'msg': '商品录入成功'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1000, 'msg': '商品录入成功'}
2022-03-07 15:06:04,443 - [test_business_token_goods_input01.py - 79] - 40:测试编号7，测试标题测试商品名无效边界的场景，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:06:04,444 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1006...: '商品名称格式不正确'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1006} != {'code': 9999}
  {'msg': '商品名称格式不正确'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1006, 'msg': '商品名称格式不正确'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1006...: '商品名称格式不正确'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1006} != {'code': 9999}
  {'msg': '商品名称格式不正确'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1006, 'msg': '商品名称格式不正确'}
2022-03-07 15:06:04,561 - [test_business_token_goods_input01.py - 79] - 40:测试编号8，测试标题测试商品名已存在的场景，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:06:04,561 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1013...': '产品名称不能重复'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1013} != {'code': 9999}
  {'msg': '产品名称不能重复'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1013...': '产品名称不能重复'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1013} != {'code': 9999}
  {'msg': '产品名称不能重复'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1013, 'msg': '产品名称不能重复'}
2022-03-07 15:06:04,674 - [test_business_token_goods_input01.py - 79] - 40:测试编号9，测试标题测试商品分类id为空，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:06:04,675 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1003...sTypeId值不能为空'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1003} != {'code': 9999}
  {'msg': '商品编号goodsTypeId值不能为空'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1003, 'msg': '商品编号goodsTypeId值不能为空'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1003...sTypeId值不能为空'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1003} != {'code': 9999}
  {'msg': '商品编号goodsTypeId值不能为空'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1003, 'msg': '商品编号goodsTypeId值不能为空'}
2022-03-07 15:06:04,809 - [test_business_token_goods_input01.py - 79] - 40:测试编号10，测试标题测试商品分类id不存在，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:06:04,809 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1012...g': '商品分类不存在'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1012} != {'code': 9999}
  {'msg': '商品分类不存在'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1012, 'msg': '商品分类不存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1012...g': '商品分类不存在'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1012} != {'code': 9999}
  {'msg': '商品分类不存在'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1012, 'msg': '商品分类不存在'}
2022-03-07 15:06:04,926 - [test_business_token_goods_input01.py - 79] - 40:测试编号11，测试标题测试商品描述为空，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:06:04,927 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1000...sg': '商品录入成功'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1000} != {'code': 9999}
  {'msg': '商品录入成功'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1000, 'msg': '商品录入成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品录入成功'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1000} != {'code': 9999}
  {'msg': '商品录入成功'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1000, 'msg': '商品录入成功'}
2022-03-07 15:06:05,051 - [test_business_token_goods_input01.py - 79] - 40:测试编号12，测试标题测试商品描述有效边界，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:06:05,051 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1000...sg': '商品录入成功'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1000} != {'code': 9999}
  {'msg': '商品录入成功'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1000, 'msg': '商品录入成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品录入成功'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1000} != {'code': 9999}
  {'msg': '商品录入成功'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1000, 'msg': '商品录入成功'}
2022-03-07 15:06:05,166 - [test_business_token_goods_input01.py - 79] - 40:测试编号13，测试标题测试商品描述无效边界，执行失败，实际结果为{'code': 9999, 'msg': '商品库存number值不存在'}
2022-03-07 15:06:05,167 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1008...: '商品描述格式不正确'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1008} != {'code': 9999}
  {'msg': '商品描述格式不正确'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1008, 'msg': '商品描述格式不正确'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...: '商品描述格式不正确'} == {'code': 9999...库存number值不存在'}
  Differing items:
  {'code': 1008} != {'code': 9999}
  {'msg': '商品描述格式不正确'} != {'msg': '商品库存number值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品库存number值不存在'}
  + {'code': 1008, 'msg': '商品描述格式不正确'}
2022-03-07 15:06:05,291 - [test_business_token_goods_input01.py - 79] - 40:测试编号14，测试标题测试商品库存为空，执行失败，实际结果为{'code': 9999, 'msg': '商品价格shopPrice值不存在'}
2022-03-07 15:06:05,291 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1004...存number值不能为空'} == {'code': 9999...hopPrice值不存在'}
  Differing items:
  {'code': 1004} != {'code': 9999}
  {'msg': '商品库存number值不能为空'} != {'msg': '商品价格shopPrice值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品价格shopPrice值不存在'}
  + {'code': 1004, 'msg': '商品库存number值不能为空'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1004...存number值不能为空'} == {'code': 9999...hopPrice值不存在'}
  Differing items:
  {'code': 1004} != {'code': 9999}
  {'msg': '商品库存number值不能为空'} != {'msg': '商品价格shopPrice值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品价格shopPrice值不存在'}
  + {'code': 1004, 'msg': '商品库存number值不能为空'}
2022-03-07 15:06:05,406 - [test_business_token_goods_input01.py - 79] - 40:测试编号15，测试标题测试商品库存最大整数，执行失败，实际结果为{'code': 9999, 'msg': '商品价格shopPrice值不存在'}
2022-03-07 15:06:05,406 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1000...sg': '商品录入成功'} == {'code': 9999...hopPrice值不存在'}
  Differing items:
  {'code': 1000} != {'code': 9999}
  {'msg': '商品录入成功'} != {'msg': '商品价格shopPrice值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品价格shopPrice值不存在'}
  + {'code': 1000, 'msg': '商品录入成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品录入成功'} == {'code': 9999...hopPrice值不存在'}
  Differing items:
  {'code': 1000} != {'code': 9999}
  {'msg': '商品录入成功'} != {'msg': '商品价格shopPrice值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品价格shopPrice值不存在'}
  + {'code': 1000, 'msg': '商品录入成功'}
2022-03-07 15:06:05,525 - [test_business_token_goods_input01.py - 79] - 40:测试编号16，测试标题测试商品库存为小数，执行失败，实际结果为{'code': 9999, 'msg': '商品价格shopPrice值不存在'}
2022-03-07 15:06:05,525 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1009...: '商品库存格式不正确'} == {'code': 9999...hopPrice值不存在'}
  Differing items:
  {'code': 1009} != {'code': 9999}
  {'msg': '商品库存格式不正确'} != {'msg': '商品价格shopPrice值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品价格shopPrice值不存在'}
  + {'code': 1009, 'msg': '商品库存格式不正确'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1009...: '商品库存格式不正确'} == {'code': 9999...hopPrice值不存在'}
  Differing items:
  {'code': 1009} != {'code': 9999}
  {'msg': '商品库存格式不正确'} != {'msg': '商品价格shopPrice值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品价格shopPrice值不存在'}
  + {'code': 1009, 'msg': '商品库存格式不正确'}
2022-03-07 15:06:05,639 - [test_business_token_goods_input01.py - 79] - 40:测试编号17，测试标题测试商品库存为负数，执行失败，实际结果为{'code': 9999, 'msg': '商品价格shopPrice值不存在'}
2022-03-07 15:06:05,639 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1009...: '商品库存格式不正确'} == {'code': 9999...hopPrice值不存在'}
  Differing items:
  {'code': 1009} != {'code': 9999}
  {'msg': '商品库存格式不正确'} != {'msg': '商品价格shopPrice值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品价格shopPrice值不存在'}
  + {'code': 1009, 'msg': '商品库存格式不正确'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1009...: '商品库存格式不正确'} == {'code': 9999...hopPrice值不存在'}
  Differing items:
  {'code': 1009} != {'code': 9999}
  {'msg': '商品库存格式不正确'} != {'msg': '商品价格shopPrice值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品价格shopPrice值不存在'}
  + {'code': 1009, 'msg': '商品库存格式不正确'}
2022-03-07 15:06:05,759 - [test_business_token_goods_input01.py - 79] - 40:测试编号18，测试标题测试商品库存为字符，执行失败，实际结果为{'code': 9999, 'msg': '商品价格shopPrice值不存在'}
2022-03-07 15:06:05,759 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1009...: '商品库存格式不正确'} == {'code': 9999...hopPrice值不存在'}
  Differing items:
  {'code': 1009} != {'code': 9999}
  {'msg': '商品库存格式不正确'} != {'msg': '商品价格shopPrice值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品价格shopPrice值不存在'}
  + {'code': 1009, 'msg': '商品库存格式不正确'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1009...: '商品库存格式不正确'} == {'code': 9999...hopPrice值不存在'}
  Differing items:
  {'code': 1009} != {'code': 9999}
  {'msg': '商品库存格式不正确'} != {'msg': '商品价格shopPrice值不存在'}
  Full diff:
  - {'code': 9999, 'msg': '商品价格shopPrice值不存在'}
  + {'code': 1009, 'msg': '商品库存格式不正确'}
2022-03-07 15:08:26,818 - [test_business_token_goods_input01.py - 84] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-07 15:08:26,970 - [test_business_token_goods_input01.py - 84] - 20:测试编号2，测试标题测试商品信息录入—token为空，执行成功
2022-03-07 15:08:27,115 - [test_business_token_goods_input01.py - 84] - 20:测试编号3，测试标题测试商品信息录入——token区分大小写，执行成功
2022-03-07 15:08:27,252 - [test_business_token_goods_input01.py - 79] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 1000, 'msg': '商品录入成功'}
2022-03-07 15:08:27,252 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 1000...sg': '商品录入成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '商品录入成功'}
  {'code': 1011} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '商品录入成功'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 1000...sg': '商品录入成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '商品录入成功'}
  {'code': 1011} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '商品录入成功'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-07 15:08:27,369 - [test_business_token_goods_input01.py - 84] - 20:测试编号5，测试标题测试商品名为空的场景，执行成功
2022-03-07 15:08:27,490 - [test_business_token_goods_input01.py - 84] - 20:测试编号6，测试标题测试商品名有效边界的场景，执行成功
2022-03-07 15:08:27,640 - [test_business_token_goods_input01.py - 84] - 20:测试编号7，测试标题测试商品名无效边界的场景，执行成功
2022-03-07 15:08:27,798 - [test_business_token_goods_input01.py - 84] - 20:测试编号8，测试标题测试商品名已存在的场景，执行成功
2022-03-07 15:08:27,934 - [test_business_token_goods_input01.py - 84] - 20:测试编号9，测试标题测试商品分类id为空，执行成功
2022-03-07 15:08:28,069 - [test_business_token_goods_input01.py - 79] - 40:测试编号10，测试标题测试商品分类id不存在，执行失败，实际结果为{'code': 1000, 'msg': '商品录入成功'}
2022-03-07 15:08:28,069 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1012...g': '商品分类不存在'} == {'code': 1000...sg': '商品录入成功'}
  Differing items:
  {'msg': '商品分类不存在'} != {'msg': '商品录入成功'}
  {'code': 1012} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '商品录入成功'}
  ?            ^^            ^^^^
  + {'code': 1012, 'msg': '商品分类不存在'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1012...g': '商品分类不存在'} == {'code': 1000...sg': '商品录入成功'}
  Differing items:
  {'msg': '商品分类不存在'} != {'msg': '商品录入成功'}
  {'code': 1012} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '商品录入成功'}
  ?            ^^            ^^^^
  + {'code': 1012, 'msg': '商品分类不存在'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-07 15:08:28,269 - [test_business_token_goods_input01.py - 84] - 20:测试编号11，测试标题测试商品描述为空，执行成功
2022-03-07 15:08:28,406 - [test_business_token_goods_input01.py - 84] - 20:测试编号12，测试标题测试商品描述有效边界，执行成功
2022-03-07 15:08:28,522 - [test_business_token_goods_input01.py - 84] - 20:测试编号13，测试标题测试商品描述无效边界，执行成功
2022-03-07 15:08:28,643 - [test_business_token_goods_input01.py - 84] - 20:测试编号14，测试标题测试商品库存为空，执行成功
2022-03-07 15:08:28,763 - [test_business_token_goods_input01.py - 84] - 20:测试编号15，测试标题测试商品库存最大整数，执行成功
2022-03-07 15:08:28,878 - [test_business_token_goods_input01.py - 84] - 20:测试编号16，测试标题测试商品库存为小数，执行成功
2022-03-07 15:08:28,989 - [test_business_token_goods_input01.py - 84] - 20:测试编号17，测试标题测试商品库存为负数，执行成功
2022-03-07 15:08:29,106 - [test_business_token_goods_input01.py - 84] - 20:测试编号18，测试标题测试商品库存为字符，执行成功
2022-03-07 15:13:05,178 - [test_business_token_goods_input01.py - 84] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-07 15:13:05,285 - [test_business_token_goods_input01.py - 84] - 20:测试编号2，测试标题测试商品信息录入—token为空，执行成功
2022-03-07 15:13:05,404 - [test_business_token_goods_input01.py - 84] - 20:测试编号3，测试标题测试商品信息录入——token区分大小写，执行成功
2022-03-07 15:13:05,540 - [test_business_token_goods_input01.py - 79] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 1013, 'msg': '产品名称不能重复'}
2022-03-07 15:13:05,541 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'code': 1011} != {'code': 1013}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'code': 1011} != {'code': 1013}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-07 15:13:05,663 - [test_business_token_goods_input01.py - 84] - 20:测试编号5，测试标题测试商品名为空的场景，执行成功
2022-03-07 15:13:05,790 - [test_business_token_goods_input01.py - 84] - 20:测试编号6，测试标题测试商品名有效边界的场景，执行成功
2022-03-07 15:13:05,907 - [test_business_token_goods_input01.py - 84] - 20:测试编号7，测试标题测试商品名无效边界的场景，执行成功
2022-03-07 15:13:06,028 - [test_business_token_goods_input01.py - 79] - 40:测试编号8，测试标题测试商品名已存在的场景，执行失败，实际结果为{'code': 1006, 'msg': '商品名称格式不正确'}
2022-03-07 15:13:06,028 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1013...': '产品名称不能重复'} == {'code': 1006...: '商品名称格式不正确'}
  Differing items:
  {'code': 1013} != {'code': 1006}
  {'msg': '产品名称不能重复'} != {'msg': '商品名称格式不正确'}
  Full diff:
  - {'code': 1006, 'msg': '商品名称格式不正确'}
  ?            ^^          ^   -- ^^
  + {'code': 1013, 'msg': '产品名称不能重复'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1013...': '产品名称不能重复'} == {'code': 1006...: '商品名称格式不正确'}
  Differing items:
  {'code': 1013} != {'code': 1006}
  {'msg': '产品名称不能重复'} != {'msg': '商品名称格式不正确'}
  Full diff:
  - {'code': 1006, 'msg': '商品名称格式不正确'}
  ?            ^^          ^   -- ^^
  + {'code': 1013, 'msg': '产品名称不能重复'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-07 15:13:06,144 - [test_business_token_goods_input01.py - 84] - 20:测试编号9，测试标题测试商品分类id为空，执行成功
2022-03-07 15:13:06,294 - [test_business_token_goods_input01.py - 84] - 20:测试编号10，测试标题测试商品分类id不存在，执行成功
2022-03-07 15:13:06,437 - [test_business_token_goods_input01.py - 84] - 20:测试编号11，测试标题测试商品描述为空，执行成功
2022-03-07 15:13:06,559 - [test_business_token_goods_input01.py - 84] - 20:测试编号12，测试标题测试商品描述有效边界，执行成功
2022-03-07 15:13:06,704 - [test_business_token_goods_input01.py - 84] - 20:测试编号13，测试标题测试商品描述无效边界，执行成功
2022-03-07 15:13:06,876 - [test_business_token_goods_input01.py - 84] - 20:测试编号14，测试标题测试商品库存为空，执行成功
2022-03-07 15:13:07,005 - [test_business_token_goods_input01.py - 84] - 20:测试编号15，测试标题测试商品库存最大整数，执行成功
2022-03-07 15:13:07,123 - [test_business_token_goods_input01.py - 84] - 20:测试编号16，测试标题测试商品库存为小数，执行成功
2022-03-07 15:13:07,257 - [test_business_token_goods_input01.py - 84] - 20:测试编号17，测试标题测试商品库存为负数，执行成功
2022-03-07 15:13:07,369 - [test_business_token_goods_input01.py - 84] - 20:测试编号18，测试标题测试商品库存为字符，执行成功
2022-03-07 15:13:07,487 - [test_business_token_goods_input01.py - 84] - 20:测试编号19，测试标题测试商品价格为空，执行成功
2022-03-07 15:13:07,649 - [test_business_token_goods_input01.py - 84] - 20:测试编号20，测试标题测试商品价格有效数字：最大值边界，执行成功
2022-03-07 15:13:07,835 - [test_business_token_goods_input01.py - 84] - 20:测试编号21，测试标题测试商品价格非两位小数的数字，执行成功
2022-03-07 15:13:08,009 - [test_business_token_goods_input01.py - 84] - 20:测试编号22，测试标题测试商品价格超过最大值，执行成功
2022-03-07 15:13:08,161 - [test_business_token_goods_input01.py - 84] - 20:测试编号23，测试标题测试商品价格为整数，执行成功
2022-03-07 15:13:08,280 - [test_business_token_goods_input01.py - 84] - 20:测试编号24，测试标题测试商品价格为0，执行成功
2022-03-07 15:37:45,202 - [test_business_token_goods_input01.py - 84] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-07 15:37:45,311 - [test_business_token_goods_input01.py - 84] - 20:测试编号2，测试标题测试商品信息录入—token为空，执行成功
2022-03-07 15:37:45,429 - [test_business_token_goods_input01.py - 84] - 20:测试编号3，测试标题测试商品信息录入——token区分大小写，执行成功
2022-03-07 15:37:45,556 - [test_business_token_goods_input01.py - 79] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 1013, 'msg': '产品名称不能重复'}
2022-03-07 15:37:45,556 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  {'code': 1011} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  {'code': 1011} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-07 15:37:45,676 - [test_business_token_goods_input01.py - 84] - 20:测试编号5，测试标题测试商品名为空的场景，执行成功
2022-03-07 15:37:45,797 - [test_business_token_goods_input01.py - 84] - 20:测试编号6，测试标题测试商品名有效边界的场景，执行成功
2022-03-07 15:37:45,914 - [test_business_token_goods_input01.py - 84] - 20:测试编号7，测试标题测试商品名无效边界的场景，执行成功
2022-03-07 15:37:46,074 - [test_business_token_goods_input01.py - 79] - 40:测试编号8，测试标题测试商品名已存在的场景，执行失败，实际结果为{'code': 1000, 'msg': '商品录入成功'}
2022-03-07 15:37:46,074 - [test_business_token_goods_input01.py - 80] - 40:assert {'code': 1013...': '产品名称不能重复'} == {'code': 1000...sg': '商品录入成功'}
  Differing items:
  {'msg': '产品名称不能重复'} != {'msg': '商品录入成功'}
  {'code': 1013} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '商品录入成功'}
  ?            ^^          ^ ^^^^
  + {'code': 1013, 'msg': '产品名称不能重复'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 72, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1013...': '产品名称不能重复'} == {'code': 1000...sg': '商品录入成功'}
  Differing items:
  {'msg': '产品名称不能重复'} != {'msg': '商品录入成功'}
  {'code': 1013} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '商品录入成功'}
  ?            ^^          ^ ^^^^
  + {'code': 1013, 'msg': '产品名称不能重复'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-07 15:37:46,197 - [test_business_token_goods_input01.py - 84] - 20:测试编号9，测试标题测试商品分类id为空，执行成功
2022-03-07 15:37:46,329 - [test_business_token_goods_input01.py - 84] - 20:测试编号10，测试标题测试商品分类id不存在，执行成功
2022-03-07 15:37:46,455 - [test_business_token_goods_input01.py - 84] - 20:测试编号11，测试标题测试商品描述为空，执行成功
2022-03-07 15:37:46,582 - [test_business_token_goods_input01.py - 84] - 20:测试编号12，测试标题测试商品描述有效边界，执行成功
2022-03-07 15:37:46,704 - [test_business_token_goods_input01.py - 84] - 20:测试编号13，测试标题测试商品描述无效边界，执行成功
2022-03-07 15:37:46,852 - [test_business_token_goods_input01.py - 84] - 20:测试编号14，测试标题测试商品库存为空，执行成功
2022-03-07 15:37:47,014 - [test_business_token_goods_input01.py - 84] - 20:测试编号15，测试标题测试商品库存最大整数，执行成功
2022-03-07 15:37:47,150 - [test_business_token_goods_input01.py - 84] - 20:测试编号16，测试标题测试商品库存为小数，执行成功
2022-03-07 15:37:47,261 - [test_business_token_goods_input01.py - 84] - 20:测试编号17，测试标题测试商品库存为负数，执行成功
2022-03-07 15:37:47,432 - [test_business_token_goods_input01.py - 84] - 20:测试编号18，测试标题测试商品库存为字符，执行成功
2022-03-07 15:37:47,608 - [test_business_token_goods_input01.py - 84] - 20:测试编号19，测试标题测试商品价格为空，执行成功
2022-03-07 15:37:47,732 - [test_business_token_goods_input01.py - 84] - 20:测试编号20，测试标题测试商品价格有效数字：最大值边界，执行成功
2022-03-07 15:37:47,847 - [test_business_token_goods_input01.py - 84] - 20:测试编号21，测试标题测试商品价格非两位小数的数字，执行成功
2022-03-07 15:37:47,962 - [test_business_token_goods_input01.py - 84] - 20:测试编号22，测试标题测试商品价格超过最大值，执行成功
2022-03-07 15:37:48,117 - [test_business_token_goods_input01.py - 84] - 20:测试编号23，测试标题测试商品价格为整数，执行成功
2022-03-07 15:37:48,235 - [test_business_token_goods_input01.py - 84] - 20:测试编号24，测试标题测试商品价格为0，执行成功
2022-03-07 16:00:06,489 - [test_business_token_goods_input01.py - 90] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-07 16:00:06,595 - [test_business_token_goods_input01.py - 90] - 20:测试编号2，测试标题测试商品信息录入—token为空，执行成功
2022-03-07 16:00:06,712 - [test_business_token_goods_input01.py - 90] - 20:测试编号3，测试标题测试商品信息录入——token区分大小写，执行成功
2022-03-07 16:00:06,845 - [test_business_token_goods_input01.py - 85] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 1013, 'msg': '产品名称不能重复'}
2022-03-07 16:00:06,845 - [test_business_token_goods_input01.py - 86] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  {'code': 1011} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 78, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  {'code': 1011} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-07 16:00:06,959 - [test_business_token_goods_input01.py - 90] - 20:测试编号5，测试标题测试商品名为空的场景，执行成功
2022-03-07 16:00:07,102 - [test_business_token_goods_input01.py - 90] - 20:测试编号6，测试标题测试商品名有效边界的场景，执行成功
2022-03-07 16:00:07,225 - [test_business_token_goods_input01.py - 90] - 20:测试编号7，测试标题测试商品名无效边界的场景，执行成功
2022-03-07 16:00:07,341 - [test_business_token_goods_input01.py - 90] - 20:测试编号8，测试标题测试商品名已存在的场景，执行成功
2022-03-07 16:00:07,454 - [test_business_token_goods_input01.py - 90] - 20:测试编号9，测试标题测试商品分类id为空，执行成功
2022-03-07 16:00:07,662 - [test_business_token_goods_input01.py - 90] - 20:测试编号10，测试标题测试商品分类id不存在，执行成功
2022-03-07 16:00:07,847 - [test_business_token_goods_input01.py - 90] - 20:测试编号11，测试标题测试商品描述为空，执行成功
2022-03-07 16:00:07,987 - [test_business_token_goods_input01.py - 90] - 20:测试编号12，测试标题测试商品描述有效边界，执行成功
2022-03-07 16:00:08,102 - [test_business_token_goods_input01.py - 90] - 20:测试编号13，测试标题测试商品描述无效边界，执行成功
2022-03-07 16:00:08,213 - [test_business_token_goods_input01.py - 90] - 20:测试编号14，测试标题测试商品库存为空，执行成功
2022-03-07 16:00:08,343 - [test_business_token_goods_input01.py - 90] - 20:测试编号15，测试标题测试商品库存最大整数，执行成功
2022-03-07 16:00:08,459 - [test_business_token_goods_input01.py - 90] - 20:测试编号16，测试标题测试商品库存为小数，执行成功
2022-03-07 16:00:08,578 - [test_business_token_goods_input01.py - 90] - 20:测试编号17，测试标题测试商品库存为负数，执行成功
2022-03-07 16:00:08,691 - [test_business_token_goods_input01.py - 90] - 20:测试编号18，测试标题测试商品库存为字符，执行成功
2022-03-07 16:00:08,846 - [test_business_token_goods_input01.py - 90] - 20:测试编号19，测试标题测试商品价格为空，执行成功
2022-03-07 16:00:08,974 - [test_business_token_goods_input01.py - 90] - 20:测试编号20，测试标题测试商品价格有效数字：最大值边界，执行成功
2022-03-07 16:00:09,087 - [test_business_token_goods_input01.py - 90] - 20:测试编号21，测试标题测试商品价格非两位小数的数字，执行成功
2022-03-07 16:00:09,198 - [test_business_token_goods_input01.py - 90] - 20:测试编号22，测试标题测试商品价格超过最大值，执行成功
2022-03-07 16:00:09,334 - [test_business_token_goods_input01.py - 90] - 20:测试编号23，测试标题测试商品价格为整数，执行成功
2022-03-07 16:00:09,452 - [test_business_token_goods_input01.py - 90] - 20:测试编号24，测试标题测试商品价格为0，执行成功
2022-03-07 16:00:53,980 - [test_business_token_goods_input01.py - 90] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-07 16:00:54,126 - [test_business_token_goods_input01.py - 90] - 20:测试编号2，测试标题测试商品信息录入—token为空，执行成功
2022-03-07 16:00:54,394 - [test_business_token_goods_input01.py - 90] - 20:测试编号3，测试标题测试商品信息录入——token区分大小写，执行成功
2022-03-07 16:00:54,570 - [test_business_token_goods_input01.py - 85] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 1013, 'msg': '产品名称不能重复'}
2022-03-07 16:00:54,570 - [test_business_token_goods_input01.py - 86] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  {'code': 1011} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 78, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  {'code': 1011} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-07 16:00:54,691 - [test_business_token_goods_input01.py - 90] - 20:测试编号5，测试标题测试商品名为空的场景，执行成功
2022-03-07 16:00:54,815 - [test_business_token_goods_input01.py - 90] - 20:测试编号6，测试标题测试商品名有效边界的场景，执行成功
2022-03-07 16:00:54,930 - [test_business_token_goods_input01.py - 90] - 20:测试编号7，测试标题测试商品名无效边界的场景，执行成功
2022-03-07 16:00:55,047 - [test_business_token_goods_input01.py - 90] - 20:测试编号8，测试标题测试商品名已存在的场景，执行成功
2022-03-07 16:00:55,161 - [test_business_token_goods_input01.py - 90] - 20:测试编号9，测试标题测试商品分类id为空，执行成功
2022-03-07 16:00:55,347 - [test_business_token_goods_input01.py - 90] - 20:测试编号10，测试标题测试商品分类id不存在，执行成功
2022-03-07 16:00:55,569 - [test_business_token_goods_input01.py - 90] - 20:测试编号11，测试标题测试商品描述为空，执行成功
2022-03-07 16:00:55,780 - [test_business_token_goods_input01.py - 90] - 20:测试编号12，测试标题测试商品描述有效边界，执行成功
2022-03-07 16:00:55,918 - [test_business_token_goods_input01.py - 90] - 20:测试编号13，测试标题测试商品描述无效边界，执行成功
2022-03-07 16:00:56,033 - [test_business_token_goods_input01.py - 90] - 20:测试编号14，测试标题测试商品库存为空，执行成功
2022-03-07 16:00:56,166 - [test_business_token_goods_input01.py - 90] - 20:测试编号15，测试标题测试商品库存最大整数，执行成功
2022-03-07 16:00:56,308 - [test_business_token_goods_input01.py - 90] - 20:测试编号16，测试标题测试商品库存为小数，执行成功
2022-03-07 16:00:56,429 - [test_business_token_goods_input01.py - 90] - 20:测试编号17，测试标题测试商品库存为负数，执行成功
2022-03-07 16:00:56,594 - [test_business_token_goods_input01.py - 90] - 20:测试编号18，测试标题测试商品库存为字符，执行成功
2022-03-07 16:00:56,740 - [test_business_token_goods_input01.py - 90] - 20:测试编号19，测试标题测试商品价格为空，执行成功
2022-03-07 16:00:56,946 - [test_business_token_goods_input01.py - 90] - 20:测试编号20，测试标题测试商品价格有效数字：最大值边界，执行成功
2022-03-07 16:00:57,090 - [test_business_token_goods_input01.py - 90] - 20:测试编号21，测试标题测试商品价格非两位小数的数字，执行成功
2022-03-07 16:00:57,205 - [test_business_token_goods_input01.py - 90] - 20:测试编号22，测试标题测试商品价格超过最大值，执行成功
2022-03-07 16:00:57,325 - [test_business_token_goods_input01.py - 90] - 20:测试编号23，测试标题测试商品价格为整数，执行成功
2022-03-07 16:00:57,456 - [test_business_token_goods_input01.py - 90] - 20:测试编号24，测试标题测试商品价格为0，执行成功
2022-03-07 16:02:01,850 - [test_business_token_goods_input01.py - 90] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-07 16:02:01,978 - [test_business_token_goods_input01.py - 90] - 20:测试编号2，测试标题测试商品信息录入—token为空，执行成功
2022-03-07 16:02:02,103 - [test_business_token_goods_input01.py - 90] - 20:测试编号3，测试标题测试商品信息录入——token区分大小写，执行成功
2022-03-07 16:02:02,238 - [test_business_token_goods_input01.py - 85] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 1000, 'msg': '商品录入成功'}
2022-03-07 16:02:02,238 - [test_business_token_goods_input01.py - 86] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 1000...sg': '商品录入成功'}
  Differing items:
  {'code': 1011} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '商品录入成功'}
  Full diff:
  - {'code': 1000, 'msg': '商品录入成功'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 78, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 1000...sg': '商品录入成功'}
  Differing items:
  {'code': 1011} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '商品录入成功'}
  Full diff:
  - {'code': 1000, 'msg': '商品录入成功'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-07 16:02:02,359 - [test_business_token_goods_input01.py - 90] - 20:测试编号5，测试标题测试商品名为空的场景，执行成功
2022-03-07 16:02:02,483 - [test_business_token_goods_input01.py - 90] - 20:测试编号6，测试标题测试商品名有效边界的场景，执行成功
2022-03-07 16:02:02,595 - [test_business_token_goods_input01.py - 90] - 20:测试编号7，测试标题测试商品名无效边界的场景，执行成功
2022-03-07 16:02:02,717 - [test_business_token_goods_input01.py - 85] - 40:测试编号8，测试标题测试商品名已存在的场景，执行失败，实际结果为{'code': 1000, 'msg': '商品录入成功'}
2022-03-07 16:02:02,718 - [test_business_token_goods_input01.py - 86] - 40:assert {'code': 1013...': '产品名称不能重复'} == {'code': 1000...sg': '商品录入成功'}
  Differing items:
  {'code': 1013} != {'code': 1000}
  {'msg': '产品名称不能重复'} != {'msg': '商品录入成功'}
  Full diff:
  - {'code': 1000, 'msg': '商品录入成功'}
  ?            ^^          ^ ^^^^
  + {'code': 1013, 'msg': '产品名称不能重复'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 78, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1013...': '产品名称不能重复'} == {'code': 1000...sg': '商品录入成功'}
  Differing items:
  {'code': 1013} != {'code': 1000}
  {'msg': '产品名称不能重复'} != {'msg': '商品录入成功'}
  Full diff:
  - {'code': 1000, 'msg': '商品录入成功'}
  ?            ^^          ^ ^^^^
  + {'code': 1013, 'msg': '产品名称不能重复'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-07 16:02:02,832 - [test_business_token_goods_input01.py - 90] - 20:测试编号9，测试标题测试商品分类id为空，执行成功
2022-03-07 16:02:02,969 - [test_business_token_goods_input01.py - 90] - 20:测试编号10，测试标题测试商品分类id不存在，执行成功
2022-03-07 16:02:03,138 - [test_business_token_goods_input01.py - 90] - 20:测试编号11，测试标题测试商品描述为空，执行成功
2022-03-07 16:02:03,280 - [test_business_token_goods_input01.py - 90] - 20:测试编号12，测试标题测试商品描述有效边界，执行成功
2022-03-07 16:02:03,396 - [test_business_token_goods_input01.py - 90] - 20:测试编号13，测试标题测试商品描述无效边界，执行成功
2022-03-07 16:02:03,544 - [test_business_token_goods_input01.py - 90] - 20:测试编号14，测试标题测试商品库存为空，执行成功
2022-03-07 16:02:03,668 - [test_business_token_goods_input01.py - 90] - 20:测试编号15，测试标题测试商品库存最大整数，执行成功
2022-03-07 16:02:03,786 - [test_business_token_goods_input01.py - 90] - 20:测试编号16，测试标题测试商品库存为小数，执行成功
2022-03-07 16:02:03,897 - [test_business_token_goods_input01.py - 90] - 20:测试编号17，测试标题测试商品库存为负数，执行成功
2022-03-07 16:02:04,014 - [test_business_token_goods_input01.py - 90] - 20:测试编号18，测试标题测试商品库存为字符，执行成功
2022-03-07 16:02:04,145 - [test_business_token_goods_input01.py - 90] - 20:测试编号19，测试标题测试商品价格为空，执行成功
2022-03-07 16:02:04,278 - [test_business_token_goods_input01.py - 90] - 20:测试编号20，测试标题测试商品价格有效数字：最大值边界，执行成功
2022-03-07 16:02:04,389 - [test_business_token_goods_input01.py - 90] - 20:测试编号21，测试标题测试商品价格非两位小数的数字，执行成功
2022-03-07 16:02:04,506 - [test_business_token_goods_input01.py - 90] - 20:测试编号22，测试标题测试商品价格超过最大值，执行成功
2022-03-07 16:02:04,619 - [test_business_token_goods_input01.py - 90] - 20:测试编号23，测试标题测试商品价格为整数，执行成功
2022-03-07 16:02:04,808 - [test_business_token_goods_input01.py - 90] - 20:测试编号24，测试标题测试商品价格为0，执行成功
2022-03-07 16:03:45,797 - [test_business_token_goods_input01.py - 82] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-07 16:03:45,902 - [test_business_token_goods_input01.py - 82] - 20:测试编号2，测试标题测试商品信息录入—token为空，执行成功
2022-03-07 16:03:46,019 - [test_business_token_goods_input01.py - 82] - 20:测试编号3，测试标题测试商品信息录入——token区分大小写，执行成功
2022-03-07 16:03:46,175 - [test_business_token_goods_input01.py - 77] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 1013, 'msg': '产品名称不能重复'}
2022-03-07 16:03:46,175 - [test_business_token_goods_input01.py - 78] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  {'code': 1011} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 70, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  {'code': 1011} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-07 16:03:46,292 - [test_business_token_goods_input01.py - 82] - 20:测试编号5，测试标题测试商品名为空的场景，执行成功
2022-03-07 16:03:46,411 - [test_business_token_goods_input01.py - 82] - 20:测试编号6，测试标题测试商品名有效边界的场景，执行成功
2022-03-07 16:03:46,531 - [test_business_token_goods_input01.py - 82] - 20:测试编号7，测试标题测试商品名无效边界的场景，执行成功
2022-03-07 16:03:46,646 - [test_business_token_goods_input01.py - 82] - 20:测试编号8，测试标题测试商品名已存在的场景，执行成功
2022-03-07 16:03:46,762 - [test_business_token_goods_input01.py - 82] - 20:测试编号9，测试标题测试商品分类id为空，执行成功
2022-03-07 16:03:46,888 - [test_business_token_goods_input01.py - 82] - 20:测试编号10，测试标题测试商品分类id不存在，执行成功
2022-03-07 16:03:47,009 - [test_business_token_goods_input01.py - 82] - 20:测试编号11，测试标题测试商品描述为空，执行成功
2022-03-07 16:03:47,129 - [test_business_token_goods_input01.py - 82] - 20:测试编号12，测试标题测试商品描述有效边界，执行成功
2022-03-07 16:03:47,244 - [test_business_token_goods_input01.py - 82] - 20:测试编号13，测试标题测试商品描述无效边界，执行成功
2022-03-07 16:03:47,354 - [test_business_token_goods_input01.py - 82] - 20:测试编号14，测试标题测试商品库存为空，执行成功
2022-03-07 16:03:47,480 - [test_business_token_goods_input01.py - 82] - 20:测试编号15，测试标题测试商品库存最大整数，执行成功
2022-03-07 16:03:47,590 - [test_business_token_goods_input01.py - 82] - 20:测试编号16，测试标题测试商品库存为小数，执行成功
2022-03-07 16:03:47,707 - [test_business_token_goods_input01.py - 82] - 20:测试编号17，测试标题测试商品库存为负数，执行成功
2022-03-07 16:03:47,825 - [test_business_token_goods_input01.py - 82] - 20:测试编号18，测试标题测试商品库存为字符，执行成功
2022-03-07 16:03:47,942 - [test_business_token_goods_input01.py - 82] - 20:测试编号19，测试标题测试商品价格为空，执行成功
2022-03-07 16:03:48,063 - [test_business_token_goods_input01.py - 82] - 20:测试编号20，测试标题测试商品价格有效数字：最大值边界，执行成功
2022-03-07 16:03:48,180 - [test_business_token_goods_input01.py - 82] - 20:测试编号21，测试标题测试商品价格非两位小数的数字，执行成功
2022-03-07 16:03:48,290 - [test_business_token_goods_input01.py - 82] - 20:测试编号22，测试标题测试商品价格超过最大值，执行成功
2022-03-07 16:03:48,405 - [test_business_token_goods_input01.py - 82] - 20:测试编号23，测试标题测试商品价格为整数，执行成功
2022-03-07 16:03:48,588 - [test_business_token_goods_input01.py - 82] - 20:测试编号24，测试标题测试商品价格为0，执行成功
2022-03-07 16:03:53,063 - [test_business_token_goods_input01.py - 82] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-07 16:03:53,174 - [test_business_token_goods_input01.py - 82] - 20:测试编号2，测试标题测试商品信息录入—token为空，执行成功
2022-03-07 16:03:53,291 - [test_business_token_goods_input01.py - 82] - 20:测试编号3，测试标题测试商品信息录入——token区分大小写，执行成功
2022-03-07 16:03:53,458 - [test_business_token_goods_input01.py - 77] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 1013, 'msg': '产品名称不能重复'}
2022-03-07 16:03:53,459 - [test_business_token_goods_input01.py - 78] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'code': 1011} != {'code': 1013}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 70, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'code': 1011} != {'code': 1013}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-07 16:03:53,612 - [test_business_token_goods_input01.py - 82] - 20:测试编号5，测试标题测试商品名为空的场景，执行成功
2022-03-07 16:03:53,735 - [test_business_token_goods_input01.py - 82] - 20:测试编号6，测试标题测试商品名有效边界的场景，执行成功
2022-03-07 16:03:53,845 - [test_business_token_goods_input01.py - 82] - 20:测试编号7，测试标题测试商品名无效边界的场景，执行成功
2022-03-07 16:03:53,962 - [test_business_token_goods_input01.py - 82] - 20:测试编号8，测试标题测试商品名已存在的场景，执行成功
2022-03-07 16:03:54,072 - [test_business_token_goods_input01.py - 82] - 20:测试编号9，测试标题测试商品分类id为空，执行成功
2022-03-07 16:03:54,205 - [test_business_token_goods_input01.py - 82] - 20:测试编号10，测试标题测试商品分类id不存在，执行成功
2022-03-07 16:03:54,333 - [test_business_token_goods_input01.py - 82] - 20:测试编号11，测试标题测试商品描述为空，执行成功
2022-03-07 16:03:54,473 - [test_business_token_goods_input01.py - 82] - 20:测试编号12，测试标题测试商品描述有效边界，执行成功
2022-03-07 16:03:54,588 - [test_business_token_goods_input01.py - 82] - 20:测试编号13，测试标题测试商品描述无效边界，执行成功
2022-03-07 16:03:54,702 - [test_business_token_goods_input01.py - 82] - 20:测试编号14，测试标题测试商品库存为空，执行成功
2022-03-07 16:03:54,868 - [test_business_token_goods_input01.py - 82] - 20:测试编号15，测试标题测试商品库存最大整数，执行成功
2022-03-07 16:03:55,032 - [test_business_token_goods_input01.py - 82] - 20:测试编号16，测试标题测试商品库存为小数，执行成功
2022-03-07 16:03:55,146 - [test_business_token_goods_input01.py - 82] - 20:测试编号17，测试标题测试商品库存为负数，执行成功
2022-03-07 16:03:55,258 - [test_business_token_goods_input01.py - 82] - 20:测试编号18，测试标题测试商品库存为字符，执行成功
2022-03-07 16:03:55,372 - [test_business_token_goods_input01.py - 82] - 20:测试编号19，测试标题测试商品价格为空，执行成功
2022-03-07 16:03:55,504 - [test_business_token_goods_input01.py - 82] - 20:测试编号20，测试标题测试商品价格有效数字：最大值边界，执行成功
2022-03-07 16:03:55,622 - [test_business_token_goods_input01.py - 82] - 20:测试编号21，测试标题测试商品价格非两位小数的数字，执行成功
2022-03-07 16:03:55,734 - [test_business_token_goods_input01.py - 82] - 20:测试编号22，测试标题测试商品价格超过最大值，执行成功
2022-03-07 16:03:55,852 - [test_business_token_goods_input01.py - 82] - 20:测试编号23，测试标题测试商品价格为整数，执行成功
2022-03-07 16:03:55,979 - [test_business_token_goods_input01.py - 82] - 20:测试编号24，测试标题测试商品价格为0，执行成功
2022-03-07 16:04:44,429 - [test_business_token_goods_input01.py - 80] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-07 16:04:44,565 - [test_business_token_goods_input01.py - 80] - 20:测试编号2，测试标题测试商品信息录入—token为空，执行成功
2022-03-07 16:04:44,685 - [test_business_token_goods_input01.py - 80] - 20:测试编号3，测试标题测试商品信息录入——token区分大小写，执行成功
2022-03-07 16:04:44,816 - [test_business_token_goods_input01.py - 75] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 1013, 'msg': '产品名称不能重复'}
2022-03-07 16:04:44,817 - [test_business_token_goods_input01.py - 76] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  {'code': 1011} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 68, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  {'code': 1011} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-07 16:04:44,936 - [test_business_token_goods_input01.py - 80] - 20:测试编号5，测试标题测试商品名为空的场景，执行成功
2022-03-07 16:04:45,091 - [test_business_token_goods_input01.py - 80] - 20:测试编号6，测试标题测试商品名有效边界的场景，执行成功
2022-03-07 16:04:45,238 - [test_business_token_goods_input01.py - 80] - 20:测试编号7，测试标题测试商品名无效边界的场景，执行成功
2022-03-07 16:04:45,364 - [test_business_token_goods_input01.py - 80] - 20:测试编号8，测试标题测试商品名已存在的场景，执行成功
2022-03-07 16:04:45,484 - [test_business_token_goods_input01.py - 80] - 20:测试编号9，测试标题测试商品分类id为空，执行成功
2022-03-07 16:04:45,598 - [test_business_token_goods_input01.py - 80] - 20:测试编号10，测试标题测试商品分类id不存在，执行成功
2022-03-07 16:04:45,748 - [test_business_token_goods_input01.py - 80] - 20:测试编号11，测试标题测试商品描述为空，执行成功
2022-03-07 16:04:45,911 - [test_business_token_goods_input01.py - 80] - 20:测试编号12，测试标题测试商品描述有效边界，执行成功
2022-03-07 16:04:46,090 - [test_business_token_goods_input01.py - 80] - 20:测试编号13，测试标题测试商品描述无效边界，执行成功
2022-03-07 16:04:46,431 - [test_business_token_goods_input01.py - 80] - 20:测试编号14，测试标题测试商品库存为空，执行成功
2022-03-07 16:04:46,589 - [test_business_token_goods_input01.py - 80] - 20:测试编号15，测试标题测试商品库存最大整数，执行成功
2022-03-07 16:04:46,717 - [test_business_token_goods_input01.py - 80] - 20:测试编号16，测试标题测试商品库存为小数，执行成功
2022-03-07 16:04:46,833 - [test_business_token_goods_input01.py - 80] - 20:测试编号17，测试标题测试商品库存为负数，执行成功
2022-03-07 16:04:46,947 - [test_business_token_goods_input01.py - 80] - 20:测试编号18，测试标题测试商品库存为字符，执行成功
2022-03-07 16:04:47,066 - [test_business_token_goods_input01.py - 80] - 20:测试编号19，测试标题测试商品价格为空，执行成功
2022-03-07 16:04:47,190 - [test_business_token_goods_input01.py - 80] - 20:测试编号20，测试标题测试商品价格有效数字：最大值边界，执行成功
2022-03-07 16:04:47,310 - [test_business_token_goods_input01.py - 80] - 20:测试编号21，测试标题测试商品价格非两位小数的数字，执行成功
2022-03-07 16:04:47,425 - [test_business_token_goods_input01.py - 80] - 20:测试编号22，测试标题测试商品价格超过最大值，执行成功
2022-03-07 16:04:47,601 - [test_business_token_goods_input01.py - 80] - 20:测试编号23，测试标题测试商品价格为整数，执行成功
2022-03-07 16:04:47,761 - [test_business_token_goods_input01.py - 80] - 20:测试编号24，测试标题测试商品价格为0，执行成功
2022-03-07 19:06:46,947 - [test_business_token_goods_promote01.py - 47] - 40:测试编号1,测试标题正常流程,执行失败，实际结果为{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-07 19:06:46,947 - [test_business_token_goods_promote01.py - 48] - 40:assert {'code': 1000...': '促销开启设置成功'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '促销开启设置成功'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1000} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1000, 'msg': '促销开启设置成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 41, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...': '促销开启设置成功'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '促销开启设置成功'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1000} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1000, 'msg': '促销开启设置成功'}
2022-03-07 19:08:00,841 - [test_business_token_goods_promote01.py - 47] - 40:测试编号1,测试标题正常流程,执行失败，实际结果为{'code': 1000, 'msg': '促销开启设置成功'}
2022-03-07 19:08:00,841 - [test_business_token_goods_promote01.py - 48] - 40:assert 0 == 1
  +0
  -1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 44, in test_goods_promote
    assert count == 1
AssertionError: assert 0 == 1
  +0
  -1
2022-03-07 19:08:22,925 - [test_business_token_goods_promote01.py - 45] - 40:测试编号1,测试标题正常流程,执行失败，实际结果为{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-07 19:08:22,925 - [test_business_token_goods_promote01.py - 46] - 40:assert {'code': 1000...': '促销开启设置成功'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'code': 1000} != {'code': 1012}
  {'msg': '促销开启设置成功'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1000, 'msg': '促销开启设置成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 41, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...': '促销开启设置成功'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'code': 1000} != {'code': 1012}
  {'msg': '促销开启设置成功'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1000, 'msg': '促销开启设置成功'}
2022-03-07 19:08:55,073 - [test_business_token_goods_promote01.py - 50] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-07 19:11:06,284 - [test_business_token_goods_promote01.py - 45] - 40:测试编号1,测试标题正常流程,执行失败，实际结果为{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-07 19:11:06,284 - [test_business_token_goods_promote01.py - 46] - 40:assert {'code': 1000...': '促销开启设置成功'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '促销开启设置成功'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1000} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1000, 'msg': '促销开启设置成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 41, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...': '促销开启设置成功'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '促销开启设置成功'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1000} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1000, 'msg': '促销开启设置成功'}
2022-03-07 19:12:08,030 - [test_business_token_goods_promote01.py - 45] - 40:测试编号1,测试标题正常流程,执行失败，实际结果为{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-07 19:12:08,030 - [test_business_token_goods_promote01.py - 46] - 40:assert {'code': 1000...': '促销开启设置成功'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '促销开启设置成功'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1000} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1000, 'msg': '促销开启设置成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 41, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...': '促销开启设置成功'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '促销开启设置成功'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1000} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1000, 'msg': '促销开启设置成功'}
2022-03-07 19:14:28,715 - [test_business_token_goods_promote01.py - 50] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-07 19:16:35,644 - [test_business_token_goods_promote01.py - 50] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-07 19:18:05,275 - [test_business_token_goods_promote01.py - 50] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-07 19:18:09,922 - [test_business_token_goods_promote01.py - 50] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 09:29:59,893 - [test_business_token_goods_input01.py - 79] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-08 09:30:00,049 - [test_business_token_goods_input01.py - 79] - 20:测试编号2，测试标题测试商品信息录入—token为空，执行成功
2022-03-08 09:30:00,174 - [test_business_token_goods_input01.py - 79] - 20:测试编号3，测试标题测试商品信息录入——token区分大小写，执行成功
2022-03-08 09:30:00,330 - [test_business_token_goods_input01.py - 74] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 1013, 'msg': '产品名称不能重复'}
2022-03-08 09:30:00,330 - [test_business_token_goods_input01.py - 75] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  {'code': 1011} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 67, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  {'code': 1011} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-08 09:30:00,455 - [test_business_token_goods_input01.py - 79] - 20:测试编号5，测试标题测试商品名为空的场景，执行成功
2022-03-08 09:30:00,596 - [test_business_token_goods_input01.py - 79] - 20:测试编号6，测试标题测试商品名有效边界的场景，执行成功
2022-03-08 09:30:00,737 - [test_business_token_goods_input01.py - 79] - 20:测试编号7，测试标题测试商品名无效边界的场景，执行成功
2022-03-08 09:30:00,877 - [test_business_token_goods_input01.py - 79] - 20:测试编号8，测试标题测试商品名已存在的场景，执行成功
2022-03-08 09:30:01,018 - [test_business_token_goods_input01.py - 79] - 20:测试编号9，测试标题测试商品分类id为空，执行成功
2022-03-08 09:30:01,143 - [test_business_token_goods_input01.py - 79] - 20:测试编号10，测试标题测试商品分类id不存在，执行成功
2022-03-08 09:30:01,315 - [test_business_token_goods_input01.py - 79] - 20:测试编号11，测试标题测试商品描述为空，执行成功
2022-03-08 09:30:01,486 - [test_business_token_goods_input01.py - 79] - 20:测试编号12，测试标题测试商品描述有效边界，执行成功
2022-03-08 09:30:01,627 - [test_business_token_goods_input01.py - 79] - 20:测试编号13，测试标题测试商品描述无效边界，执行成功
2022-03-08 09:30:01,752 - [test_business_token_goods_input01.py - 79] - 20:测试编号14，测试标题测试商品库存为空，执行成功
2022-03-08 09:30:01,877 - [test_business_token_goods_input01.py - 79] - 20:测试编号15，测试标题测试商品库存最大整数，执行成功
2022-03-08 09:30:02,017 - [test_business_token_goods_input01.py - 79] - 20:测试编号16，测试标题测试商品库存为小数，执行成功
2022-03-08 09:30:02,142 - [test_business_token_goods_input01.py - 79] - 20:测试编号17，测试标题测试商品库存为负数，执行成功
2022-03-08 09:30:02,283 - [test_business_token_goods_input01.py - 79] - 20:测试编号18，测试标题测试商品库存为字符，执行成功
2022-03-08 09:30:02,408 - [test_business_token_goods_input01.py - 79] - 20:测试编号19，测试标题测试商品价格为空，执行成功
2022-03-08 09:30:02,595 - [test_business_token_goods_input01.py - 79] - 20:测试编号20，测试标题测试商品价格有效数字：最大值边界，执行成功
2022-03-08 09:30:02,752 - [test_business_token_goods_input01.py - 79] - 20:测试编号21，测试标题测试商品价格非两位小数的数字，执行成功
2022-03-08 09:30:02,892 - [test_business_token_goods_input01.py - 79] - 20:测试编号22，测试标题测试商品价格超过最大值，执行成功
2022-03-08 09:30:03,017 - [test_business_token_goods_input01.py - 79] - 20:测试编号23，测试标题测试商品价格为整数，执行成功
2022-03-08 09:30:03,189 - [test_business_token_goods_input01.py - 79] - 20:测试编号24，测试标题测试商品价格为0，执行成功
2022-03-08 09:31:43,817 - [test_business_token_order_items01.py - 79] - 20:测试编号1，测试标题订单信息查询主流程，测试成功
2022-03-08 09:31:43,927 - [test_business_token_order_items01.py - 79] - 20:测试编号2，测试标题订单信息查询—token为空，测试成功
2022-03-08 09:31:44,067 - [test_business_token_order_items01.py - 79] - 20:测试编号3，测试标题订单信息查询—token区分大小写，测试成功
2022-03-08 09:31:44,208 - [test_business_token_order_items01.py - 74] - 40:测试编号4，测试标题订单信息查询——上一次token值，测试失败，实际结果{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15888888888', 'status': '未支付', 'value': 0.0, 'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}]}
2022-03-08 09:31:44,208 - [test_business_token_order_items01.py - 75] - 40:assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1004} != {'code': 1000}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_order_items05\test_business_token_order_items01.py", line 71, in test_order_items
    assert eval(case.expect) == res
AssertionError: assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1004} != {'code': 1000}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
2022-03-08 09:31:44,348 - [test_business_token_order_items01.py - 79] - 20:测试编号5，测试标题订单信息查询订单编号为空，测试成功
2022-03-08 09:31:44,473 - [test_business_token_order_items01.py - 79] - 20:测试编号6，测试标题订单信息查询订单编号错误，测试成功
2022-03-08 09:31:44,671 - [test_business_token_order_items01.py - 79] - 20:测试编号7，测试标题订单信息查询订单编号不存在，测试成功
2022-03-08 09:32:41,033 - [test_business_token_order_items01.py - 79] - 20:测试编号1，测试标题订单信息查询主流程，测试成功
2022-03-08 09:32:41,174 - [test_business_token_order_items01.py - 79] - 20:测试编号2，测试标题订单信息查询—token为空，测试成功
2022-03-08 09:32:41,299 - [test_business_token_order_items01.py - 79] - 20:测试编号3，测试标题订单信息查询—token区分大小写，测试成功
2022-03-08 09:32:41,455 - [test_business_token_order_items01.py - 74] - 40:测试编号4，测试标题订单信息查询——上一次token值，测试失败，实际结果{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15888888888', 'status': '未支付', 'value': 0.0, 'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}]}
2022-03-08 09:32:41,455 - [test_business_token_order_items01.py - 75] - 40:assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1004} != {'code': 1000}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_order_items05\test_business_token_order_items01.py", line 71, in test_order_items
    assert eval(case.expect) == res
AssertionError: assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1004} != {'code': 1000}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
2022-03-08 09:32:41,580 - [test_business_token_order_items01.py - 79] - 20:测试编号5，测试标题订单信息查询订单编号为空，测试成功
2022-03-08 09:32:41,705 - [test_business_token_order_items01.py - 79] - 20:测试编号6，测试标题订单信息查询订单编号错误，测试成功
2022-03-08 09:32:41,831 - [test_business_token_order_items01.py - 79] - 20:测试编号7，测试标题订单信息查询订单编号不存在，测试成功
2022-03-08 14:59:03,682 - [test_business_token_goods_delete01.py - 36] - 20:测试编号1,测试标题正常流程，执行成功
2022-03-08 15:07:17,701 - [test_business_token_goods_delete01.py - 46] - 20:测试编号1,测试标题正常流程，执行成功
2022-03-08 15:16:08,747 - [Ftest_business_token_goods_promote01.py - 50] - 40:测试编号1,测试标题正常流程,执行失败，实际结果为{'code': 1000, 'msg': '促销开启设置成功'}
2022-03-08 15:16:08,748 - [Ftest_business_token_goods_promote01.py - 51] - 40:assert 0 == 1
  +0
  -1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\Ftest_business_token_goods_promote01.py", line 46, in test_goods_promote
    assert count == 1
AssertionError: assert 0 == 1
  +0
  -1
2022-03-08 15:16:54,562 - [Ftest_business_token_goods_promote01.py - 50] - 40:测试编号1,测试标题正常流程,执行失败，实际结果为{'code': 1000, 'msg': '促销开启设置成功'}
2022-03-08 15:16:54,562 - [Ftest_business_token_goods_promote01.py - 51] - 40:assert 0 == 1
  +0
  -1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\Ftest_business_token_goods_promote01.py", line 46, in test_goods_promote
    assert count == 1
AssertionError: assert 0 == 1
  +0
  -1
2022-03-08 15:18:36,421 - [Ftest_business_token_goods_promote01.py - 51] - 40:测试编号1,测试标题正常流程,执行失败，实际结果为{'code': 1000, 'msg': '促销开启设置成功'}
2022-03-08 15:18:36,421 - [Ftest_business_token_goods_promote01.py - 52] - 40:assert 0 == 1
  +0
  -1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\Ftest_business_token_goods_promote01.py", line 47, in test_goods_promote
    assert count == 1
AssertionError: assert 0 == 1
  +0
  -1
2022-03-08 15:19:07,041 - [Ftest_business_token_goods_promote01.py - 52] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 15:20:53,739 - [Ftest_business_token_goods_promote01.py - 50] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 15:20:53,930 - [Ftest_business_token_goods_promote01.py - 50] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 15:20:54,073 - [Ftest_business_token_goods_promote01.py - 50] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 15:20:54,316 - [Ftest_business_token_goods_promote01.py - 50] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 15:20:54,517 - [Ftest_business_token_goods_promote01.py - 50] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 15:20:54,649 - [Ftest_business_token_goods_promote01.py - 50] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 15:20:54,886 - [Ftest_business_token_goods_promote01.py - 50] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 15:20:55,041 - [Ftest_business_token_goods_promote01.py - 50] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 15:20:55,187 - [Ftest_business_token_goods_promote01.py - 50] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 15:20:55,344 - [Ftest_business_token_goods_promote01.py - 50] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 15:20:55,486 - [Ftest_business_token_goods_promote01.py - 50] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 15:20:55,631 - [Ftest_business_token_goods_promote01.py - 50] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-08 15:20:55,769 - [Ftest_business_token_goods_promote01.py - 45] - 40:测试编号14,测试标题测试已经下架商品不能进行促销,执行失败，实际结果为{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-08 15:20:55,769 - [Ftest_business_token_goods_promote01.py - 46] - 40:assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'code': 1011} != {'code': 1012}
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\Ftest_business_token_goods_promote01.py", line 41, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'code': 1011} != {'code': 1012}
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
2022-03-08 15:24:30,084 - [Ftest_business_token_goods_promote01.py - 52] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 15:24:30,211 - [Ftest_business_token_goods_promote01.py - 52] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 15:24:30,337 - [Ftest_business_token_goods_promote01.py - 52] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 15:24:30,468 - [Ftest_business_token_goods_promote01.py - 52] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 15:24:30,597 - [Ftest_business_token_goods_promote01.py - 52] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 15:24:30,816 - [Ftest_business_token_goods_promote01.py - 52] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 15:24:31,010 - [Ftest_business_token_goods_promote01.py - 52] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 15:24:31,183 - [Ftest_business_token_goods_promote01.py - 52] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 15:24:31,334 - [Ftest_business_token_goods_promote01.py - 52] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 15:24:31,467 - [Ftest_business_token_goods_promote01.py - 52] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 15:24:31,595 - [Ftest_business_token_goods_promote01.py - 52] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 15:24:31,749 - [Ftest_business_token_goods_promote01.py - 52] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-08 15:24:31,910 - [Ftest_business_token_goods_promote01.py - 47] - 40:测试编号14,测试标题测试已经下架商品不能进行促销,执行失败，实际结果为{'code': 1000, 'msg': '促销开启设置成功'}
2022-03-08 15:24:31,910 - [Ftest_business_token_goods_promote01.py - 48] - 40:assert {'code': 1011...sg': '该商品不存在'} == {'code': 1000...': '促销开启设置成功'}
  Differing items:
  {'msg': '该商品不存在'} != {'msg': '促销开启设置成功'}
  {'code': 1011} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '促销开启设置成功'}
  + {'code': 1011, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\Ftest_business_token_goods_promote01.py", line 43, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...sg': '该商品不存在'} == {'code': 1000...': '促销开启设置成功'}
  Differing items:
  {'msg': '该商品不存在'} != {'msg': '促销开启设置成功'}
  {'code': 1011} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '促销开启设置成功'}
  + {'code': 1011, 'msg': '该商品不存在'}
2022-03-08 15:30:31,322 - [test_business_token_goods_promote01.py - 52] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 15:30:31,469 - [test_business_token_goods_promote01.py - 52] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 15:30:31,602 - [test_business_token_goods_promote01.py - 52] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 15:30:31,732 - [test_business_token_goods_promote01.py - 52] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 15:30:31,858 - [test_business_token_goods_promote01.py - 52] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 15:30:31,987 - [test_business_token_goods_promote01.py - 52] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 15:30:32,207 - [test_business_token_goods_promote01.py - 52] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 15:30:32,436 - [test_business_token_goods_promote01.py - 52] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 15:30:32,615 - [test_business_token_goods_promote01.py - 52] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 15:30:32,749 - [test_business_token_goods_promote01.py - 52] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 15:30:32,880 - [test_business_token_goods_promote01.py - 52] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 15:30:33,016 - [test_business_token_goods_promote01.py - 52] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-08 15:30:33,204 - [test_business_token_goods_promote01.py - 47] - 40:测试编号14,测试标题测试已经下架商品不能进行促销,执行失败，实际结果为{'code': 1000, 'msg': '促销开启设置成功'}
2022-03-08 15:30:33,205 - [test_business_token_goods_promote01.py - 48] - 40:assert {'code': 1011...sg': '该商品不存在'} == {'code': 1000...': '促销开启设置成功'}
  Differing items:
  {'msg': '该商品不存在'} != {'msg': '促销开启设置成功'}
  {'code': 1011} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '促销开启设置成功'}
  + {'code': 1011, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 43, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...sg': '该商品不存在'} == {'code': 1000...': '促销开启设置成功'}
  Differing items:
  {'msg': '该商品不存在'} != {'msg': '促销开启设置成功'}
  {'code': 1011} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '促销开启设置成功'}
  + {'code': 1011, 'msg': '该商品不存在'}
2022-03-08 15:31:38,095 - [test_business_token_goods_promote01.py - 52] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 15:31:38,221 - [test_business_token_goods_promote01.py - 52] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 15:31:38,345 - [test_business_token_goods_promote01.py - 52] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 15:31:38,478 - [test_business_token_goods_promote01.py - 52] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 15:31:38,605 - [test_business_token_goods_promote01.py - 52] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 15:31:38,733 - [test_business_token_goods_promote01.py - 52] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 15:31:38,863 - [test_business_token_goods_promote01.py - 52] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 15:31:38,994 - [test_business_token_goods_promote01.py - 52] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 15:31:39,140 - [test_business_token_goods_promote01.py - 52] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 15:31:39,269 - [test_business_token_goods_promote01.py - 52] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 15:31:39,395 - [test_business_token_goods_promote01.py - 52] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 15:31:39,525 - [test_business_token_goods_promote01.py - 52] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 15:31:39,656 - [test_business_token_goods_promote01.py - 52] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-08 15:31:39,865 - [test_business_token_goods_promote01.py - 47] - 40:测试编号14,测试标题测试已经下架商品不能进行促销,执行失败，实际结果为{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-08 15:31:39,866 - [test_business_token_goods_promote01.py - 48] - 40:assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'code': 1011} != {'code': 1012}
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 43, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'code': 1011} != {'code': 1012}
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
2022-03-08 15:36:10,192 - [test_business_token_goods_delete01.py - 46] - 40:测试编号1,测试标题正常流程，执行失败，实际结果{'code': 1000, 'msg': '商品删除成功'}
2022-03-08 15:36:10,192 - [test_business_token_goods_delete01.py - 47] - 40:assert 0 == 1
  +0
  -1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 42, in test_goods_delete
    assert count == 1
AssertionError: assert 0 == 1
  +0
  -1
2022-03-08 15:36:20,034 - [test_business_token_goods_delete01.py - 42] - 40:测试编号1,测试标题正常流程，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-08 15:36:20,034 - [test_business_token_goods_delete01.py - 43] - 40:assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'code': 1000} != {'code': 1004}
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 38, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'code': 1000} != {'code': 1004}
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-08 15:36:54,072 - [test_business_token_goods_promote01.py - 52] - 40:测试编号1,测试标题正常流程,执行失败，实际结果为{'code': 1000, 'msg': '促销开启设置成功'}
2022-03-08 15:36:54,073 - [test_business_token_goods_promote01.py - 53] - 40:assert 0 == 1
  +0
  -1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 47, in test_goods_promote
    assert count == 1
AssertionError: assert 0 == 1
  +0
  -1
2022-03-08 15:36:54,262 - [test_business_token_goods_promote01.py - 57] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 15:36:54,388 - [test_business_token_goods_promote01.py - 57] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 15:36:54,534 - [test_business_token_goods_promote01.py - 57] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 15:36:54,673 - [test_business_token_goods_promote01.py - 57] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 15:36:54,804 - [test_business_token_goods_promote01.py - 57] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 15:36:54,933 - [test_business_token_goods_promote01.py - 57] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 15:36:55,068 - [test_business_token_goods_promote01.py - 57] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 15:36:55,302 - [test_business_token_goods_promote01.py - 57] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 15:36:55,463 - [test_business_token_goods_promote01.py - 57] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 15:36:55,627 - [test_business_token_goods_promote01.py - 57] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 15:36:55,778 - [test_business_token_goods_promote01.py - 57] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 15:36:55,917 - [test_business_token_goods_promote01.py - 57] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-08 15:36:56,055 - [test_business_token_goods_promote01.py - 52] - 40:测试编号14,测试标题测试已经下架商品不能进行促销,执行失败，实际结果为{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-08 15:36:56,055 - [test_business_token_goods_promote01.py - 53] - 40:assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'code': 1011} != {'code': 1012}
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 43, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'code': 1011} != {'code': 1012}
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
2022-03-08 15:38:16,366 - [test_business_token_goods_promote01.py - 52] - 40:测试编号1,测试标题正常流程,执行失败，实际结果为{'code': 1000, 'msg': '促销开启设置成功'}
2022-03-08 15:38:16,366 - [test_business_token_goods_promote01.py - 53] - 40:assert 0 == 1
  +0
  -1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 47, in test_goods_promote
    assert count == 1
AssertionError: assert 0 == 1
  +0
  -1
2022-03-08 15:38:16,555 - [test_business_token_goods_promote01.py - 57] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 15:38:16,682 - [test_business_token_goods_promote01.py - 57] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 15:38:16,812 - [test_business_token_goods_promote01.py - 57] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 15:38:16,939 - [test_business_token_goods_promote01.py - 57] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 15:38:17,068 - [test_business_token_goods_promote01.py - 57] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 15:38:17,194 - [test_business_token_goods_promote01.py - 57] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 15:38:17,327 - [test_business_token_goods_promote01.py - 57] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 15:38:17,494 - [test_business_token_goods_promote01.py - 57] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 15:38:17,619 - [test_business_token_goods_promote01.py - 57] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 15:38:17,745 - [test_business_token_goods_promote01.py - 57] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 15:38:17,872 - [test_business_token_goods_promote01.py - 57] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 15:38:18,010 - [test_business_token_goods_promote01.py - 52] - 40:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行失败，实际结果为{'code': 1000, 'msg': '促销开启设置成功'}
2022-03-08 15:38:18,010 - [test_business_token_goods_promote01.py - 53] - 40:assert {'code': 1012...销状态，不能再次开启促销'} == {'code': 1000...': '促销开启设置成功'}
  Differing items:
  {'msg': '该商品已经在促销状态，不能再次开启促销'} != {'msg': '促销开启设置成功'}
  {'code': 1012} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '促销开启设置成功'}
  + {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 43, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1012...销状态，不能再次开启促销'} == {'code': 1000...': '促销开启设置成功'}
  Differing items:
  {'msg': '该商品已经在促销状态，不能再次开启促销'} != {'msg': '促销开启设置成功'}
  {'code': 1012} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '促销开启设置成功'}
  + {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-08 15:38:18,149 - [test_business_token_goods_promote01.py - 52] - 40:测试编号14,测试标题测试已经下架商品不能进行促销,执行失败，实际结果为{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-08 15:38:18,149 - [test_business_token_goods_promote01.py - 53] - 40:assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1011} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 43, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1011} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
2022-03-08 15:40:37,264 - [test_business_token_goods_delete01.py - 42] - 40:测试编号1,测试标题正常流程，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-08 15:40:37,264 - [test_business_token_goods_delete01.py - 43] - 40:assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'code': 1000} != {'code': 1004}
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 38, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'code': 1000} != {'code': 1004}
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-08 15:40:46,248 - [test_business_token_goods_promote01.py - 52] - 40:测试编号1,测试标题正常流程,执行失败，实际结果为{'code': 1000, 'msg': '促销开启设置成功'}
2022-03-08 15:40:46,248 - [test_business_token_goods_promote01.py - 53] - 40:assert 0 == 1
  +0
  -1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 47, in test_goods_promote
    assert count == 1
AssertionError: assert 0 == 1
  +0
  -1
2022-03-08 15:40:46,383 - [test_business_token_goods_promote01.py - 57] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 15:40:46,512 - [test_business_token_goods_promote01.py - 57] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 15:40:46,651 - [test_business_token_goods_promote01.py - 57] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 15:40:46,782 - [test_business_token_goods_promote01.py - 57] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 15:40:46,910 - [test_business_token_goods_promote01.py - 57] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 15:40:47,038 - [test_business_token_goods_promote01.py - 57] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 15:40:47,167 - [test_business_token_goods_promote01.py - 57] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 15:40:47,312 - [test_business_token_goods_promote01.py - 57] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 15:40:47,441 - [test_business_token_goods_promote01.py - 57] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 15:40:47,569 - [test_business_token_goods_promote01.py - 57] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 15:40:47,698 - [test_business_token_goods_promote01.py - 57] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 15:40:47,830 - [test_business_token_goods_promote01.py - 57] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-08 15:40:47,969 - [test_business_token_goods_promote01.py - 52] - 40:测试编号14,测试标题测试已经下架商品不能进行促销,执行失败，实际结果为{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-08 15:40:47,970 - [test_business_token_goods_promote01.py - 53] - 40:assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1011} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 43, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1011} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
2022-03-08 15:42:49,361 - [test_business_token_goods_promote01.py - 57] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 15:42:49,486 - [test_business_token_goods_promote01.py - 57] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 15:42:49,612 - [test_business_token_goods_promote01.py - 57] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 15:42:49,739 - [test_business_token_goods_promote01.py - 57] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 15:42:49,866 - [test_business_token_goods_promote01.py - 57] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 15:42:49,998 - [test_business_token_goods_promote01.py - 57] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 15:42:50,129 - [test_business_token_goods_promote01.py - 57] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 15:42:50,269 - [test_business_token_goods_promote01.py - 57] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 15:42:50,466 - [test_business_token_goods_promote01.py - 57] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 15:42:50,594 - [test_business_token_goods_promote01.py - 57] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 15:42:50,719 - [test_business_token_goods_promote01.py - 57] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 15:42:50,848 - [test_business_token_goods_promote01.py - 57] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 15:42:50,974 - [test_business_token_goods_promote01.py - 57] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-08 15:42:51,111 - [test_business_token_goods_promote01.py - 52] - 40:测试编号14,测试标题测试已经下架商品不能进行促销,执行失败，实际结果为{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-08 15:42:51,111 - [test_business_token_goods_promote01.py - 53] - 40:assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'code': 1011} != {'code': 1012}
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 43, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'code': 1011} != {'code': 1012}
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
2022-03-08 17:20:20,321 - [ftest_business_token_goods_promote01.py - 56] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 17:30:15,886 - [ftest_business_token_goods_promote01.py - 64] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 17:30:16,057 - [ftest_business_token_goods_promote01.py - 64] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 17:30:16,210 - [ftest_business_token_goods_promote01.py - 64] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 17:30:16,375 - [ftest_business_token_goods_promote01.py - 64] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 17:30:16,519 - [ftest_business_token_goods_promote01.py - 64] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 17:30:16,651 - [ftest_business_token_goods_promote01.py - 64] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 17:30:16,831 - [ftest_business_token_goods_promote01.py - 64] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 17:30:16,979 - [ftest_business_token_goods_promote01.py - 64] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 17:30:17,130 - [ftest_business_token_goods_promote01.py - 64] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 17:30:17,263 - [ftest_business_token_goods_promote01.py - 64] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 17:30:17,409 - [ftest_business_token_goods_promote01.py - 64] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 17:30:17,546 - [ftest_business_token_goods_promote01.py - 64] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 17:30:17,686 - [ftest_business_token_goods_promote01.py - 59] - 40:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行失败，实际结果为{'code': 1000, 'msg': '促销开启设置成功'}
2022-03-08 17:30:17,687 - [ftest_business_token_goods_promote01.py - 60] - 40:assert {'code': 1012...销状态，不能再次开启促销'} == {'code': 1000...': '促销开启设置成功'}
  Differing items:
  {'msg': '该商品已经在促销状态，不能再次开启促销'} != {'msg': '促销开启设置成功'}
  {'code': 1012} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '促销开启设置成功'}
  + {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\ftest_business_token_goods_promote01.py", line 50, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1012...销状态，不能再次开启促销'} == {'code': 1000...': '促销开启设置成功'}
  Differing items:
  {'msg': '该商品已经在促销状态，不能再次开启促销'} != {'msg': '促销开启设置成功'}
  {'code': 1012} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '促销开启设置成功'}
  + {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-08 17:30:17,847 - [ftest_business_token_goods_promote01.py - 59] - 40:测试编号14,测试标题测试已经下架商品不能进行促销,执行失败，实际结果为{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-08 17:30:17,848 - [ftest_business_token_goods_promote01.py - 60] - 40:assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1011} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\ftest_business_token_goods_promote01.py", line 50, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1011} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
2022-03-08 17:34:07,534 - [ftest_business_token_goods_promote01.py - 66] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 17:34:07,710 - [ftest_business_token_goods_promote01.py - 66] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 17:34:07,842 - [ftest_business_token_goods_promote01.py - 66] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 17:34:07,976 - [ftest_business_token_goods_promote01.py - 66] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 17:34:08,131 - [ftest_business_token_goods_promote01.py - 61] - 40:测试编号14,测试标题测试已经下架商品不能进行促销,执行失败，实际结果为{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-08 17:34:08,132 - [ftest_business_token_goods_promote01.py - 62] - 40:assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1011} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\ftest_business_token_goods_promote01.py", line 52, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1011} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
2022-03-08 17:34:31,871 - [ftest_business_token_goods_promote01.py - 65] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 17:34:32,042 - [ftest_business_token_goods_promote01.py - 65] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 17:34:32,179 - [ftest_business_token_goods_promote01.py - 65] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 17:34:32,317 - [ftest_business_token_goods_promote01.py - 65] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 17:34:32,476 - [ftest_business_token_goods_promote01.py - 60] - 40:测试编号14,测试标题测试已经下架商品不能进行促销,执行失败，实际结果为{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-08 17:34:32,476 - [ftest_business_token_goods_promote01.py - 61] - 40:assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1011} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\ftest_business_token_goods_promote01.py", line 51, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...sg': '该商品不存在'} == {'code': 1012...销状态，不能再次开启促销'}
  Differing items:
  {'msg': '该商品不存在'} != {'msg': '该商品已经在促销状态，不能再次开启促销'}
  {'code': 1011} != {'code': 1012}
  Full diff:
  - {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
  + {'code': 1011, 'msg': '该商品不存在'}
2022-03-08 18:07:01,509 - [test_business_token_goods_promote01.py - 58] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 18:08:56,524 - [test_business_token_goods_promote01.py - 58] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 18:33:19,337 - [test_business_token_goods_promote01.py - 58] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 18:33:25,086 - [test_business_token_goods_promote01.py - 58] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 19:04:49,961 - [test_business_token_goods_promote01.py - 70] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 19:04:50,181 - [test_business_token_goods_promote01.py - 70] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 19:04:50,318 - [test_business_token_goods_promote01.py - 70] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 19:04:50,451 - [test_business_token_goods_promote01.py - 70] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 19:04:50,662 - [test_business_token_goods_promote01.py - 70] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 19:04:50,876 - [test_business_token_goods_promote01.py - 70] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 19:04:51,041 - [test_business_token_goods_promote01.py - 70] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 19:04:51,174 - [test_business_token_goods_promote01.py - 70] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 19:04:51,320 - [test_business_token_goods_promote01.py - 70] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 19:04:51,462 - [test_business_token_goods_promote01.py - 70] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 19:04:51,599 - [test_business_token_goods_promote01.py - 70] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 19:04:51,817 - [test_business_token_goods_promote01.py - 70] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 19:04:51,987 - [test_business_token_goods_promote01.py - 70] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-08 19:04:57,697 - [test_business_token_goods_promote01.py - 70] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 19:04:57,848 - [test_business_token_goods_promote01.py - 70] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 19:04:57,984 - [test_business_token_goods_promote01.py - 70] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 19:04:58,116 - [test_business_token_goods_promote01.py - 70] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 19:04:58,250 - [test_business_token_goods_promote01.py - 70] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 19:04:58,386 - [test_business_token_goods_promote01.py - 70] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 19:04:58,518 - [test_business_token_goods_promote01.py - 70] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 19:04:58,664 - [test_business_token_goods_promote01.py - 70] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 19:04:58,878 - [test_business_token_goods_promote01.py - 70] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 19:04:59,006 - [test_business_token_goods_promote01.py - 70] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 19:04:59,143 - [test_business_token_goods_promote01.py - 70] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 19:04:59,283 - [test_business_token_goods_promote01.py - 70] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 19:04:59,421 - [test_business_token_goods_promote01.py - 70] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-08 19:05:03,068 - [test_business_token_goods_promote01.py - 70] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 19:05:03,207 - [test_business_token_goods_promote01.py - 70] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 19:05:03,339 - [test_business_token_goods_promote01.py - 70] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 19:05:03,543 - [test_business_token_goods_promote01.py - 70] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 19:05:03,690 - [test_business_token_goods_promote01.py - 70] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 19:05:03,874 - [test_business_token_goods_promote01.py - 70] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 19:05:04,110 - [test_business_token_goods_promote01.py - 70] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 19:05:04,244 - [test_business_token_goods_promote01.py - 70] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 19:05:04,403 - [test_business_token_goods_promote01.py - 70] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 19:05:04,538 - [test_business_token_goods_promote01.py - 70] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 19:05:04,671 - [test_business_token_goods_promote01.py - 70] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 19:05:04,918 - [test_business_token_goods_promote01.py - 70] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 19:05:05,098 - [test_business_token_goods_promote01.py - 70] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-08 19:34:47,074 - [test_business_register02.py - 59] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-08 19:40:08,572 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-08 19:40:08,717 - [test_business_register03.py - 76] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-08 19:40:08,874 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 19:40:09,026 - [test_business_register03.py - 76] - 20:测试标号4，测试标题测试用户名非字母开头的场景，执行成功
2022-03-08 19:40:09,170 - [test_business_register03.py - 76] - 20:测试标号5，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-08 19:40:09,312 - [test_business_register03.py - 76] - 20:测试标号6，测试标题测试用户名已注册的场景，执行成功
2022-03-08 19:40:09,469 - [test_business_register03.py - 76] - 20:测试标号7，测试标题测试密码为空的场景，执行成功
2022-03-08 19:40:09,620 - [test_business_register03.py - 76] - 20:测试标号8，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 19:40:09,760 - [test_business_register03.py - 76] - 20:测试标号9，测试标题测试密码错误的场景，执行成功
2022-03-08 19:40:09,904 - [test_business_register03.py - 76] - 20:测试标号10，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-08 19:40:10,055 - [test_business_register03.py - 76] - 20:测试标号11，测试标题测试确认密码为空的场景，执行成功
2022-03-08 19:40:10,193 - [test_business_register03.py - 76] - 20:测试标号12，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-08 19:40:10,333 - [test_business_register03.py - 76] - 20:测试标号13，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-08 19:40:10,473 - [test_business_register03.py - 76] - 20:测试标号14，测试标题测试手机号码为空的场景，执行成功
2022-03-08 19:40:10,667 - [test_business_register03.py - 71] - 40:测试标号15，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 19:40:10,667 - [test_business_register03.py - 72] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1008} != {'code': 1013}
  {'msg': '手机号格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1008, 'msg': '手机号格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1008} != {'code': 1013}
  {'msg': '手机号格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1008, 'msg': '手机号格式错误'}
2022-03-08 19:40:10,839 - [test_business_register03.py - 76] - 20:测试标号16，测试标题测试手机号码非11位的场景，执行成功
2022-03-08 19:40:10,982 - [test_business_register03.py - 76] - 20:测试标号17，测试标题测试手机号码非数字的场景，执行成功
2022-03-08 19:40:11,149 - [test_business_register03.py - 76] - 20:测试标号18，测试标题测试手机号码已注册的场景，执行成功
2022-03-08 19:40:11,302 - [test_business_register03.py - 76] - 20:测试标号19，测试标题测试性别为空的场景，执行成功
2022-03-08 19:40:11,441 - [test_business_register03.py - 76] - 20:测试标号20，测试标题测试性别非枚举的场景，执行成功
2022-03-08 19:40:11,591 - [test_business_register03.py - 76] - 20:测试标号21，测试标题测试性别非男或女的场景，执行成功
2022-03-08 19:40:11,737 - [test_business_register03.py - 76] - 20:测试标号22，测试标题测试生日为空的场景，执行成功
2022-03-08 19:40:11,878 - [test_business_register03.py - 76] - 20:测试标号23，测试标题测试生日年月日不完整的场景，执行成功
2022-03-08 19:40:12,165 - [test_business_register03.py - 76] - 20:测试标号24，测试标题测试生日非数字的场景，执行成功
2022-03-08 19:40:12,441 - [test_business_register03.py - 76] - 20:测试标号25，测试标题测试生日不存在的时间的场景，执行成功
2022-03-08 19:40:12,588 - [test_business_register03.py - 71] - 40:测试标号26，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 19:40:12,589 - [test_business_register03.py - 72] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-08 19:40:12,736 - [test_business_register03.py - 71] - 40:测试标号27，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 19:40:12,736 - [test_business_register03.py - 72] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-08 19:40:12,976 - [test_business_register03.py - 76] - 20:测试标号28，测试标题测试qq号码为空的场景，执行成功
2022-03-08 19:40:13,120 - [test_business_register03.py - 76] - 20:测试标号29，测试标题测试qq号码错误的场景，执行成功
2022-03-08 19:40:13,262 - [test_business_register03.py - 76] - 20:测试标号30，测试标题测试qq号码非数字的场景，执行成功
2022-03-08 19:40:13,489 - [test_business_register03.py - 76] - 20:测试标号31，测试标题测试email为空的场景，执行成功
2022-03-08 19:40:13,670 - [test_business_register03.py - 76] - 20:测试标号32，测试标题测试email格式错误的场景，执行成功
2022-03-08 19:40:13,825 - [test_business_register03.py - 76] - 20:测试标号33，测试标题测试email已注册的场景，执行成功
2022-03-08 19:40:59,891 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-08 19:41:00,055 - [test_business_register03.py - 76] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-08 19:41:00,203 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 19:41:00,395 - [test_business_register03.py - 76] - 20:测试标号4，测试标题测试用户名非字母开头的场景，执行成功
2022-03-08 19:41:00,625 - [test_business_register03.py - 76] - 20:测试标号5，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-08 19:41:00,828 - [test_business_register03.py - 76] - 20:测试标号6，测试标题测试用户名已注册的场景，执行成功
2022-03-08 19:41:00,972 - [test_business_register03.py - 76] - 20:测试标号7，测试标题测试密码为空的场景，执行成功
2022-03-08 19:41:01,134 - [test_business_register03.py - 76] - 20:测试标号8，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 19:41:01,274 - [test_business_register03.py - 76] - 20:测试标号9，测试标题测试密码错误的场景，执行成功
2022-03-08 19:41:01,417 - [test_business_register03.py - 76] - 20:测试标号10，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-08 19:41:01,557 - [test_business_register03.py - 76] - 20:测试标号11，测试标题测试确认密码为空的场景，执行成功
2022-03-08 19:41:01,696 - [test_business_register03.py - 76] - 20:测试标号12，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-08 19:41:01,835 - [test_business_register03.py - 76] - 20:测试标号13，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-08 19:41:01,975 - [test_business_register03.py - 76] - 20:测试标号14，测试标题测试手机号码为空的场景，执行成功
2022-03-08 19:41:02,121 - [test_business_register03.py - 71] - 40:测试标号15，测试标题测试手机号码不支持号段的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 19:41:02,121 - [test_business_register03.py - 72] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '手机号格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1008} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1008, 'msg': '手机号格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '手机号格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1008} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1008, 'msg': '手机号格式错误'}
2022-03-08 19:41:02,265 - [test_business_register03.py - 76] - 20:测试标号16，测试标题测试手机号码非11位的场景，执行成功
2022-03-08 19:41:02,410 - [test_business_register03.py - 76] - 20:测试标号17，测试标题测试手机号码非数字的场景，执行成功
2022-03-08 19:41:02,572 - [test_business_register03.py - 76] - 20:测试标号18，测试标题测试手机号码已注册的场景，执行成功
2022-03-08 19:41:02,726 - [test_business_register03.py - 76] - 20:测试标号19，测试标题测试性别为空的场景，执行成功
2022-03-08 19:41:02,863 - [test_business_register03.py - 76] - 20:测试标号20，测试标题测试性别非枚举的场景，执行成功
2022-03-08 19:41:03,003 - [test_business_register03.py - 76] - 20:测试标号21，测试标题测试性别非男或女的场景，执行成功
2022-03-08 19:41:03,152 - [test_business_register03.py - 76] - 20:测试标号22，测试标题测试生日为空的场景，执行成功
2022-03-08 19:41:03,293 - [test_business_register03.py - 76] - 20:测试标号23，测试标题测试生日年月日不完整的场景，执行成功
2022-03-08 19:41:03,437 - [test_business_register03.py - 76] - 20:测试标号24，测试标题测试生日非数字的场景，执行成功
2022-03-08 19:41:03,579 - [test_business_register03.py - 76] - 20:测试标号25，测试标题测试生日不存在的时间的场景，执行成功
2022-03-08 19:41:03,720 - [test_business_register03.py - 71] - 40:测试标号26，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 19:41:03,720 - [test_business_register03.py - 72] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 9999} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 9999} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-08 19:41:03,867 - [test_business_register03.py - 71] - 40:测试标号27，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 19:41:03,867 - [test_business_register03.py - 72] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 9999} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 9999} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-08 19:41:04,089 - [test_business_register03.py - 76] - 20:测试标号28，测试标题测试qq号码为空的场景，执行成功
2022-03-08 19:41:04,232 - [test_business_register03.py - 76] - 20:测试标号29，测试标题测试qq号码错误的场景，执行成功
2022-03-08 19:41:04,371 - [test_business_register03.py - 76] - 20:测试标号30，测试标题测试qq号码非数字的场景，执行成功
2022-03-08 19:41:04,521 - [test_business_register03.py - 76] - 20:测试标号31，测试标题测试email为空的场景，执行成功
2022-03-08 19:41:04,665 - [test_business_register03.py - 76] - 20:测试标号32，测试标题测试email格式错误的场景，执行成功
2022-03-08 19:41:04,805 - [test_business_register03.py - 76] - 20:测试标号33，测试标题测试email已注册的场景，执行成功
2022-03-08 19:45:10,730 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-08 19:45:10,913 - [test_business_register03.py - 76] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-08 19:45:11,113 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 19:45:11,289 - [test_business_register03.py - 76] - 20:测试标号4，测试标题测试用户名非字母开头的场景，执行成功
2022-03-08 19:45:11,435 - [test_business_register03.py - 76] - 20:测试标号5，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-08 19:45:11,579 - [test_business_register03.py - 76] - 20:测试标号6，测试标题测试用户名已注册的场景，执行成功
2022-03-08 19:45:11,750 - [test_business_register03.py - 76] - 20:测试标号7，测试标题测试密码为空的场景，执行成功
2022-03-08 19:45:11,960 - [test_business_register03.py - 76] - 20:测试标号8，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 19:45:12,180 - [test_business_register03.py - 76] - 20:测试标号9，测试标题测试密码错误的场景，执行成功
2022-03-08 19:45:12,404 - [test_business_register03.py - 76] - 20:测试标号10，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-08 19:45:12,549 - [test_business_register03.py - 76] - 20:测试标号11，测试标题测试确认密码为空的场景，执行成功
2022-03-08 19:45:12,691 - [test_business_register03.py - 76] - 20:测试标号12，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-08 19:45:12,831 - [test_business_register03.py - 76] - 20:测试标号13，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-08 19:45:12,988 - [test_business_register03.py - 76] - 20:测试标号14，测试标题测试手机号码为空的场景，执行成功
2022-03-08 19:45:13,160 - [test_business_register03.py - 76] - 20:测试标号15，测试标题测试手机号码不支持号段的场景，执行成功
2022-03-08 19:45:13,309 - [test_business_register03.py - 76] - 20:测试标号16，测试标题测试手机号码非11位的场景，执行成功
2022-03-08 19:45:13,466 - [test_business_register03.py - 76] - 20:测试标号17，测试标题测试手机号码非数字的场景，执行成功
2022-03-08 19:45:13,691 - [test_business_register03.py - 76] - 20:测试标号18，测试标题测试手机号码已注册的场景，执行成功
2022-03-08 19:45:13,855 - [test_business_register03.py - 76] - 20:测试标号19，测试标题测试性别为空的场景，执行成功
2022-03-08 19:45:14,000 - [test_business_register03.py - 76] - 20:测试标号20，测试标题测试性别非枚举的场景，执行成功
2022-03-08 19:45:14,139 - [test_business_register03.py - 76] - 20:测试标号21，测试标题测试性别非男或女的场景，执行成功
2022-03-08 19:45:14,285 - [test_business_register03.py - 76] - 20:测试标号22，测试标题测试生日为空的场景，执行成功
2022-03-08 19:45:14,425 - [test_business_register03.py - 76] - 20:测试标号23，测试标题测试生日年月日不完整的场景，执行成功
2022-03-08 19:45:14,637 - [test_business_register03.py - 76] - 20:测试标号24，测试标题测试生日非数字的场景，执行成功
2022-03-08 19:45:14,827 - [test_business_register03.py - 76] - 20:测试标号25，测试标题测试生日不存在的时间的场景，执行成功
2022-03-08 19:45:15,081 - [test_business_register03.py - 71] - 40:测试标号26，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-08 19:45:15,081 - [test_business_register03.py - 72] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  {'code': 9999} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  {'code': 9999} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-08 19:45:15,237 - [test_business_register03.py - 71] - 40:测试标号27，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-08 19:45:15,237 - [test_business_register03.py - 72] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  {'code': 9999} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '插入用户数据失败'} != {'msg': '注册成功'}
  {'code': 9999} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-08 19:45:15,409 - [test_business_register03.py - 76] - 20:测试标号28，测试标题测试qq号码为空的场景，执行成功
2022-03-08 19:45:15,548 - [test_business_register03.py - 76] - 20:测试标号29，测试标题测试qq号码错误的场景，执行成功
2022-03-08 19:45:15,713 - [test_business_register03.py - 76] - 20:测试标号30，测试标题测试qq号码非数字的场景，执行成功
2022-03-08 19:45:15,876 - [test_business_register03.py - 76] - 20:测试标号31，测试标题测试email为空的场景，执行成功
2022-03-08 19:45:16,148 - [test_business_register03.py - 76] - 20:测试标号32，测试标题测试email格式错误的场景，执行成功
2022-03-08 19:45:16,298 - [test_business_register03.py - 76] - 20:测试标号33，测试标题测试email已注册的场景，执行成功
2022-03-08 19:45:25,228 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-08 19:45:25,367 - [test_business_register03.py - 76] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-08 19:45:25,543 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 19:45:25,682 - [test_business_register03.py - 76] - 20:测试标号4，测试标题测试用户名非字母开头的场景，执行成功
2022-03-08 19:45:25,824 - [test_business_register03.py - 76] - 20:测试标号5，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-08 19:45:26,020 - [test_business_register03.py - 76] - 20:测试标号6，测试标题测试用户名已注册的场景，执行成功
2022-03-08 19:45:26,183 - [test_business_register03.py - 76] - 20:测试标号7，测试标题测试密码为空的场景，执行成功
2022-03-08 19:45:26,396 - [test_business_register03.py - 76] - 20:测试标号8，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 19:45:26,542 - [test_business_register03.py - 76] - 20:测试标号9，测试标题测试密码错误的场景，执行成功
2022-03-08 19:45:26,701 - [test_business_register03.py - 76] - 20:测试标号10，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-08 19:45:26,910 - [test_business_register03.py - 76] - 20:测试标号11，测试标题测试确认密码为空的场景，执行成功
2022-03-08 19:45:27,121 - [test_business_register03.py - 76] - 20:测试标号12，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-08 19:45:27,407 - [test_business_register03.py - 76] - 20:测试标号13，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-08 19:45:27,647 - [test_business_register03.py - 76] - 20:测试标号14，测试标题测试手机号码为空的场景，执行成功
2022-03-08 19:45:27,802 - [test_business_register03.py - 76] - 20:测试标号15，测试标题测试手机号码不支持号段的场景，执行成功
2022-03-08 19:45:27,943 - [test_business_register03.py - 76] - 20:测试标号16，测试标题测试手机号码非11位的场景，执行成功
2022-03-08 19:45:28,085 - [test_business_register03.py - 76] - 20:测试标号17，测试标题测试手机号码非数字的场景，执行成功
2022-03-08 19:45:28,293 - [test_business_register03.py - 76] - 20:测试标号18，测试标题测试手机号码已注册的场景，执行成功
2022-03-08 19:45:28,441 - [test_business_register03.py - 76] - 20:测试标号19，测试标题测试性别为空的场景，执行成功
2022-03-08 19:45:28,583 - [test_business_register03.py - 76] - 20:测试标号20，测试标题测试性别非枚举的场景，执行成功
2022-03-08 19:45:28,752 - [test_business_register03.py - 76] - 20:测试标号21，测试标题测试性别非男或女的场景，执行成功
2022-03-08 19:45:28,935 - [test_business_register03.py - 76] - 20:测试标号22，测试标题测试生日为空的场景，执行成功
2022-03-08 19:45:29,077 - [test_business_register03.py - 76] - 20:测试标号23，测试标题测试生日年月日不完整的场景，执行成功
2022-03-08 19:45:29,220 - [test_business_register03.py - 76] - 20:测试标号24，测试标题测试生日非数字的场景，执行成功
2022-03-08 19:45:29,362 - [test_business_register03.py - 76] - 20:测试标号25，测试标题测试生日不存在的时间的场景，执行成功
2022-03-08 19:45:29,529 - [test_business_register03.py - 71] - 40:测试标号26，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 19:45:29,529 - [test_business_register03.py - 72] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-08 19:45:29,675 - [test_business_register03.py - 71] - 40:测试标号27，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 19:45:29,675 - [test_business_register03.py - 72] - 40:assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999...': '插入用户数据失败'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 9999} != {'code': 1013}
  {'msg': '插入用户数据失败'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 9999, 'msg': '插入用户数据失败'}
2022-03-08 19:45:29,854 - [test_business_register03.py - 76] - 20:测试标号28，测试标题测试qq号码为空的场景，执行成功
2022-03-08 19:45:29,992 - [test_business_register03.py - 76] - 20:测试标号29，测试标题测试qq号码错误的场景，执行成功
2022-03-08 19:45:30,207 - [test_business_register03.py - 76] - 20:测试标号30，测试标题测试qq号码非数字的场景，执行成功
2022-03-08 19:45:30,357 - [test_business_register03.py - 76] - 20:测试标号31，测试标题测试email为空的场景，执行成功
2022-03-08 19:45:30,566 - [test_business_register03.py - 76] - 20:测试标号32，测试标题测试email格式错误的场景，执行成功
2022-03-08 19:45:30,733 - [test_business_register03.py - 76] - 20:测试标号33，测试标题测试email已注册的场景，执行成功
2022-03-08 19:52:02,963 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正常流程，执行成功
2022-03-08 19:52:03,361 - [test_business_register03.py - 76] - 20:测试标号2，测试标题测试用户名为空的场景，执行成功
2022-03-08 19:52:03,568 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 19:52:03,717 - [test_business_register03.py - 76] - 20:测试标号4，测试标题测试用户名非字母开头的场景，执行成功
2022-03-08 19:52:03,916 - [test_business_register03.py - 76] - 20:测试标号5，测试标题测试用户名包含符号和汉字的场景，执行成功
2022-03-08 19:52:04,226 - [test_business_register03.py - 76] - 20:测试标号6，测试标题测试用户名已注册的场景，执行成功
2022-03-08 19:52:04,430 - [test_business_register03.py - 76] - 20:测试标号7，测试标题测试密码为空的场景，执行成功
2022-03-08 19:52:04,674 - [test_business_register03.py - 76] - 20:测试标号8，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 19:52:04,819 - [test_business_register03.py - 76] - 20:测试标号9，测试标题测试密码错误的场景，执行成功
2022-03-08 19:52:04,961 - [test_business_register03.py - 76] - 20:测试标号10，测试标题测试密码包含符号和汉字的场景，执行成功
2022-03-08 19:52:05,100 - [test_business_register03.py - 76] - 20:测试标号11，测试标题测试确认密码为空的场景，执行成功
2022-03-08 19:52:05,237 - [test_business_register03.py - 76] - 20:测试标号12，测试标题测试确认密码和密码不一致的场景，执行成功
2022-03-08 19:52:05,400 - [test_business_register03.py - 76] - 20:测试标号13，测试标题测试确认密码区分大小写的场景，执行成功
2022-03-08 19:52:05,545 - [test_business_register03.py - 76] - 20:测试标号14，测试标题测试手机号码为空的场景，执行成功
2022-03-08 19:52:05,683 - [test_business_register03.py - 76] - 20:测试标号15，测试标题测试手机号码不支持号段的场景，执行成功
2022-03-08 19:52:05,824 - [test_business_register03.py - 76] - 20:测试标号16，测试标题测试手机号码非11位的场景，执行成功
2022-03-08 19:52:05,965 - [test_business_register03.py - 76] - 20:测试标号17，测试标题测试手机号码非数字的场景，执行成功
2022-03-08 19:52:06,134 - [test_business_register03.py - 76] - 20:测试标号18，测试标题测试手机号码已注册的场景，执行成功
2022-03-08 19:52:06,286 - [test_business_register03.py - 76] - 20:测试标号19，测试标题测试性别为空的场景，执行成功
2022-03-08 19:52:06,427 - [test_business_register03.py - 76] - 20:测试标号20，测试标题测试性别非枚举的场景，执行成功
2022-03-08 19:52:06,613 - [test_business_register03.py - 76] - 20:测试标号21，测试标题测试性别非男或女的场景，执行成功
2022-03-08 19:52:06,826 - [test_business_register03.py - 76] - 20:测试标号22，测试标题测试生日为空的场景，执行成功
2022-03-08 19:52:06,967 - [test_business_register03.py - 76] - 20:测试标号23，测试标题测试生日年月日不完整的场景，执行成功
2022-03-08 19:52:07,104 - [test_business_register03.py - 76] - 20:测试标号24，测试标题测试生日非数字的场景，执行成功
2022-03-08 19:52:07,330 - [test_business_register03.py - 71] - 40:测试标号25，测试标题测试生日超过当天的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-08 19:52:07,330 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '注册成功'}
  {'code': 1010} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?            ^           ^^^^
  + {'code': 1010, 'msg': '生日格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '注册成功'}
  {'code': 1010} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?            ^           ^^^^
  + {'code': 1010, 'msg': '生日格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-08 19:52:07,477 - [test_business_register03.py - 71] - 40:测试标号26，测试标题测试生日超过合理时间范畴的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 19:52:07,477 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 19:52:07,635 - [test_business_register03.py - 76] - 20:测试标号27，测试标题测试qq号码为空的场景，执行成功
2022-03-08 19:52:07,794 - [test_business_register03.py - 76] - 20:测试标号28，测试标题测试qq号码错误的场景，执行成功
2022-03-08 19:52:08,045 - [test_business_register03.py - 76] - 20:测试标号29，测试标题测试qq号码非数字的场景，执行成功
2022-03-08 19:52:08,366 - [test_business_register03.py - 76] - 20:测试标号30，测试标题测试email为空的场景，执行成功
2022-03-08 19:52:08,681 - [test_business_register03.py - 76] - 20:测试标号31，测试标题测试email格式错误的场景，执行成功
2022-03-08 19:52:08,834 - [test_business_register03.py - 76] - 20:测试标号32，测试标题测试email已注册的场景，执行成功
2022-03-08 19:59:48,238 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正确流程，执行成功
2022-03-08 19:59:48,364 - [test_business_register03.py - 76] - 20:测试标号2，测试标题用户名为空的场景，执行成功
2022-03-08 19:59:48,626 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 19:59:48,872 - [test_business_register03.py - 76] - 20:测试标号4，测试标题用户名为5位无效边界值的场景，执行成功
2022-03-08 19:59:49,010 - [test_business_register03.py - 76] - 20:测试标号5，测试标题用户名为9位无效边界值的场景，执行成功
2022-03-08 19:59:49,140 - [test_business_register03.py - 76] - 20:测试标号6，测试标题用户名已存在的场景，执行成功
2022-03-08 19:59:49,265 - [test_business_register03.py - 76] - 20:测试标号7，测试标题用户名包含特殊符号的场景，执行成功
2022-03-08 19:59:49,429 - [test_business_register03.py - 76] - 20:测试标号8，测试标题用户名前包含空格的场景，执行成功
2022-03-08 19:59:49,561 - [test_business_register03.py - 76] - 20:测试标号9，测试标题用户名中包含空格的场景，执行成功
2022-03-08 19:59:49,779 - [test_business_register03.py - 76] - 20:测试标号10，测试标题用户名后包含空格的场景，执行成功
2022-03-08 19:59:50,113 - [test_business_register03.py - 76] - 20:测试标号11，测试标题用户名以非字母开头的场景，执行成功
2022-03-08 19:59:50,308 - [test_business_register03.py - 76] - 20:测试标号12，测试标题密码为空的场景，执行成功
2022-03-08 19:59:50,450 - [test_business_register03.py - 76] - 20:测试标号13，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 19:59:50,575 - [test_business_register03.py - 76] - 20:测试标号14，测试标题密码为6位无效边界值的场景，执行成功
2022-03-08 19:59:50,700 - [test_business_register03.py - 76] - 20:测试标号15，测试标题密码为12位无效边界值的场景，执行成功
2022-03-08 19:59:50,935 - [test_business_register03.py - 76] - 20:测试标号16，测试标题密码包含特殊符号的场景，执行成功
2022-03-08 19:59:51,091 - [test_business_register03.py - 71] - 40:测试标号17，测试标题密码纯字母的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-08 19:59:51,091 - [test_business_register03.py - 72] - 40:assert {'code': 1006...须为7-11位字母和数字'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1006} != {'code': 1000}
  {'msg': '密码必须为7-11位字母和数字'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1006, 'msg': '密码必须为7-11位字母和数字'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1006...须为7-11位字母和数字'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1006} != {'code': 1000}
  {'msg': '密码必须为7-11位字母和数字'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  + {'code': 1006, 'msg': '密码必须为7-11位字母和数字'}
2022-03-08 19:59:51,223 - [test_business_register03.py - 71] - 40:测试标号18，测试标题密码纯数字的场景，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 19:59:51,224 - [test_business_register03.py - 72] - 40:assert {'code': 1006...须为7-11位字母和数字'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1006} != {'code': 1013}
  {'msg': '密码必须为7-11位字母和数字'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1006, 'msg': '密码必须为7-11位字母和数字'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1006...须为7-11位字母和数字'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1006} != {'code': 1013}
  {'msg': '密码必须为7-11位字母和数字'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1006, 'msg': '密码必须为7-11位字母和数字'}
2022-03-08 19:59:51,373 - [test_business_register03.py - 76] - 20:测试标号19，测试标题密码区分大小写的场景，执行成功
2022-03-08 19:59:51,498 - [test_business_register03.py - 76] - 20:测试标号20，测试标题确认密码为空的场景，执行成功
2022-03-08 19:59:51,628 - [test_business_register03.py - 76] - 20:测试标号21，测试标题确认密码与密码不一致的场景，执行成功
2022-03-08 19:59:51,756 - [test_business_register03.py - 76] - 20:测试标号22，测试标题确认密码区分大小写的场景，执行成功
2022-03-08 19:59:51,921 - [test_business_register03.py - 76] - 20:测试标号23，测试标题手机号为空的场景，执行成功
2022-03-08 19:59:52,182 - [test_business_register03.py - 76] - 20:测试标号24，测试标题手机号为非11位数字的场景，执行成功
2022-03-08 19:59:52,373 - [test_business_register03.py - 76] - 20:测试标号25，测试标题手机号为非数字的场景，执行成功
2022-03-08 19:59:52,532 - [test_business_register03.py - 71] - 40:测试标号26，测试标题手机号为不支持的号段的场景，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-08 19:59:52,532 - [test_business_register03.py - 72] - 40:assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1008...g': '手机号格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1008} != {'code': 1000}
  {'msg': '手机号格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?             ^          ^^^^
  + {'code': 1008, 'msg': '手机号格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-08 19:59:52,659 - [test_business_register03.py - 76] - 20:测试标号27，测试标题手机号已注册的场景，执行成功
2022-03-08 19:59:52,794 - [test_business_register03.py - 76] - 20:测试标号28，测试标题性别为空的场景的场景，执行成功
2022-03-08 19:59:52,928 - [test_business_register03.py - 76] - 20:测试标号29，测试标题性别为非枚举值的场景，执行成功
2022-03-08 19:59:53,138 - [test_business_register03.py - 76] - 20:测试标号30，测试标题性别为男+女的场景，执行成功
2022-03-08 19:59:53,445 - [test_business_register03.py - 76] - 20:测试标号31，测试标题生日为空的场景，执行成功
2022-03-08 19:59:53,724 - [test_business_register03.py - 76] - 20:测试标号32，测试标题生日为非时间格式的场景，执行成功
2022-03-08 19:59:53,929 - [test_business_register03.py - 76] - 20:测试标号33，测试标题生日为非数字，执行成功
2022-03-08 19:59:54,093 - [test_business_register03.py - 71] - 40:测试标号34，测试标题生日超出当前时间，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-08 19:59:54,093 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1010} != {'code': 1000}
  {'msg': '生日格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?            ^           ^^^^
  + {'code': 1010, 'msg': '生日格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1010} != {'code': 1000}
  {'msg': '生日格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?            ^           ^^^^
  + {'code': 1010, 'msg': '生日格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-08 19:59:54,231 - [test_business_register03.py - 71] - 40:测试标号35，测试标题生日为不合理的时间，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-08 19:59:54,232 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1010} != {'code': 1000}
  {'msg': '生日格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?            ^           ^^^^
  + {'code': 1010, 'msg': '生日格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1010} != {'code': 1000}
  {'msg': '生日格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?            ^           ^^^^
  + {'code': 1010, 'msg': '生日格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-08 19:59:54,365 - [test_business_register03.py - 76] - 20:测试标号36，测试标题qq为空的场景，执行成功
2022-03-08 19:59:54,488 - [test_business_register03.py - 76] - 20:测试标号37，测试标题qq为非数字，执行成功
2022-03-08 19:59:54,652 - [test_business_register03.py - 76] - 20:测试标号38，测试标题邮箱为空的场景，执行成功
2022-03-08 19:59:54,871 - [test_business_register03.py - 76] - 20:测试标号39，测试标题邮箱格式错误的场景，执行成功
2022-03-08 19:59:55,003 - [test_business_register03.py - 76] - 20:测试标号40，测试标题邮箱已注册的场景，执行成功
2022-03-08 20:03:23,105 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正确流程，执行成功
2022-03-08 20:03:23,233 - [test_business_register03.py - 76] - 20:测试标号2，测试标题用户名为空的场景，执行成功
2022-03-08 20:03:23,374 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 20:03:25,153 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正确流程，执行成功
2022-03-08 20:03:25,277 - [test_business_register03.py - 76] - 20:测试标号2，测试标题用户名为空的场景，执行成功
2022-03-08 20:03:25,408 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 20:03:25,544 - [test_business_register03.py - 76] - 20:测试标号4，测试标题用户名为5位无效边界值的场景，执行成功
2022-03-08 20:03:25,675 - [test_business_register03.py - 76] - 20:测试标号5，测试标题用户名为9位无效边界值的场景，执行成功
2022-03-08 20:03:25,894 - [test_business_register03.py - 76] - 20:测试标号6，测试标题用户名已存在的场景，执行成功
2022-03-08 20:03:26,041 - [test_business_register03.py - 76] - 20:测试标号7，测试标题用户名包含特殊符号的场景，执行成功
2022-03-08 20:03:26,301 - [test_business_register03.py - 76] - 20:测试标号8，测试标题用户名前包含空格的场景，执行成功
2022-03-08 20:03:26,442 - [test_business_register03.py - 76] - 20:测试标号9，测试标题用户名中包含空格的场景，执行成功
2022-03-08 20:03:26,576 - [test_business_register03.py - 76] - 20:测试标号10，测试标题用户名后包含空格的场景，执行成功
2022-03-08 20:03:26,700 - [test_business_register03.py - 76] - 20:测试标号11，测试标题用户名以非字母开头的场景，执行成功
2022-03-08 20:03:26,829 - [test_business_register03.py - 76] - 20:测试标号12，测试标题密码为空的场景，执行成功
2022-03-08 20:03:26,968 - [test_business_register03.py - 76] - 20:测试标号13，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 20:03:27,209 - [test_business_register03.py - 76] - 20:测试标号14，测试标题密码为6位无效边界值的场景，执行成功
2022-03-08 20:03:27,365 - [test_business_register03.py - 76] - 20:测试标号15，测试标题密码为12位无效边界值的场景，执行成功
2022-03-08 20:03:27,597 - [test_business_register03.py - 76] - 20:测试标号16，测试标题密码包含特殊符号的场景，执行成功
2022-03-08 20:03:27,820 - [test_business_register03.py - 71] - 40:测试标号17，测试标题密码纯字母的场景，执行失败，实际结果为{'code': 1007, 'msg': '两次密码不一致'}
2022-03-08 20:03:27,821 - [test_business_register03.py - 72] - 40:assert {'code': 1006...须为7-11位字母和数字'} == {'code': 1007...g': '两次密码不一致'}
  Differing items:
  {'code': 1006} != {'code': 1007}
  {'msg': '密码必须为7-11位字母和数字'} != {'msg': '两次密码不一致'}
  Full diff:
  - {'code': 1007, 'msg': '两次密码不一致'}
  + {'code': 1006, 'msg': '密码必须为7-11位字母和数字'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1006...须为7-11位字母和数字'} == {'code': 1007...g': '两次密码不一致'}
  Differing items:
  {'code': 1006} != {'code': 1007}
  {'msg': '密码必须为7-11位字母和数字'} != {'msg': '两次密码不一致'}
  Full diff:
  - {'code': 1007, 'msg': '两次密码不一致'}
  + {'code': 1006, 'msg': '密码必须为7-11位字母和数字'}
2022-03-08 20:03:28,034 - [test_business_register03.py - 71] - 40:测试标号18，测试标题密码纯数字的场景，执行失败，实际结果为{'code': 1007, 'msg': '两次密码不一致'}
2022-03-08 20:03:28,034 - [test_business_register03.py - 72] - 40:assert {'code': 1006...须为7-11位字母和数字'} == {'code': 1007...g': '两次密码不一致'}
  Differing items:
  {'code': 1006} != {'code': 1007}
  {'msg': '密码必须为7-11位字母和数字'} != {'msg': '两次密码不一致'}
  Full diff:
  - {'code': 1007, 'msg': '两次密码不一致'}
  + {'code': 1006, 'msg': '密码必须为7-11位字母和数字'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1006...须为7-11位字母和数字'} == {'code': 1007...g': '两次密码不一致'}
  Differing items:
  {'code': 1006} != {'code': 1007}
  {'msg': '密码必须为7-11位字母和数字'} != {'msg': '两次密码不一致'}
  Full diff:
  - {'code': 1007, 'msg': '两次密码不一致'}
  + {'code': 1006, 'msg': '密码必须为7-11位字母和数字'}
2022-03-08 20:03:28,193 - [test_business_register03.py - 76] - 20:测试标号19，测试标题密码区分大小写的场景，执行成功
2022-03-08 20:03:28,353 - [test_business_register03.py - 76] - 20:测试标号20，测试标题确认密码为空的场景，执行成功
2022-03-08 20:03:28,513 - [test_business_register03.py - 76] - 20:测试标号21，测试标题确认密码与密码不一致的场景，执行成功
2022-03-08 20:03:28,774 - [test_business_register03.py - 76] - 20:测试标号22，测试标题确认密码区分大小写的场景，执行成功
2022-03-08 20:03:29,085 - [test_business_register03.py - 76] - 20:测试标号23，测试标题手机号为空的场景，执行成功
2022-03-08 20:03:29,341 - [test_business_register03.py - 76] - 20:测试标号24，测试标题手机号为非11位数字的场景，执行成功
2022-03-08 20:03:29,479 - [test_business_register03.py - 76] - 20:测试标号25，测试标题手机号为非数字的场景，执行成功
2022-03-08 20:03:29,605 - [test_business_register03.py - 76] - 20:测试标号26，测试标题手机号为不支持的号段的场景，执行成功
2022-03-08 20:03:29,774 - [test_business_register03.py - 76] - 20:测试标号27，测试标题手机号已注册的场景，执行成功
2022-03-08 20:03:29,932 - [test_business_register03.py - 76] - 20:测试标号28，测试标题性别为空的场景的场景，执行成功
2022-03-08 20:03:30,118 - [test_business_register03.py - 76] - 20:测试标号29，测试标题性别为非枚举值的场景，执行成功
2022-03-08 20:03:30,261 - [test_business_register03.py - 76] - 20:测试标号30，测试标题性别为男+女的场景，执行成功
2022-03-08 20:03:30,394 - [test_business_register03.py - 76] - 20:测试标号31，测试标题生日为空的场景，执行成功
2022-03-08 20:03:30,554 - [test_business_register03.py - 76] - 20:测试标号32，测试标题生日为非时间格式的场景，执行成功
2022-03-08 20:03:30,683 - [test_business_register03.py - 76] - 20:测试标号33，测试标题生日为非数字，执行成功
2022-03-08 20:03:30,811 - [test_business_register03.py - 71] - 40:测试标号34，测试标题生日超出当前时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 20:03:30,811 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 20:03:30,942 - [test_business_register03.py - 71] - 40:测试标号35，测试标题生日为不合理的时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 20:03:30,942 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 20:03:31,077 - [test_business_register03.py - 76] - 20:测试标号36，测试标题qq为空的场景，执行成功
2022-03-08 20:03:31,201 - [test_business_register03.py - 76] - 20:测试标号37，测试标题qq为非数字，执行成功
2022-03-08 20:03:31,335 - [test_business_register03.py - 76] - 20:测试标号38，测试标题邮箱为空的场景，执行成功
2022-03-08 20:03:31,458 - [test_business_register03.py - 76] - 20:测试标号39，测试标题邮箱格式错误的场景，执行成功
2022-03-08 20:03:31,586 - [test_business_register03.py - 76] - 20:测试标号40，测试标题邮箱已注册的场景，执行成功
2022-03-08 20:04:29,372 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正确流程，执行成功
2022-03-08 20:04:29,551 - [test_business_register03.py - 76] - 20:测试标号2，测试标题用户名为空的场景，执行成功
2022-03-08 20:04:29,786 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 20:04:29,907 - [test_business_register03.py - 76] - 20:测试标号4，测试标题用户名为5位无效边界值的场景，执行成功
2022-03-08 20:04:30,034 - [test_business_register03.py - 76] - 20:测试标号5，测试标题用户名为9位无效边界值的场景，执行成功
2022-03-08 20:04:30,192 - [test_business_register03.py - 76] - 20:测试标号6，测试标题用户名已存在的场景，执行成功
2022-03-08 20:04:30,318 - [test_business_register03.py - 76] - 20:测试标号7，测试标题用户名包含特殊符号的场景，执行成功
2022-03-08 20:04:30,504 - [test_business_register03.py - 76] - 20:测试标号8，测试标题用户名前包含空格的场景，执行成功
2022-03-08 20:04:30,637 - [test_business_register03.py - 76] - 20:测试标号9，测试标题用户名中包含空格的场景，执行成功
2022-03-08 20:04:30,759 - [test_business_register03.py - 76] - 20:测试标号10，测试标题用户名后包含空格的场景，执行成功
2022-03-08 20:04:30,980 - [test_business_register03.py - 76] - 20:测试标号11，测试标题用户名以非字母开头的场景，执行成功
2022-03-08 20:04:31,321 - [test_business_register03.py - 76] - 20:测试标号12，测试标题密码为空的场景，执行成功
2022-03-08 20:04:31,468 - [test_business_register03.py - 76] - 20:测试标号13，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 20:04:31,594 - [test_business_register03.py - 76] - 20:测试标号14，测试标题密码为6位无效边界值的场景，执行成功
2022-03-08 20:04:31,736 - [test_business_register03.py - 76] - 20:测试标号15，测试标题密码为12位无效边界值的场景，执行成功
2022-03-08 20:04:31,861 - [test_business_register03.py - 76] - 20:测试标号16，测试标题密码包含特殊符号的场景，执行成功
2022-03-08 20:04:32,050 - [test_business_register03.py - 76] - 20:测试标号17，测试标题密码纯字母的场景，执行成功
2022-03-08 20:04:32,383 - [test_business_register03.py - 76] - 20:测试标号18，测试标题密码纯数字的场景，执行成功
2022-03-08 20:04:32,550 - [test_business_register03.py - 76] - 20:测试标号19，测试标题密码区分大小写的场景，执行成功
2022-03-08 20:04:32,679 - [test_business_register03.py - 76] - 20:测试标号20，测试标题确认密码为空的场景，执行成功
2022-03-08 20:04:32,805 - [test_business_register03.py - 76] - 20:测试标号21，测试标题确认密码与密码不一致的场景，执行成功
2022-03-08 20:04:32,928 - [test_business_register03.py - 76] - 20:测试标号22，测试标题确认密码区分大小写的场景，执行成功
2022-03-08 20:04:33,053 - [test_business_register03.py - 76] - 20:测试标号23，测试标题手机号为空的场景，执行成功
2022-03-08 20:04:33,175 - [test_business_register03.py - 76] - 20:测试标号24，测试标题手机号为非11位数字的场景，执行成功
2022-03-08 20:04:33,319 - [test_business_register03.py - 76] - 20:测试标号25，测试标题手机号为非数字的场景，执行成功
2022-03-08 20:04:33,553 - [test_business_register03.py - 76] - 20:测试标号26，测试标题手机号为不支持的号段的场景，执行成功
2022-03-08 20:04:33,693 - [test_business_register03.py - 76] - 20:测试标号27，测试标题手机号已注册的场景，执行成功
2022-03-08 20:04:33,827 - [test_business_register03.py - 76] - 20:测试标号28，测试标题性别为空的场景的场景，执行成功
2022-03-08 20:04:33,956 - [test_business_register03.py - 76] - 20:测试标号29，测试标题性别为非枚举值的场景，执行成功
2022-03-08 20:04:34,099 - [test_business_register03.py - 76] - 20:测试标号30，测试标题性别为男+女的场景，执行成功
2022-03-08 20:04:34,330 - [test_business_register03.py - 76] - 20:测试标号31，测试标题生日为空的场景，执行成功
2022-03-08 20:04:34,464 - [test_business_register03.py - 76] - 20:测试标号32，测试标题生日为非时间格式的场景，执行成功
2022-03-08 20:04:34,588 - [test_business_register03.py - 76] - 20:测试标号33，测试标题生日为非数字，执行成功
2022-03-08 20:04:34,717 - [test_business_register03.py - 71] - 40:测试标号34，测试标题生日超出当前时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 20:04:34,717 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 20:04:34,846 - [test_business_register03.py - 71] - 40:测试标号35，测试标题生日为不合理的时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 20:04:34,846 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 20:04:34,982 - [test_business_register03.py - 76] - 20:测试标号36，测试标题qq为空的场景，执行成功
2022-03-08 20:04:35,110 - [test_business_register03.py - 76] - 20:测试标号37，测试标题qq为非数字，执行成功
2022-03-08 20:04:35,252 - [test_business_register03.py - 76] - 20:测试标号38，测试标题邮箱为空的场景，执行成功
2022-03-08 20:04:35,378 - [test_business_register03.py - 76] - 20:测试标号39，测试标题邮箱格式错误的场景，执行成功
2022-03-08 20:04:35,503 - [test_business_register03.py - 76] - 20:测试标号40，测试标题邮箱已注册的场景，执行成功
2022-03-08 20:04:51,305 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正确流程，执行成功
2022-03-08 20:04:51,436 - [test_business_register03.py - 76] - 20:测试标号2，测试标题用户名为空的场景，执行成功
2022-03-08 20:04:51,591 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 20:04:51,764 - [test_business_register03.py - 76] - 20:测试标号4，测试标题用户名为5位无效边界值的场景，执行成功
2022-03-08 20:04:51,911 - [test_business_register03.py - 76] - 20:测试标号5，测试标题用户名为9位无效边界值的场景，执行成功
2022-03-08 20:04:52,044 - [test_business_register03.py - 76] - 20:测试标号6，测试标题用户名已存在的场景，执行成功
2022-03-08 20:04:52,172 - [test_business_register03.py - 76] - 20:测试标号7，测试标题用户名包含特殊符号的场景，执行成功
2022-03-08 20:04:52,299 - [test_business_register03.py - 76] - 20:测试标号8，测试标题用户名前包含空格的场景，执行成功
2022-03-08 20:04:52,427 - [test_business_register03.py - 76] - 20:测试标号9，测试标题用户名中包含空格的场景，执行成功
2022-03-08 20:04:52,555 - [test_business_register03.py - 76] - 20:测试标号10，测试标题用户名后包含空格的场景，执行成功
2022-03-08 20:04:52,705 - [test_business_register03.py - 76] - 20:测试标号11，测试标题用户名以非字母开头的场景，执行成功
2022-03-08 20:04:52,920 - [test_business_register03.py - 76] - 20:测试标号12，测试标题密码为空的场景，执行成功
2022-03-08 20:04:53,146 - [test_business_register03.py - 76] - 20:测试标号13，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 20:04:53,277 - [test_business_register03.py - 76] - 20:测试标号14，测试标题密码为6位无效边界值的场景，执行成功
2022-03-08 20:04:53,443 - [test_business_register03.py - 76] - 20:测试标号15，测试标题密码为12位无效边界值的场景，执行成功
2022-03-08 20:04:53,639 - [test_business_register03.py - 76] - 20:测试标号16，测试标题密码包含特殊符号的场景，执行成功
2022-03-08 20:04:53,769 - [test_business_register03.py - 76] - 20:测试标号17，测试标题密码纯字母的场景，执行成功
2022-03-08 20:04:53,896 - [test_business_register03.py - 76] - 20:测试标号18，测试标题密码纯数字的场景，执行成功
2022-03-08 20:04:54,023 - [test_business_register03.py - 76] - 20:测试标号19，测试标题密码区分大小写的场景，执行成功
2022-03-08 20:04:54,149 - [test_business_register03.py - 76] - 20:测试标号20，测试标题确认密码为空的场景，执行成功
2022-03-08 20:04:54,277 - [test_business_register03.py - 76] - 20:测试标号21，测试标题确认密码与密码不一致的场景，执行成功
2022-03-08 20:04:54,408 - [test_business_register03.py - 76] - 20:测试标号22，测试标题确认密码区分大小写的场景，执行成功
2022-03-08 20:04:54,539 - [test_business_register03.py - 76] - 20:测试标号23，测试标题手机号为空的场景，执行成功
2022-03-08 20:04:54,705 - [test_business_register03.py - 76] - 20:测试标号24，测试标题手机号为非11位数字的场景，执行成功
2022-03-08 20:04:54,835 - [test_business_register03.py - 76] - 20:测试标号25，测试标题手机号为非数字的场景，执行成功
2022-03-08 20:04:54,961 - [test_business_register03.py - 76] - 20:测试标号26，测试标题手机号为不支持的号段的场景，执行成功
2022-03-08 20:04:55,091 - [test_business_register03.py - 76] - 20:测试标号27，测试标题手机号已注册的场景，执行成功
2022-03-08 20:04:55,251 - [test_business_register03.py - 76] - 20:测试标号28，测试标题性别为空的场景的场景，执行成功
2022-03-08 20:04:55,379 - [test_business_register03.py - 76] - 20:测试标号29，测试标题性别为非枚举值的场景，执行成功
2022-03-08 20:04:55,507 - [test_business_register03.py - 76] - 20:测试标号30，测试标题性别为男+女的场景，执行成功
2022-03-08 20:04:55,645 - [test_business_register03.py - 76] - 20:测试标号31，测试标题生日为空的场景，执行成功
2022-03-08 20:04:55,778 - [test_business_register03.py - 76] - 20:测试标号32，测试标题生日为非时间格式的场景，执行成功
2022-03-08 20:04:55,904 - [test_business_register03.py - 76] - 20:测试标号33，测试标题生日为非数字，执行成功
2022-03-08 20:04:56,066 - [test_business_register03.py - 71] - 40:测试标号34，测试标题生日超出当前时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 20:04:56,066 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 20:04:56,338 - [test_business_register03.py - 71] - 40:测试标号35，测试标题生日为不合理的时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 20:04:56,338 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 20:04:56,476 - [test_business_register03.py - 76] - 20:测试标号36，测试标题qq为空的场景，执行成功
2022-03-08 20:04:56,607 - [test_business_register03.py - 76] - 20:测试标号37，测试标题qq为非数字，执行成功
2022-03-08 20:04:56,743 - [test_business_register03.py - 76] - 20:测试标号38，测试标题邮箱为空的场景，执行成功
2022-03-08 20:04:56,899 - [test_business_register03.py - 76] - 20:测试标号39，测试标题邮箱格式错误的场景，执行成功
2022-03-08 20:04:57,032 - [test_business_register03.py - 76] - 20:测试标号40，测试标题邮箱已注册的场景，执行成功
2022-03-08 20:04:57,175 - [test_business_token_goods_input01.py - 79] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-08 20:04:57,306 - [test_business_token_goods_input01.py - 79] - 20:测试编号2，测试标题测试商品信息录入—token为空，执行成功
2022-03-08 20:04:57,449 - [test_business_token_goods_input01.py - 79] - 20:测试编号3，测试标题测试商品信息录入——token区分大小写，执行成功
2022-03-08 20:04:57,601 - [test_business_token_goods_input01.py - 74] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 1000, 'msg': '商品录入成功'}
2022-03-08 20:04:57,602 - [test_business_token_goods_input01.py - 75] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 1000...sg': '商品录入成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '商品录入成功'}
  {'code': 1011} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '商品录入成功'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 67, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 1000...sg': '商品录入成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '商品录入成功'}
  {'code': 1011} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '商品录入成功'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-08 20:04:57,741 - [test_business_token_goods_input01.py - 79] - 20:测试编号5，测试标题测试商品名为空的场景，执行成功
2022-03-08 20:04:57,880 - [test_business_token_goods_input01.py - 79] - 20:测试编号6，测试标题测试商品名有效边界的场景，执行成功
2022-03-08 20:04:58,018 - [test_business_token_goods_input01.py - 79] - 20:测试编号7，测试标题测试商品名无效边界的场景，执行成功
2022-03-08 20:04:58,159 - [test_business_token_goods_input01.py - 79] - 20:测试编号8，测试标题测试商品名已存在的场景，执行成功
2022-03-08 20:04:58,300 - [test_business_token_goods_input01.py - 79] - 20:测试编号9，测试标题测试商品分类id为空，执行成功
2022-03-08 20:04:58,495 - [test_business_token_goods_input01.py - 79] - 20:测试编号10，测试标题测试商品分类id不存在，执行成功
2022-03-08 20:04:58,656 - [test_business_token_goods_input01.py - 79] - 20:测试编号11，测试标题测试商品描述为空，执行成功
2022-03-08 20:04:58,799 - [test_business_token_goods_input01.py - 79] - 20:测试编号12，测试标题测试商品描述有效边界，执行成功
2022-03-08 20:04:58,952 - [test_business_token_goods_input01.py - 79] - 20:测试编号13，测试标题测试商品描述无效边界，执行成功
2022-03-08 20:04:59,089 - [test_business_token_goods_input01.py - 79] - 20:测试编号14，测试标题测试商品库存为空，执行成功
2022-03-08 20:04:59,230 - [test_business_token_goods_input01.py - 79] - 20:测试编号15，测试标题测试商品库存最大整数，执行成功
2022-03-08 20:04:59,369 - [test_business_token_goods_input01.py - 79] - 20:测试编号16，测试标题测试商品库存为小数，执行成功
2022-03-08 20:04:59,510 - [test_business_token_goods_input01.py - 79] - 20:测试编号17，测试标题测试商品库存为负数，执行成功
2022-03-08 20:04:59,670 - [test_business_token_goods_input01.py - 79] - 20:测试编号18，测试标题测试商品库存为字符，执行成功
2022-03-08 20:04:59,803 - [test_business_token_goods_input01.py - 79] - 20:测试编号19，测试标题测试商品价格为空，执行成功
2022-03-08 20:04:59,943 - [test_business_token_goods_input01.py - 79] - 20:测试编号20，测试标题测试商品价格有效数字：最大值边界，执行成功
2022-03-08 20:05:00,103 - [test_business_token_goods_input01.py - 79] - 20:测试编号21，测试标题测试商品价格非两位小数的数字，执行成功
2022-03-08 20:05:00,242 - [test_business_token_goods_input01.py - 79] - 20:测试编号22，测试标题测试商品价格超过最大值，执行成功
2022-03-08 20:05:00,376 - [test_business_token_goods_input01.py - 79] - 20:测试编号23，测试标题测试商品价格为整数，执行成功
2022-03-08 20:05:00,516 - [test_business_token_goods_input01.py - 79] - 20:测试编号24，测试标题测试商品价格为0，执行成功
2022-03-08 20:05:00,665 - [test_business_token_goods_promote01.py - 70] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 20:05:00,806 - [test_business_token_goods_promote01.py - 70] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 20:05:00,942 - [test_business_token_goods_promote01.py - 70] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 20:05:01,081 - [test_business_token_goods_promote01.py - 70] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 20:05:01,216 - [test_business_token_goods_promote01.py - 70] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 20:05:01,382 - [test_business_token_goods_promote01.py - 70] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 20:05:01,526 - [test_business_token_goods_promote01.py - 70] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 20:05:01,686 - [test_business_token_goods_promote01.py - 70] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 20:05:01,824 - [test_business_token_goods_promote01.py - 70] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 20:05:01,965 - [test_business_token_goods_promote01.py - 70] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 20:05:02,104 - [test_business_token_goods_promote01.py - 70] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 20:05:02,240 - [test_business_token_goods_promote01.py - 70] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 20:05:02,396 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号1，测试标题商品信息查询主流程，执行成功
2022-03-08 20:05:02,527 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号2，测试标题商品信息查询—token为空，执行成功
2022-03-08 20:05:02,674 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号3，测试标题商品信息查询—token区分大小写，执行成功
2022-03-08 20:05:02,827 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号4，测试标题商品信息查询—上一次token值，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 1.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '西瓜', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': 'aaaaaaaa', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '精华面霜', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '如如如如', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': 'aaa', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '小白瓶', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '小红瓶', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '美容仪', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 99999999}, {'goodsName': '防晒二代', 'shopPrice': 99999999.99, 'promotePrice': 0.0, 'num': 200}]}
2022-03-08 20:05:02,828 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (143 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (143 lines hidden), use '-vv' to show
2022-03-08 20:05:02,965 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号5，测试标题商品信息查询—（不带商品）销售状态为0，执行成功
2022-03-08 20:05:03,104 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号6，测试标题商品信息查询—（不带商品）销售状态为1，执行成功
2022-03-08 20:05:03,289 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号7，测试标题商品信息查询—（不带商品）促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-08 20:05:03,289 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000018F821FB278>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 72, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000018F821FB278>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-08 20:05:03,437 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号8，测试标题商品信息查询—（不带商品）促销状态为1，执行成功
2022-03-08 20:05:03,570 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号9，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-08 20:05:03,571 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000018F821FB4A8>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 79, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000018F821FB4A8>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-08 20:05:03,711 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号10，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为1，执行成功
2022-03-08 20:05:03,847 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号11，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-08 20:05:03,847 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000018F821FBB38>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 79, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000018F821FBB38>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-08 20:05:03,986 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号12，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为1，执行成功
2022-03-08 20:05:04,121 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号13，测试标题商品信息查询—（带商品）销售状态为0，执行成功
2022-03-08 20:05:04,257 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号14，测试标题商品信息查询—（带商品）销售状态为1，执行成功
2022-03-08 20:05:04,396 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号15，测试标题商品信息查询—（带商品）促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-08 20:05:04,397 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000018F821FB6A0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000018F821FB6A0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-08 20:05:04,538 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号16，测试标题商品信息查询—（带商品）促销状态为1，执行成功
2022-03-08 20:05:04,676 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号17，测试标题商品信息查询—（带商品）销售状态为0、促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-08 20:05:04,676 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000018F821FB5C0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000018F821FB5C0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-08 20:05:04,837 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号18，测试标题商品信息查询—（带商品）销售状态为0、促销状态为1，执行成功
2022-03-08 20:05:05,024 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号19，测试标题商品信息查询—（带商品）销售状态为1、促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-08 20:05:05,024 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000018F821FBB70>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000018F821FBB70>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-08 20:05:05,213 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号20，测试标题商品信息查询—（带商品）销售状态为1、促销状态为1，执行成功
2022-03-08 20:05:05,350 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号21，测试标题商品信息查询—销售状态为非枚举，执行成功
2022-03-08 20:05:05,484 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号22，测试标题商品信息查询—促销状态为非枚举，执行成功
2022-03-08 20:05:05,633 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号23，测试标题商品信息查询—存在的商品编号（6位数字），执行成功
2022-03-08 20:05:05,771 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号24，测试标题商品信息查询—商品编号非6位数字，执行成功
2022-03-08 20:05:05,907 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号25，测试标题商品信息查询—不存在的商品编号（6位数字），执行成功
2022-03-08 20:05:06,039 - [test_login05.py - 80] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-08 20:05:06,228 - [test_login05.py - 80] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-08 20:05:06,360 - [test_login05.py - 80] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-08 20:05:06,528 - [test_login05.py - 80] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-08 20:05:06,658 - [test_login05.py - 75] - 40:测试编号5，测试标题测试密码区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0Njc3MTEwNi41NDA3Mjc0Ojc2MjVlNDlmZTU1MWIwMDg5MzRjMTNhZWQ5ZjM5YWYzYTU2MGNhNjU='}
2022-03-08 20:05:06,658 - [test_login05.py - 76] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YTU2MGNhNjU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0Njc3MTEwNi41NDA3Mjc0Ojc2MjVlNDlmZTU1MWIwMDg5MzRjMTNhZWQ5ZjM5YWYzYTU2MGNhNjU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login05.py", line 72, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YTU2MGNhNjU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0Njc3MTEwNi41NDA3Mjc0Ojc2MjVlNDlmZTU1MWIwMDg5MzRjMTNhZWQ5ZjM5YWYzYTU2MGNhNjU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-08 20:05:06,795 - [test_login05.py - 75] - 40:测试编号6，测试标题测试用户名区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0Njc3MTEwNi42NzMzNzI1OmZmNjUwMWMzYmEyZmZlNDBiNDVkNTMyMGNhYjg0ZGMxMDVmNjdiMjY='}
2022-03-08 20:05:06,795 - [test_login05.py - 76] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MDVmNjdiMjY='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0Njc3MTEwNi42NzMzNzI1OmZmNjUwMWMzYmEyZmZlNDBiNDVkNTMyMGNhYjg0ZGMxMDVmNjdiMjY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login05.py", line 72, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MDVmNjdiMjY='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0Njc3MTEwNi42NzMzNzI1OmZmNjUwMWMzYmEyZmZlNDBiNDVkNTMyMGNhYjg0ZGMxMDVmNjdiMjY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-08 20:05:06,930 - [test_login05.py - 80] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-08 20:05:07,063 - [test_login05.py - 80] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-08 20:05:07,194 - [test_login05.py - 80] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-08 20:05:07,323 - [test_login05.py - 80] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-08 20:05:07,464 - [test_business_token_order_items01.py - 79] - 20:测试编号1，测试标题订单信息查询主流程，测试成功
2022-03-08 20:05:07,610 - [test_business_token_order_items01.py - 79] - 20:测试编号2，测试标题订单信息查询—token为空，测试成功
2022-03-08 20:05:07,783 - [test_business_token_order_items01.py - 79] - 20:测试编号3，测试标题订单信息查询—token区分大小写，测试成功
2022-03-08 20:05:07,958 - [test_business_token_order_items01.py - 74] - 40:测试编号4，测试标题订单信息查询——上一次token值，测试失败，实际结果{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15888888888', 'status': '未支付', 'value': 100.0, 'goods_tiems': [{'goods_name': '预留数据', 'goods_price': 100.0}]}
2022-03-08 20:05:07,958 - [test_business_token_order_items01.py - 75] - 40:assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1004} != {'code': 1000}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '预留数据', 'goods_price': 100.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_order_items05\test_business_token_order_items01.py", line 71, in test_order_items
    assert eval(case.expect) == res
AssertionError: assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1004} != {'code': 1000}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '预留数据', 'goods_price': 100.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
2022-03-08 20:05:08,133 - [test_business_token_order_items01.py - 79] - 20:测试编号5，测试标题订单信息查询订单编号为空，测试成功
2022-03-08 20:05:08,277 - [test_business_token_order_items01.py - 79] - 20:测试编号6，测试标题订单信息查询订单编号错误，测试成功
2022-03-08 20:05:08,413 - [test_business_token_order_items01.py - 79] - 20:测试编号7，测试标题订单信息查询订单编号不存在，测试成功
2022-03-08 20:06:56,435 - [test_business_token_goods_promote01.py - 70] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 20:06:56,573 - [test_business_token_goods_promote01.py - 70] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 20:06:56,708 - [test_business_token_goods_promote01.py - 70] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 20:06:56,842 - [test_business_token_goods_promote01.py - 70] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 20:06:56,976 - [test_business_token_goods_promote01.py - 70] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 20:06:57,115 - [test_business_token_goods_promote01.py - 70] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 20:06:57,318 - [test_business_token_goods_promote01.py - 70] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 20:06:57,535 - [test_business_token_goods_promote01.py - 70] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 20:06:57,675 - [test_business_token_goods_promote01.py - 70] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 20:06:57,807 - [test_business_token_goods_promote01.py - 70] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 20:06:57,942 - [test_business_token_goods_promote01.py - 70] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 20:06:58,074 - [test_business_token_goods_promote01.py - 70] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 20:07:31,984 - [test_business_token_goods_promote01.py - 70] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 20:07:32,202 - [test_business_token_goods_promote01.py - 70] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 20:07:32,385 - [test_business_token_goods_promote01.py - 70] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 20:07:32,515 - [test_business_token_goods_promote01.py - 70] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 20:07:32,652 - [test_business_token_goods_promote01.py - 70] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 20:07:32,792 - [test_business_token_goods_promote01.py - 70] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 20:07:32,924 - [test_business_token_goods_promote01.py - 70] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 20:07:33,198 - [test_business_token_goods_promote01.py - 70] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 20:07:33,334 - [test_business_token_goods_promote01.py - 70] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 20:07:33,466 - [test_business_token_goods_promote01.py - 70] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 20:07:33,714 - [test_business_token_goods_promote01.py - 70] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 20:07:33,866 - [test_business_token_goods_promote01.py - 70] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 20:07:34,005 - [test_business_token_goods_promote01.py - 70] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-08 20:08:28,763 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正确流程，执行成功
2022-03-08 20:08:28,933 - [test_business_register03.py - 76] - 20:测试标号2，测试标题用户名为空的场景，执行成功
2022-03-08 20:08:29,117 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 20:08:29,429 - [test_business_register03.py - 76] - 20:测试标号4，测试标题用户名为5位无效边界值的场景，执行成功
2022-03-08 20:08:29,700 - [test_business_register03.py - 76] - 20:测试标号5，测试标题用户名为9位无效边界值的场景，执行成功
2022-03-08 20:08:29,896 - [test_business_register03.py - 76] - 20:测试标号6，测试标题用户名已存在的场景，执行成功
2022-03-08 20:08:30,032 - [test_business_register03.py - 76] - 20:测试标号7，测试标题用户名包含特殊符号的场景，执行成功
2022-03-08 20:08:30,164 - [test_business_register03.py - 76] - 20:测试标号8，测试标题用户名前包含空格的场景，执行成功
2022-03-08 20:08:30,299 - [test_business_register03.py - 76] - 20:测试标号9，测试标题用户名中包含空格的场景，执行成功
2022-03-08 20:08:30,551 - [test_business_register03.py - 76] - 20:测试标号10，测试标题用户名后包含空格的场景，执行成功
2022-03-08 20:08:30,679 - [test_business_register03.py - 76] - 20:测试标号11，测试标题用户名以非字母开头的场景，执行成功
2022-03-08 20:08:30,810 - [test_business_register03.py - 76] - 20:测试标号12，测试标题密码为空的场景，执行成功
2022-03-08 20:08:30,983 - [test_business_register03.py - 76] - 20:测试标号13，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 20:08:31,133 - [test_business_register03.py - 76] - 20:测试标号14，测试标题密码为6位无效边界值的场景，执行成功
2022-03-08 20:08:31,269 - [test_business_register03.py - 76] - 20:测试标号15，测试标题密码为12位无效边界值的场景，执行成功
2022-03-08 20:08:31,423 - [test_business_register03.py - 76] - 20:测试标号16，测试标题密码包含特殊符号的场景，执行成功
2022-03-08 20:08:31,552 - [test_business_register03.py - 76] - 20:测试标号17，测试标题密码纯字母的场景，执行成功
2022-03-08 20:08:31,775 - [test_business_register03.py - 76] - 20:测试标号18，测试标题密码纯数字的场景，执行成功
2022-03-08 20:08:31,997 - [test_business_register03.py - 76] - 20:测试标号19，测试标题密码区分大小写的场景，执行成功
2022-03-08 20:08:32,353 - [test_business_register03.py - 76] - 20:测试标号20，测试标题确认密码为空的场景，执行成功
2022-03-08 20:08:32,492 - [test_business_register03.py - 76] - 20:测试标号21，测试标题确认密码与密码不一致的场景，执行成功
2022-03-08 20:08:32,622 - [test_business_register03.py - 76] - 20:测试标号22，测试标题确认密码区分大小写的场景，执行成功
2022-03-08 20:08:32,810 - [test_business_register03.py - 76] - 20:测试标号23，测试标题手机号为空的场景，执行成功
2022-03-08 20:08:33,090 - [test_business_register03.py - 76] - 20:测试标号24，测试标题手机号为非11位数字的场景，执行成功
2022-03-08 20:08:33,221 - [test_business_register03.py - 76] - 20:测试标号25，测试标题手机号为非数字的场景，执行成功
2022-03-08 20:08:33,350 - [test_business_register03.py - 76] - 20:测试标号26，测试标题手机号为不支持的号段的场景，执行成功
2022-03-08 20:08:33,527 - [test_business_register03.py - 76] - 20:测试标号27，测试标题手机号已注册的场景，执行成功
2022-03-08 20:08:33,735 - [test_business_register03.py - 76] - 20:测试标号28，测试标题性别为空的场景的场景，执行成功
2022-03-08 20:08:33,866 - [test_business_register03.py - 76] - 20:测试标号29，测试标题性别为非枚举值的场景，执行成功
2022-03-08 20:08:33,995 - [test_business_register03.py - 76] - 20:测试标号30，测试标题性别为男+女的场景，执行成功
2022-03-08 20:08:34,131 - [test_business_register03.py - 76] - 20:测试标号31，测试标题生日为空的场景，执行成功
2022-03-08 20:08:34,346 - [test_business_register03.py - 76] - 20:测试标号32，测试标题生日为非时间格式的场景，执行成功
2022-03-08 20:08:34,502 - [test_business_register03.py - 76] - 20:测试标号33，测试标题生日为非数字，执行成功
2022-03-08 20:08:34,769 - [test_business_register03.py - 71] - 40:测试标号34，测试标题生日超出当前时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 20:08:34,769 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 20:08:34,974 - [test_business_register03.py - 71] - 40:测试标号35，测试标题生日为不合理的时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 20:08:34,974 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 20:08:35,122 - [test_business_register03.py - 76] - 20:测试标号36，测试标题qq为空的场景，执行成功
2022-03-08 20:08:35,249 - [test_business_register03.py - 76] - 20:测试标号37，测试标题qq为非数字，执行成功
2022-03-08 20:08:35,388 - [test_business_register03.py - 76] - 20:测试标号38，测试标题邮箱为空的场景，执行成功
2022-03-08 20:08:35,540 - [test_business_register03.py - 76] - 20:测试标号39，测试标题邮箱格式错误的场景，执行成功
2022-03-08 20:08:35,722 - [test_business_register03.py - 76] - 20:测试标号40，测试标题邮箱已注册的场景，执行成功
2022-03-08 20:08:35,917 - [test_business_token_goods_input01.py - 79] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-08 20:08:36,048 - [test_business_token_goods_input01.py - 79] - 20:测试编号2，测试标题测试商品信息录入—token为空，执行成功
2022-03-08 20:08:36,200 - [test_business_token_goods_input01.py - 79] - 20:测试编号3，测试标题测试商品信息录入——token区分大小写，执行成功
2022-03-08 20:08:36,360 - [test_business_token_goods_input01.py - 74] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 1013, 'msg': '产品名称不能重复'}
2022-03-08 20:08:36,360 - [test_business_token_goods_input01.py - 75] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'code': 1011} != {'code': 1013}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 67, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'code': 1011} != {'code': 1013}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-08 20:08:36,501 - [test_business_token_goods_input01.py - 79] - 20:测试编号5，测试标题测试商品名为空的场景，执行成功
2022-03-08 20:08:36,652 - [test_business_token_goods_input01.py - 79] - 20:测试编号6，测试标题测试商品名有效边界的场景，执行成功
2022-03-08 20:08:36,793 - [test_business_token_goods_input01.py - 79] - 20:测试编号7，测试标题测试商品名无效边界的场景，执行成功
2022-03-08 20:08:36,938 - [test_business_token_goods_input01.py - 79] - 20:测试编号8，测试标题测试商品名已存在的场景，执行成功
2022-03-08 20:08:37,076 - [test_business_token_goods_input01.py - 79] - 20:测试编号9，测试标题测试商品分类id为空，执行成功
2022-03-08 20:08:37,286 - [test_business_token_goods_input01.py - 79] - 20:测试编号10，测试标题测试商品分类id不存在，执行成功
2022-03-08 20:08:37,439 - [test_business_token_goods_input01.py - 79] - 20:测试编号11，测试标题测试商品描述为空，执行成功
2022-03-08 20:08:37,596 - [test_business_token_goods_input01.py - 79] - 20:测试编号12，测试标题测试商品描述有效边界，执行成功
2022-03-08 20:08:37,779 - [test_business_token_goods_input01.py - 79] - 20:测试编号13，测试标题测试商品描述无效边界，执行成功
2022-03-08 20:08:37,960 - [test_business_token_goods_input01.py - 79] - 20:测试编号14，测试标题测试商品库存为空，执行成功
2022-03-08 20:08:38,109 - [test_business_token_goods_input01.py - 79] - 20:测试编号15，测试标题测试商品库存最大整数，执行成功
2022-03-08 20:08:38,371 - [test_business_token_goods_input01.py - 79] - 20:测试编号16，测试标题测试商品库存为小数，执行成功
2022-03-08 20:08:38,553 - [test_business_token_goods_input01.py - 79] - 20:测试编号17，测试标题测试商品库存为负数，执行成功
2022-03-08 20:08:38,705 - [test_business_token_goods_input01.py - 79] - 20:测试编号18，测试标题测试商品库存为字符，执行成功
2022-03-08 20:08:38,854 - [test_business_token_goods_input01.py - 79] - 20:测试编号19，测试标题测试商品价格为空，执行成功
2022-03-08 20:08:38,999 - [test_business_token_goods_input01.py - 79] - 20:测试编号20，测试标题测试商品价格有效数字：最大值边界，执行成功
2022-03-08 20:08:39,178 - [test_business_token_goods_input01.py - 79] - 20:测试编号21，测试标题测试商品价格非两位小数的数字，执行成功
2022-03-08 20:08:39,359 - [test_business_token_goods_input01.py - 79] - 20:测试编号22，测试标题测试商品价格超过最大值，执行成功
2022-03-08 20:08:39,540 - [test_business_token_goods_input01.py - 79] - 20:测试编号23，测试标题测试商品价格为整数，执行成功
2022-03-08 20:08:39,674 - [test_business_token_goods_input01.py - 79] - 20:测试编号24，测试标题测试商品价格为0，执行成功
2022-03-08 20:08:39,828 - [test_business_token_goods_promote01.py - 70] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 20:08:39,970 - [test_business_token_goods_promote01.py - 70] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 20:08:40,112 - [test_business_token_goods_promote01.py - 70] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 20:08:40,249 - [test_business_token_goods_promote01.py - 70] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 20:08:40,390 - [test_business_token_goods_promote01.py - 70] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 20:08:40,530 - [test_business_token_goods_promote01.py - 70] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 20:08:40,722 - [test_business_token_goods_promote01.py - 70] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 20:08:41,002 - [test_business_token_goods_promote01.py - 70] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 20:08:41,155 - [test_business_token_goods_promote01.py - 70] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 20:08:41,298 - [test_business_token_goods_promote01.py - 70] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 20:08:41,438 - [test_business_token_goods_promote01.py - 70] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 20:08:41,611 - [test_business_token_goods_promote01.py - 70] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 20:08:41,756 - [test_business_token_goods_promote01.py - 70] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-08 20:08:41,896 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号1，测试标题商品信息查询主流程，执行成功
2022-03-08 20:08:42,024 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号2，测试标题商品信息查询—token为空，执行成功
2022-03-08 20:08:42,185 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号3，测试标题商品信息查询—token区分大小写，执行成功
2022-03-08 20:08:42,344 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号4，测试标题商品信息查询—上一次token值，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 1.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '西瓜', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': 'aaaaaaaa', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '如如如如', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '精华面霜', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': 'aaa', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '小白瓶', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '小红瓶', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '美容仪', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 99999999}, {'goodsName': '防晒二代', 'shopPrice': 99999999.99, 'promotePrice': 0.0, 'num': 200}]}
2022-03-08 20:08:42,344 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (143 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (143 lines hidden), use '-vv' to show
2022-03-08 20:08:42,499 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号5，测试标题商品信息查询—（不带商品）销售状态为0，执行成功
2022-03-08 20:08:42,668 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号6，测试标题商品信息查询—（不带商品）销售状态为1，执行成功
2022-03-08 20:08:42,811 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号7，测试标题商品信息查询—（不带商品）促销状态为0，执行成功
2022-03-08 20:08:42,947 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号8，测试标题商品信息查询—（不带商品）促销状态为1，执行成功
2022-03-08 20:08:43,330 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号9，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为0，执行成功
2022-03-08 20:08:43,476 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号10，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为1，执行成功
2022-03-08 20:08:43,624 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号11，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为0，执行成功
2022-03-08 20:08:43,771 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号12，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为1，执行成功
2022-03-08 20:08:43,923 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号13，测试标题商品信息查询—（带商品）销售状态为0，执行成功
2022-03-08 20:08:44,058 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号14，测试标题商品信息查询—（带商品）销售状态为1，执行成功
2022-03-08 20:08:44,194 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号15，测试标题商品信息查询—（带商品）促销状态为0，执行成功
2022-03-08 20:08:44,336 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号16，测试标题商品信息查询—（带商品）促销状态为1，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-08 20:08:44,336 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000017412B98FD0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000017412B98FD0>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-08 20:08:44,546 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号17，测试标题商品信息查询—（带商品）销售状态为0、促销状态为0，执行成功
2022-03-08 20:08:44,727 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号18，测试标题商品信息查询—（带商品）销售状态为0、促销状态为1，执行成功
2022-03-08 20:08:44,875 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号19，测试标题商品信息查询—（带商品）销售状态为1、促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-08 20:08:44,876 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000017412B98128>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000017412B98128>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-08 20:08:45,021 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号20，测试标题商品信息查询—（带商品）销售状态为1、促销状态为1，执行成功
2022-03-08 20:08:45,163 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号21，测试标题商品信息查询—销售状态为非枚举，执行成功
2022-03-08 20:08:45,302 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号22，测试标题商品信息查询—促销状态为非枚举，执行成功
2022-03-08 20:08:45,440 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号23，测试标题商品信息查询—存在的商品编号（6位数字），执行成功
2022-03-08 20:08:45,647 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号24，测试标题商品信息查询—商品编号非6位数字，执行成功
2022-03-08 20:08:45,805 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号25，测试标题商品信息查询—不存在的商品编号（6位数字），执行成功
2022-03-08 20:08:45,977 - [test_login05.py - 80] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-08 20:08:46,105 - [test_login05.py - 80] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-08 20:08:46,264 - [test_login05.py - 80] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-08 20:08:46,417 - [test_login05.py - 80] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-08 20:08:46,551 - [test_login05.py - 75] - 40:测试编号5，测试标题测试密码区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0Njc3MTMyNi40MzA4NzM2OjU0YzlmYTg5NzU1MjVjMGM3ZDMzMTY4YzcxYzVkZmFlZDc5M2FjMjM='}
2022-03-08 20:08:46,551 - [test_login05.py - 76] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZDc5M2FjMjM='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0Njc3MTMyNi40MzA4NzM2OjU0YzlmYTg5NzU1MjVjMGM3ZDMzMTY4YzcxYzVkZmFlZDc5M2FjMjM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login05.py", line 72, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZDc5M2FjMjM='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0Njc3MTMyNi40MzA4NzM2OjU0YzlmYTg5NzU1MjVjMGM3ZDMzMTY4YzcxYzVkZmFlZDc5M2FjMjM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-08 20:08:46,685 - [test_login05.py - 75] - 40:测试编号6，测试标题测试用户名区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0Njc3MTMyNi41NjY1MTE6ZDEwYjQ3M2RkNDhhY2YzNzEwMzNhYWNiOWRjMzhkYjk3YzI1MWE3YQ=='}
2022-03-08 20:08:46,685 - [test_login05.py - 76] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YzI1MWE3YQ=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0Njc3MTMyNi41NjY1MTE6ZDEwYjQ3M2RkNDhhY2YzNzEwMzNhYWNiOWRjMzhkYjk3YzI1MWE3YQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login05.py", line 72, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YzI1MWE3YQ=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0Njc3MTMyNi41NjY1MTE6ZDEwYjQ3M2RkNDhhY2YzNzEwMzNhYWNiOWRjMzhkYjk3YzI1MWE3YQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-08 20:08:46,819 - [test_login05.py - 80] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-08 20:08:46,964 - [test_login05.py - 80] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-08 20:08:47,157 - [test_login05.py - 80] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-08 20:08:47,493 - [test_login05.py - 80] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-08 20:08:47,648 - [test_business_token_order_items01.py - 79] - 20:测试编号1，测试标题订单信息查询主流程，测试成功
2022-03-08 20:08:47,784 - [test_business_token_order_items01.py - 79] - 20:测试编号2，测试标题订单信息查询—token为空，测试成功
2022-03-08 20:08:47,928 - [test_business_token_order_items01.py - 79] - 20:测试编号3，测试标题订单信息查询—token区分大小写，测试成功
2022-03-08 20:08:48,161 - [test_business_token_order_items01.py - 74] - 40:测试编号4，测试标题订单信息查询——上一次token值，测试失败，实际结果{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15888888888', 'status': '未支付', 'value': 100.0, 'goods_tiems': [{'goods_name': '预留数据', 'goods_price': 100.0}]}
2022-03-08 20:08:48,161 - [test_business_token_order_items01.py - 75] - 40:assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'code': 1004} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '预留数据', 'goods_price': 100.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_order_items05\test_business_token_order_items01.py", line 71, in test_order_items
    assert eval(case.expect) == res
AssertionError: assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'code': 1004} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '预留数据', 'goods_price': 100.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
2022-03-08 20:08:48,311 - [test_business_token_order_items01.py - 79] - 20:测试编号5，测试标题订单信息查询订单编号为空，测试成功
2022-03-08 20:08:48,456 - [test_business_token_order_items01.py - 79] - 20:测试编号6，测试标题订单信息查询订单编号错误，测试成功
2022-03-08 20:08:48,604 - [test_business_token_order_items01.py - 79] - 20:测试编号7，测试标题订单信息查询订单编号不存在，测试成功
2022-03-08 20:09:53,727 - [test_business_token_goods_promote01.py - 70] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 20:09:53,861 - [test_business_token_goods_promote01.py - 70] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 20:09:53,994 - [test_business_token_goods_promote01.py - 70] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 20:09:54,128 - [test_business_token_goods_promote01.py - 70] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 20:09:54,265 - [test_business_token_goods_promote01.py - 70] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 20:09:54,406 - [test_business_token_goods_promote01.py - 70] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 20:09:54,547 - [test_business_token_goods_promote01.py - 70] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 20:09:54,771 - [test_business_token_goods_promote01.py - 70] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 20:09:55,020 - [test_business_token_goods_promote01.py - 70] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 20:09:55,206 - [test_business_token_goods_promote01.py - 70] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 20:09:55,344 - [test_business_token_goods_promote01.py - 70] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 20:09:55,487 - [test_business_token_goods_promote01.py - 70] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 20:09:55,631 - [test_business_token_goods_promote01.py - 70] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-08 20:10:10,728 - [test_business_token_goods_promote01.py - 70] - 20:测试编号1,测试标题正常流程,执行成功
2022-03-08 20:10:10,861 - [test_business_token_goods_promote01.py - 70] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-08 20:10:10,997 - [test_business_token_goods_promote01.py - 70] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-08 20:10:11,132 - [test_business_token_goods_promote01.py - 70] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-08 20:10:11,267 - [test_business_token_goods_promote01.py - 70] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-08 20:10:11,400 - [test_business_token_goods_promote01.py - 70] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-08 20:10:11,531 - [test_business_token_goods_promote01.py - 70] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-08 20:10:11,686 - [test_business_token_goods_promote01.py - 70] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-08 20:10:11,820 - [test_business_token_goods_promote01.py - 70] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-08 20:10:11,979 - [test_business_token_goods_promote01.py - 70] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-08 20:10:12,141 - [test_business_token_goods_promote01.py - 70] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-08 20:10:12,275 - [test_business_token_goods_promote01.py - 70] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-08 20:10:12,430 - [test_business_token_goods_promote01.py - 70] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-08 20:56:54,648 - [test_business_regist_json01.py - 32] - 40:测试编号1，测试标题正常流程,执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 20:56:54,649 - [test_business_regist_json01.py - 33] - 40:assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_regist_json09\test_business_regist_json01.py", line 29, in test_regist_json
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000, 'msg': '注册成功'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1000} != {'code': 1013}
  {'msg': '注册成功'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1000, 'msg': '注册成功'}
2022-03-08 20:57:08,176 - [test_business_regist_json01.py - 37] - 20:测试编号1，测试标题正常流程,执行成功
2022-03-08 21:09:13,385 - [test_business_regist_json01.py - 50] - 20:测试编号1，测试标题正常流程,执行成功
2022-03-08 21:09:39,588 - [test_business_regist_json01.py - 50] - 20:测试编号1，测试标题正常流程,执行成功
2022-03-08 21:10:45,299 - [test_business_regist_json01.py - 53] - 20:测试编号1，测试标题正常流程,执行成功
2022-03-08 21:26:38,293 - [test_business_regist_json01.py - 53] - 20:测试编号1，测试标题正常流程,执行成功
2022-03-08 21:28:48,301 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正确流程，执行成功
2022-03-08 21:28:48,425 - [test_business_register03.py - 76] - 20:测试标号2，测试标题用户名为空的场景，执行成功
2022-03-08 21:28:48,557 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 21:28:48,695 - [test_business_register03.py - 76] - 20:测试标号4，测试标题用户名为5位无效边界值的场景，执行成功
2022-03-08 21:28:48,833 - [test_business_register03.py - 76] - 20:测试标号5，测试标题用户名为9位无效边界值的场景，执行成功
2022-03-08 21:28:48,966 - [test_business_register03.py - 76] - 20:测试标号6，测试标题用户名已存在的场景，执行成功
2022-03-08 21:28:49,126 - [test_business_register03.py - 76] - 20:测试标号7，测试标题用户名包含特殊符号的场景，执行成功
2022-03-08 21:28:49,334 - [test_business_register03.py - 76] - 20:测试标号8，测试标题用户名前包含空格的场景，执行成功
2022-03-08 21:28:49,464 - [test_business_register03.py - 76] - 20:测试标号9，测试标题用户名中包含空格的场景，执行成功
2022-03-08 21:28:49,588 - [test_business_register03.py - 76] - 20:测试标号10，测试标题用户名后包含空格的场景，执行成功
2022-03-08 21:28:49,750 - [test_business_register03.py - 76] - 20:测试标号11，测试标题用户名以非字母开头的场景，执行成功
2022-03-08 21:28:49,879 - [test_business_register03.py - 76] - 20:测试标号12，测试标题密码为空的场景，执行成功
2022-03-08 21:28:50,018 - [test_business_register03.py - 76] - 20:测试标号13，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 21:28:50,147 - [test_business_register03.py - 76] - 20:测试标号14，测试标题密码为6位无效边界值的场景，执行成功
2022-03-08 21:28:50,274 - [test_business_register03.py - 76] - 20:测试标号15，测试标题密码为12位无效边界值的场景，执行成功
2022-03-08 21:28:50,398 - [test_business_register03.py - 76] - 20:测试标号16，测试标题密码包含特殊符号的场景，执行成功
2022-03-08 21:28:50,526 - [test_business_register03.py - 76] - 20:测试标号17，测试标题密码纯字母的场景，执行成功
2022-03-08 21:28:50,652 - [test_business_register03.py - 76] - 20:测试标号18，测试标题密码纯数字的场景，执行成功
2022-03-08 21:28:50,800 - [test_business_register03.py - 76] - 20:测试标号19，测试标题密码区分大小写的场景，执行成功
2022-03-08 21:28:50,952 - [test_business_register03.py - 76] - 20:测试标号20，测试标题确认密码为空的场景，执行成功
2022-03-08 21:28:51,077 - [test_business_register03.py - 76] - 20:测试标号21，测试标题确认密码与密码不一致的场景，执行成功
2022-03-08 21:28:51,212 - [test_business_register03.py - 76] - 20:测试标号22，测试标题确认密码区分大小写的场景，执行成功
2022-03-08 21:28:51,340 - [test_business_register03.py - 76] - 20:测试标号23，测试标题手机号为空的场景，执行成功
2022-03-08 21:28:51,474 - [test_business_register03.py - 76] - 20:测试标号24，测试标题手机号为非11位数字的场景，执行成功
2022-03-08 21:28:51,607 - [test_business_register03.py - 76] - 20:测试标号25，测试标题手机号为非数字的场景，执行成功
2022-03-08 21:28:51,809 - [test_business_register03.py - 76] - 20:测试标号26，测试标题手机号为不支持的号段的场景，执行成功
2022-03-08 21:28:51,935 - [test_business_register03.py - 76] - 20:测试标号27，测试标题手机号已注册的场景，执行成功
2022-03-08 21:28:52,139 - [test_business_register03.py - 76] - 20:测试标号28，测试标题性别为空的场景的场景，执行成功
2022-03-08 21:28:52,263 - [test_business_register03.py - 76] - 20:测试标号29，测试标题性别为非枚举值的场景，执行成功
2022-03-08 21:28:52,410 - [test_business_register03.py - 76] - 20:测试标号30，测试标题性别为男+女的场景，执行成功
2022-03-08 21:28:52,550 - [test_business_register03.py - 76] - 20:测试标号31，测试标题生日为空的场景，执行成功
2022-03-08 21:28:52,676 - [test_business_register03.py - 76] - 20:测试标号32，测试标题生日为非时间格式的场景，执行成功
2022-03-08 21:28:52,804 - [test_business_register03.py - 76] - 20:测试标号33，测试标题生日为非数字，执行成功
2022-03-08 21:28:52,934 - [test_business_register03.py - 71] - 40:测试标号34，测试标题生日超出当前时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 21:28:52,934 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 21:28:53,066 - [test_business_register03.py - 71] - 40:测试标号35，测试标题生日为不合理的时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 21:28:53,066 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 21:28:53,205 - [test_business_register03.py - 76] - 20:测试标号36，测试标题qq为空的场景，执行成功
2022-03-08 21:28:53,339 - [test_business_register03.py - 76] - 20:测试标号37，测试标题qq为非数字，执行成功
2022-03-08 21:28:53,475 - [test_business_register03.py - 76] - 20:测试标号38，测试标题邮箱为空的场景，执行成功
2022-03-08 21:28:53,601 - [test_business_register03.py - 76] - 20:测试标号39，测试标题邮箱格式错误的场景，执行成功
2022-03-08 21:28:53,750 - [test_business_register03.py - 76] - 20:测试标号40，测试标题邮箱已注册的场景，执行成功
2022-03-08 21:29:38,966 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正确流程，执行成功
2022-03-08 21:29:39,096 - [test_business_register03.py - 76] - 20:测试标号2，测试标题用户名为空的场景，执行成功
2022-03-08 21:29:39,231 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 21:29:39,362 - [test_business_register03.py - 76] - 20:测试标号4，测试标题用户名为5位无效边界值的场景，执行成功
2022-03-08 21:29:39,611 - [test_business_register03.py - 76] - 20:测试标号5，测试标题用户名为9位无效边界值的场景，执行成功
2022-03-08 21:29:39,916 - [test_business_register03.py - 76] - 20:测试标号6，测试标题用户名已存在的场景，执行成功
2022-03-08 21:29:40,063 - [test_business_register03.py - 76] - 20:测试标号7，测试标题用户名包含特殊符号的场景，执行成功
2022-03-08 21:29:40,288 - [test_business_register03.py - 76] - 20:测试标号8，测试标题用户名前包含空格的场景，执行成功
2022-03-08 21:29:40,415 - [test_business_register03.py - 76] - 20:测试标号9，测试标题用户名中包含空格的场景，执行成功
2022-03-08 21:29:40,551 - [test_business_register03.py - 76] - 20:测试标号10，测试标题用户名后包含空格的场景，执行成功
2022-03-08 21:29:40,686 - [test_business_register03.py - 76] - 20:测试标号11，测试标题用户名以非字母开头的场景，执行成功
2022-03-08 21:29:40,855 - [test_business_register03.py - 76] - 20:测试标号12，测试标题密码为空的场景，执行成功
2022-03-08 21:29:41,020 - [test_business_register03.py - 76] - 20:测试标号13，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 21:29:41,153 - [test_business_register03.py - 76] - 20:测试标号14，测试标题密码为6位无效边界值的场景，执行成功
2022-03-08 21:29:41,347 - [test_business_register03.py - 76] - 20:测试标号15，测试标题密码为12位无效边界值的场景，执行成功
2022-03-08 21:29:41,516 - [test_business_register03.py - 76] - 20:测试标号16，测试标题密码包含特殊符号的场景，执行成功
2022-03-08 21:29:41,645 - [test_business_register03.py - 76] - 20:测试标号17，测试标题密码纯字母的场景，执行成功
2022-03-08 21:29:41,771 - [test_business_register03.py - 76] - 20:测试标号18，测试标题密码纯数字的场景，执行成功
2022-03-08 21:29:41,948 - [test_business_register03.py - 76] - 20:测试标号19，测试标题密码区分大小写的场景，执行成功
2022-03-08 21:29:42,085 - [test_business_register03.py - 76] - 20:测试标号20，测试标题确认密码为空的场景，执行成功
2022-03-08 21:29:42,218 - [test_business_register03.py - 76] - 20:测试标号21，测试标题确认密码与密码不一致的场景，执行成功
2022-03-08 21:29:42,342 - [test_business_register03.py - 76] - 20:测试标号22，测试标题确认密码区分大小写的场景，执行成功
2022-03-08 21:29:42,487 - [test_business_register03.py - 76] - 20:测试标号23，测试标题手机号为空的场景，执行成功
2022-03-08 21:29:42,717 - [test_business_register03.py - 76] - 20:测试标号24，测试标题手机号为非11位数字的场景，执行成功
2022-03-08 21:29:42,854 - [test_business_register03.py - 76] - 20:测试标号25，测试标题手机号为非数字的场景，执行成功
2022-03-08 21:29:42,982 - [test_business_register03.py - 76] - 20:测试标号26，测试标题手机号为不支持的号段的场景，执行成功
2022-03-08 21:29:43,110 - [test_business_register03.py - 76] - 20:测试标号27，测试标题手机号已注册的场景，执行成功
2022-03-08 21:29:43,308 - [test_business_register03.py - 76] - 20:测试标号28，测试标题性别为空的场景的场景，执行成功
2022-03-08 21:29:43,522 - [test_business_register03.py - 76] - 20:测试标号29，测试标题性别为非枚举值的场景，执行成功
2022-03-08 21:29:43,670 - [test_business_register03.py - 76] - 20:测试标号30，测试标题性别为男+女的场景，执行成功
2022-03-08 21:29:43,887 - [test_business_register03.py - 76] - 20:测试标号31，测试标题生日为空的场景，执行成功
2022-03-08 21:29:44,147 - [test_business_register03.py - 76] - 20:测试标号32，测试标题生日为非时间格式的场景，执行成功
2022-03-08 21:29:44,276 - [test_business_register03.py - 76] - 20:测试标号33，测试标题生日为非数字，执行成功
2022-03-08 21:29:44,406 - [test_business_register03.py - 71] - 40:测试标号34，测试标题生日超出当前时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 21:29:44,406 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 21:29:44,571 - [test_business_register03.py - 71] - 40:测试标号35，测试标题生日为不合理的时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 21:29:44,571 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 21:29:44,725 - [test_business_register03.py - 76] - 20:测试标号36，测试标题qq为空的场景，执行成功
2022-03-08 21:29:44,859 - [test_business_register03.py - 76] - 20:测试标号37，测试标题qq为非数字，执行成功
2022-03-08 21:29:45,118 - [test_business_register03.py - 76] - 20:测试标号38，测试标题邮箱为空的场景，执行成功
2022-03-08 21:29:45,397 - [test_business_register03.py - 76] - 20:测试标号39，测试标题邮箱格式错误的场景，执行成功
2022-03-08 21:29:45,526 - [test_business_register03.py - 76] - 20:测试标号40，测试标题邮箱已注册的场景，执行成功
2022-03-08 21:32:24,188 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正确流程，执行成功
2022-03-08 21:32:24,313 - [test_business_register03.py - 76] - 20:测试标号2，测试标题用户名为空的场景，执行成功
2022-03-08 21:32:24,449 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 21:32:24,639 - [test_business_register03.py - 76] - 20:测试标号4，测试标题用户名为5位无效边界值的场景，执行成功
2022-03-08 21:32:24,938 - [test_business_register03.py - 76] - 20:测试标号5，测试标题用户名为9位无效边界值的场景，执行成功
2022-03-08 21:32:25,293 - [test_business_register03.py - 76] - 20:测试标号6，测试标题用户名已存在的场景，执行成功
2022-03-08 21:32:25,478 - [test_business_register03.py - 76] - 20:测试标号7，测试标题用户名包含特殊符号的场景，执行成功
2022-03-08 21:32:25,627 - [test_business_register03.py - 76] - 20:测试标号8，测试标题用户名前包含空格的场景，执行成功
2022-03-08 21:32:25,750 - [test_business_register03.py - 76] - 20:测试标号9，测试标题用户名中包含空格的场景，执行成功
2022-03-08 21:32:25,875 - [test_business_register03.py - 76] - 20:测试标号10，测试标题用户名后包含空格的场景，执行成功
2022-03-08 21:32:26,001 - [test_business_register03.py - 76] - 20:测试标号11，测试标题用户名以非字母开头的场景，执行成功
2022-03-08 21:32:26,134 - [test_business_register03.py - 76] - 20:测试标号12，测试标题密码为空的场景，执行成功
2022-03-08 21:32:26,333 - [test_business_register03.py - 76] - 20:测试标号13，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 21:32:26,664 - [test_business_register03.py - 76] - 20:测试标号14，测试标题密码为6位无效边界值的场景，执行成功
2022-03-08 21:32:26,814 - [test_business_register03.py - 76] - 20:测试标号15，测试标题密码为12位无效边界值的场景，执行成功
2022-03-08 21:32:26,943 - [test_business_register03.py - 76] - 20:测试标号16，测试标题密码包含特殊符号的场景，执行成功
2022-03-08 21:32:27,069 - [test_business_register03.py - 76] - 20:测试标号17，测试标题密码纯字母的场景，执行成功
2022-03-08 21:32:27,195 - [test_business_register03.py - 76] - 20:测试标号18，测试标题密码纯数字的场景，执行成功
2022-03-08 21:32:27,471 - [test_business_register03.py - 76] - 20:测试标号19，测试标题密码区分大小写的场景，执行成功
2022-03-08 21:32:27,685 - [test_business_register03.py - 76] - 20:测试标号20，测试标题确认密码为空的场景，执行成功
2022-03-08 21:32:27,887 - [test_business_register03.py - 76] - 20:测试标号21，测试标题确认密码与密码不一致的场景，执行成功
2022-03-08 21:32:28,090 - [test_business_register03.py - 76] - 20:测试标号22，测试标题确认密码区分大小写的场景，执行成功
2022-03-08 21:32:28,222 - [test_business_register03.py - 76] - 20:测试标号23，测试标题手机号为空的场景，执行成功
2022-03-08 21:32:28,347 - [test_business_register03.py - 76] - 20:测试标号24，测试标题手机号为非11位数字的场景，执行成功
2022-03-08 21:32:28,476 - [test_business_register03.py - 76] - 20:测试标号25，测试标题手机号为非数字的场景，执行成功
2022-03-08 21:32:28,605 - [test_business_register03.py - 76] - 20:测试标号26，测试标题手机号为不支持的号段的场景，执行成功
2022-03-08 21:32:28,761 - [test_business_register03.py - 76] - 20:测试标号27，测试标题手机号已注册的场景，执行成功
2022-03-08 21:32:28,902 - [test_business_register03.py - 76] - 20:测试标号28，测试标题性别为空的场景的场景，执行成功
2022-03-08 21:32:29,030 - [test_business_register03.py - 76] - 20:测试标号29，测试标题性别为非枚举值的场景，执行成功
2022-03-08 21:32:29,175 - [test_business_register03.py - 76] - 20:测试标号30，测试标题性别为男+女的场景，执行成功
2022-03-08 21:32:29,373 - [test_business_register03.py - 76] - 20:测试标号31，测试标题生日为空的场景，执行成功
2022-03-08 21:32:29,508 - [test_business_register03.py - 76] - 20:测试标号32，测试标题生日为非时间格式的场景，执行成功
2022-03-08 21:32:29,634 - [test_business_register03.py - 76] - 20:测试标号33，测试标题生日为非数字，执行成功
2022-03-08 21:32:29,768 - [test_business_register03.py - 71] - 40:测试标号34，测试标题生日超出当前时间，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-08 21:32:29,768 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1010} != {'code': 1000}
  {'msg': '生日格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?            ^           ^^^^
  + {'code': 1010, 'msg': '生日格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1010} != {'code': 1000}
  {'msg': '生日格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?            ^           ^^^^
  + {'code': 1010, 'msg': '生日格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-08 21:32:29,897 - [test_business_register03.py - 71] - 40:测试标号35，测试标题生日为不合理的时间，执行失败，实际结果为{'code': 1005, 'msg': '用户名必须以字母开头，由字母和数字组成 6-8位的字符串'}
2022-03-08 21:32:29,898 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1005...字组成 6-8位的字符串'}
  Differing items:
  {'code': 1010} != {'code': 1005}
  {'msg': '生日格式错误'} != {'msg': '用户名必须以字母开头，由字母和数字组成 6-8位的字符串'}
  Full diff:
  - {'code': 1005, 'msg': '用户名必须以字母开头，由字母和数字组成 6-8位的字符串'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1005...字组成 6-8位的字符串'}
  Differing items:
  {'code': 1010} != {'code': 1005}
  {'msg': '生日格式错误'} != {'msg': '用户名必须以字母开头，由字母和数字组成 6-8位的字符串'}
  Full diff:
  - {'code': 1005, 'msg': '用户名必须以字母开头，由字母和数字组成 6-8位的字符串'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 21:32:30,036 - [test_business_register03.py - 76] - 20:测试标号36，测试标题qq为空的场景，执行成功
2022-03-08 21:32:30,165 - [test_business_register03.py - 76] - 20:测试标号37，测试标题qq为非数字，执行成功
2022-03-08 21:32:30,301 - [test_business_register03.py - 76] - 20:测试标号38，测试标题邮箱为空的场景，执行成功
2022-03-08 21:32:30,429 - [test_business_register03.py - 76] - 20:测试标号39，测试标题邮箱格式错误的场景，执行成功
2022-03-08 21:32:30,563 - [test_business_register03.py - 76] - 20:测试标号40，测试标题邮箱已注册的场景，执行成功
2022-03-08 21:33:45,848 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正确流程，执行成功
2022-03-08 21:33:45,975 - [test_business_register03.py - 76] - 20:测试标号2，测试标题用户名为空的场景，执行成功
2022-03-08 21:33:46,107 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 21:33:46,236 - [test_business_register03.py - 76] - 20:测试标号4，测试标题用户名为5位无效边界值的场景，执行成功
2022-03-08 21:33:46,362 - [test_business_register03.py - 76] - 20:测试标号5，测试标题用户名为9位无效边界值的场景，执行成功
2022-03-08 21:33:46,488 - [test_business_register03.py - 76] - 20:测试标号6，测试标题用户名已存在的场景，执行成功
2022-03-08 21:33:46,616 - [test_business_register03.py - 76] - 20:测试标号7，测试标题用户名包含特殊符号的场景，执行成功
2022-03-08 21:33:46,770 - [test_business_register03.py - 76] - 20:测试标号8，测试标题用户名前包含空格的场景，执行成功
2022-03-08 21:33:46,935 - [test_business_register03.py - 76] - 20:测试标号9，测试标题用户名中包含空格的场景，执行成功
2022-03-08 21:33:47,189 - [test_business_register03.py - 76] - 20:测试标号10，测试标题用户名后包含空格的场景，执行成功
2022-03-08 21:33:47,392 - [test_business_register03.py - 76] - 20:测试标号11，测试标题用户名以非字母开头的场景，执行成功
2022-03-08 21:33:47,519 - [test_business_register03.py - 76] - 20:测试标号12，测试标题密码为空的场景，执行成功
2022-03-08 21:33:47,651 - [test_business_register03.py - 76] - 20:测试标号13，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 21:33:47,778 - [test_business_register03.py - 76] - 20:测试标号14，测试标题密码为6位无效边界值的场景，执行成功
2022-03-08 21:33:47,951 - [test_business_register03.py - 76] - 20:测试标号15，测试标题密码为12位无效边界值的场景，执行成功
2022-03-08 21:33:48,077 - [test_business_register03.py - 76] - 20:测试标号16，测试标题密码包含特殊符号的场景，执行成功
2022-03-08 21:33:48,203 - [test_business_register03.py - 76] - 20:测试标号17，测试标题密码纯字母的场景，执行成功
2022-03-08 21:33:48,354 - [test_business_register03.py - 76] - 20:测试标号18，测试标题密码纯数字的场景，执行成功
2022-03-08 21:33:48,503 - [test_business_register03.py - 76] - 20:测试标号19，测试标题密码区分大小写的场景，执行成功
2022-03-08 21:33:48,672 - [test_business_register03.py - 76] - 20:测试标号20，测试标题确认密码为空的场景，执行成功
2022-03-08 21:33:48,974 - [test_business_register03.py - 76] - 20:测试标号21，测试标题确认密码与密码不一致的场景，执行成功
2022-03-08 21:33:49,101 - [test_business_register03.py - 76] - 20:测试标号22，测试标题确认密码区分大小写的场景，执行成功
2022-03-08 21:33:49,235 - [test_business_register03.py - 76] - 20:测试标号23，测试标题手机号为空的场景，执行成功
2022-03-08 21:33:49,363 - [test_business_register03.py - 76] - 20:测试标号24，测试标题手机号为非11位数字的场景，执行成功
2022-03-08 21:33:49,487 - [test_business_register03.py - 76] - 20:测试标号25，测试标题手机号为非数字的场景，执行成功
2022-03-08 21:33:49,656 - [test_business_register03.py - 76] - 20:测试标号26，测试标题手机号为不支持的号段的场景，执行成功
2022-03-08 21:33:49,792 - [test_business_register03.py - 76] - 20:测试标号27，测试标题手机号已注册的场景，执行成功
2022-03-08 21:33:49,937 - [test_business_register03.py - 76] - 20:测试标号28，测试标题性别为空的场景的场景，执行成功
2022-03-08 21:33:50,065 - [test_business_register03.py - 76] - 20:测试标号29，测试标题性别为非枚举值的场景，执行成功
2022-03-08 21:33:50,209 - [test_business_register03.py - 76] - 20:测试标号30，测试标题性别为男+女的场景，执行成功
2022-03-08 21:33:50,387 - [test_business_register03.py - 76] - 20:测试标号31，测试标题生日为空的场景，执行成功
2022-03-08 21:33:50,515 - [test_business_register03.py - 76] - 20:测试标号32，测试标题生日为非时间格式的场景，执行成功
2022-03-08 21:33:50,644 - [test_business_register03.py - 76] - 20:测试标号33，测试标题生日为非数字，执行成功
2022-03-08 21:33:50,773 - [test_business_register03.py - 71] - 40:测试标号34，测试标题生日超出当前时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-08 21:33:50,773 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-08 21:33:50,994 - [test_business_register03.py - 71] - 40:测试标号35，测试标题生日为不合理的时间，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-08 21:33:50,995 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '注册成功'}
  {'code': 1010} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?            ^           ^^^^
  + {'code': 1010, 'msg': '生日格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '注册成功'}
  {'code': 1010} != {'code': 1000}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?            ^           ^^^^
  + {'code': 1010, 'msg': '生日格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-08 21:33:51,152 - [test_business_register03.py - 76] - 20:测试标号36，测试标题qq为空的场景，执行成功
2022-03-08 21:33:51,347 - [test_business_register03.py - 76] - 20:测试标号37，测试标题qq为非数字，执行成功
2022-03-08 21:33:51,520 - [test_business_register03.py - 76] - 20:测试标号38，测试标题邮箱为空的场景，执行成功
2022-03-08 21:33:51,714 - [test_business_register03.py - 76] - 20:测试标号39，测试标题邮箱格式错误的场景，执行成功
2022-03-08 21:33:51,843 - [test_business_register03.py - 76] - 20:测试标号40，测试标题邮箱已注册的场景，执行成功
2022-03-08 21:34:13,841 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正确流程，执行成功
2022-03-08 21:34:13,973 - [test_business_register03.py - 76] - 20:测试标号2，测试标题用户名为空的场景，执行成功
2022-03-08 21:34:14,148 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-08 21:34:14,406 - [test_business_register03.py - 76] - 20:测试标号4，测试标题用户名为5位无效边界值的场景，执行成功
2022-03-08 21:34:14,645 - [test_business_register03.py - 76] - 20:测试标号5，测试标题用户名为9位无效边界值的场景，执行成功
2022-03-08 21:34:14,891 - [test_business_register03.py - 76] - 20:测试标号6，测试标题用户名已存在的场景，执行成功
2022-03-08 21:34:15,042 - [test_business_register03.py - 76] - 20:测试标号7，测试标题用户名包含特殊符号的场景，执行成功
2022-03-08 21:34:15,204 - [test_business_register03.py - 76] - 20:测试标号8，测试标题用户名前包含空格的场景，执行成功
2022-03-08 21:34:15,351 - [test_business_register03.py - 76] - 20:测试标号9，测试标题用户名中包含空格的场景，执行成功
2022-03-08 21:34:15,480 - [test_business_register03.py - 76] - 20:测试标号10，测试标题用户名后包含空格的场景，执行成功
2022-03-08 21:34:15,606 - [test_business_register03.py - 76] - 20:测试标号11，测试标题用户名以非字母开头的场景，执行成功
2022-03-08 21:34:15,730 - [test_business_register03.py - 76] - 20:测试标号12，测试标题密码为空的场景，执行成功
2022-03-08 21:34:15,968 - [test_business_register03.py - 76] - 20:测试标号13，测试标题密码为8位有效边界值的场景，执行成功
2022-03-08 21:34:16,143 - [test_business_register03.py - 76] - 20:测试标号14，测试标题密码为6位无效边界值的场景，执行成功
2022-03-08 21:34:16,288 - [test_business_register03.py - 76] - 20:测试标号15，测试标题密码为12位无效边界值的场景，执行成功
2022-03-08 21:34:16,417 - [test_business_register03.py - 76] - 20:测试标号16，测试标题密码包含特殊符号的场景，执行成功
2022-03-08 21:34:16,603 - [test_business_register03.py - 76] - 20:测试标号17，测试标题密码纯字母的场景，执行成功
2022-03-08 21:34:16,743 - [test_business_register03.py - 76] - 20:测试标号18，测试标题密码纯数字的场景，执行成功
2022-03-08 21:34:16,989 - [test_business_register03.py - 76] - 20:测试标号19，测试标题密码区分大小写的场景，执行成功
2022-03-08 21:34:17,150 - [test_business_register03.py - 76] - 20:测试标号20，测试标题确认密码为空的场景，执行成功
2022-03-08 21:34:17,277 - [test_business_register03.py - 76] - 20:测试标号21，测试标题确认密码与密码不一致的场景，执行成功
2022-03-08 21:34:17,448 - [test_business_register03.py - 76] - 20:测试标号22，测试标题确认密码区分大小写的场景，执行成功
2022-03-08 21:34:17,577 - [test_business_register03.py - 76] - 20:测试标号23，测试标题手机号为空的场景，执行成功
2022-03-08 21:34:17,710 - [test_business_register03.py - 76] - 20:测试标号24，测试标题手机号为非11位数字的场景，执行成功
2022-03-08 21:34:17,855 - [test_business_register03.py - 76] - 20:测试标号25，测试标题手机号为非数字的场景，执行成功
2022-03-08 21:34:18,118 - [test_business_register03.py - 76] - 20:测试标号26，测试标题手机号为不支持的号段的场景，执行成功
2022-03-08 21:34:18,395 - [test_business_register03.py - 76] - 20:测试标号27，测试标题手机号已注册的场景，执行成功
2022-03-08 21:34:18,639 - [test_business_register03.py - 76] - 20:测试标号28，测试标题性别为空的场景的场景，执行成功
2022-03-08 21:34:18,773 - [test_business_register03.py - 76] - 20:测试标号29，测试标题性别为非枚举值的场景，执行成功
2022-03-08 21:34:18,939 - [test_business_register03.py - 76] - 20:测试标号30，测试标题性别为男+女的场景，执行成功
2022-03-08 21:34:19,075 - [test_business_register03.py - 76] - 20:测试标号31，测试标题生日为空的场景，执行成功
2022-03-08 21:34:19,203 - [test_business_register03.py - 76] - 20:测试标号32，测试标题生日为非时间格式的场景，执行成功
2022-03-08 21:34:19,421 - [test_business_register03.py - 76] - 20:测试标号33，测试标题生日为非数字，执行成功
2022-03-08 21:34:19,558 - [test_business_register03.py - 71] - 40:测试标号34，测试标题生日超出当前时间，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-08 21:34:19,558 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1010} != {'code': 1000}
  {'msg': '生日格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?            ^           ^^^^
  + {'code': 1010, 'msg': '生日格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1010} != {'code': 1000}
  {'msg': '生日格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?            ^           ^^^^
  + {'code': 1010, 'msg': '生日格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-08 21:34:19,693 - [test_business_register03.py - 71] - 40:测试标号35，测试标题生日为不合理的时间，执行失败，实际结果为{'code': 1000, 'msg': '注册成功'}
2022-03-08 21:34:19,693 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1010} != {'code': 1000}
  {'msg': '生日格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?            ^           ^^^^
  + {'code': 1010, 'msg': '生日格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1000, 'msg': '注册成功'}
  Differing items:
  {'code': 1010} != {'code': 1000}
  {'msg': '生日格式错误'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 1000, 'msg': '注册成功'}
  ?            ^           ^^^^
  + {'code': 1010, 'msg': '生日格式错误'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-08 21:34:19,829 - [test_business_register03.py - 76] - 20:测试标号36，测试标题qq为空的场景，执行成功
2022-03-08 21:34:20,001 - [test_business_register03.py - 76] - 20:测试标号37，测试标题qq为非数字，执行成功
2022-03-08 21:34:20,159 - [test_business_register03.py - 76] - 20:测试标号38，测试标题邮箱为空的场景，执行成功
2022-03-08 21:34:20,292 - [test_business_register03.py - 76] - 20:测试标号39，测试标题邮箱格式错误的场景，执行成功
2022-03-08 21:34:20,418 - [test_business_register03.py - 76] - 20:测试标号40，测试标题邮箱已注册的场景，执行成功
2022-03-09 15:19:43,971 - [test_business_token_goods_delete01.py - 61] - 40:测试编号1,测试标题正常流程，执行失败，实际结果{'code': 9999, 'msg': '商品删除失败'}
2022-03-09 15:19:43,972 - [test_business_token_goods_delete01.py - 62] - 40:assert {'code': 1000...sg': '商品删除成功'} == {'code': 9999...sg': '商品删除失败'}
  Differing items:
  {'code': 1000} != {'code': 9999}
  {'msg': '商品删除成功'} != {'msg': '商品删除失败'}
  Full diff:
  - {'code': 9999, 'msg': '商品删除失败'}
  ?          ^^^^              ^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 53, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品删除成功'} == {'code': 9999...sg': '商品删除失败'}
  Differing items:
  {'code': 1000} != {'code': 9999}
  {'msg': '商品删除成功'} != {'msg': '商品删除失败'}
  Full diff:
  - {'code': 9999, 'msg': '商品删除失败'}
  ?          ^^^^              ^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:19:44,111 - [test_business_token_goods_delete01.py - 66] - 20:测试编号2,测试标题测试商品编号为空，执行成功
2022-03-09 15:19:44,250 - [test_business_token_goods_delete01.py - 66] - 20:测试编号3,测试标题测试商品编号不存在，执行成功
2022-03-09 15:19:44,388 - [test_business_token_goods_delete01.py - 66] - 20:测试编号4,测试标题测试商品编号格式错误，执行成功
2022-03-09 15:19:44,525 - [test_business_token_goods_delete01.py - 61] - 40:测试编号5,测试标题测试商品编号的商品没下架，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 15:19:44,525 - [test_business_token_goods_delete01.py - 62] - 40:assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'code': 1005} != {'code': 1004}
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 53, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'code': 1005} != {'code': 1004}
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:20:40,074 - [test_business_token_goods_delete01.py - 61] - 40:测试编号5,测试标题测试商品编号的商品没下架，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 15:20:40,074 - [test_business_token_goods_delete01.py - 62] - 40:assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  {'code': 1005} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 53, in test_goods_delete
    try:
AssertionError: assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  {'code': 1005} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:21:37,839 - [test_business_token_goods_delete01.py - 62] - 40:测试编号1,测试标题正常流程，执行失败，实际结果{'code': 9999, 'msg': '商品删除失败'}
2022-03-09 15:21:37,840 - [test_business_token_goods_delete01.py - 63] - 40:assert {'code': 1000...sg': '商品删除成功'} == {'code': 9999...sg': '商品删除失败'}
  Differing items:
  {'msg': '商品删除成功'} != {'msg': '商品删除失败'}
  {'code': 1000} != {'code': 9999}
  Full diff:
  - {'code': 9999, 'msg': '商品删除失败'}
  ?          ^^^^              ^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 54, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品删除成功'} == {'code': 9999...sg': '商品删除失败'}
  Differing items:
  {'msg': '商品删除成功'} != {'msg': '商品删除失败'}
  {'code': 1000} != {'code': 9999}
  Full diff:
  - {'code': 9999, 'msg': '商品删除失败'}
  ?          ^^^^              ^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:21:37,973 - [test_business_token_goods_delete01.py - 67] - 20:测试编号2,测试标题测试商品编号为空，执行成功
2022-03-09 15:21:38,103 - [test_business_token_goods_delete01.py - 67] - 20:测试编号3,测试标题测试商品编号不存在，执行成功
2022-03-09 15:21:38,231 - [test_business_token_goods_delete01.py - 67] - 20:测试编号4,测试标题测试商品编号格式错误，执行成功
2022-03-09 15:21:38,363 - [test_business_token_goods_delete01.py - 62] - 40:测试编号5,测试标题测试商品编号的商品没下架，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 15:21:38,363 - [test_business_token_goods_delete01.py - 63] - 40:assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  {'code': 1005} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 54, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  {'code': 1005} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:22:18,672 - [test_business_token_goods_delete01.py - 64] - 20:测试编号1,测试标题正常流程，执行成功
2022-03-09 15:22:18,809 - [test_business_token_goods_delete01.py - 64] - 20:测试编号2,测试标题测试商品编号为空，执行成功
2022-03-09 15:22:18,945 - [test_business_token_goods_delete01.py - 64] - 20:测试编号3,测试标题测试商品编号不存在，执行成功
2022-03-09 15:22:19,109 - [test_business_token_goods_delete01.py - 64] - 20:测试编号4,测试标题测试商品编号格式错误，执行成功
2022-03-09 15:22:19,262 - [test_business_token_goods_delete01.py - 59] - 40:测试编号5,测试标题测试商品编号的商品没下架，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 15:22:19,262 - [test_business_token_goods_delete01.py - 60] - 40:assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'code': 1005} != {'code': 1004}
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 51, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'code': 1005} != {'code': 1004}
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:22:46,278 - [test_business_token_goods_delete01.py - 59] - 40:测试编号1,测试标题正常流程，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 15:22:46,278 - [test_business_token_goods_delete01.py - 60] - 40:assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  {'code': 1000} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 51, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  {'code': 1000} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:22:46,419 - [test_business_token_goods_delete01.py - 64] - 20:测试编号2,测试标题测试商品编号为空，执行成功
2022-03-09 15:22:46,552 - [test_business_token_goods_delete01.py - 64] - 20:测试编号3,测试标题测试商品编号不存在，执行成功
2022-03-09 15:22:46,687 - [test_business_token_goods_delete01.py - 64] - 20:测试编号4,测试标题测试商品编号格式错误，执行成功
2022-03-09 15:22:46,820 - [test_business_token_goods_delete01.py - 59] - 40:测试编号5,测试标题测试商品编号的商品没下架，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 15:22:46,820 - [test_business_token_goods_delete01.py - 60] - 40:assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  {'code': 1005} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 51, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  {'code': 1005} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:23:27,467 - [test_business_token_goods_delete01.py - 64] - 20:测试编号1,测试标题正常流程，执行成功
2022-03-09 15:23:27,607 - [test_business_token_goods_delete01.py - 64] - 20:测试编号2,测试标题测试商品编号为空，执行成功
2022-03-09 15:23:27,739 - [test_business_token_goods_delete01.py - 64] - 20:测试编号3,测试标题测试商品编号不存在，执行成功
2022-03-09 15:23:27,876 - [test_business_token_goods_delete01.py - 64] - 20:测试编号4,测试标题测试商品编号格式错误，执行成功
2022-03-09 15:23:28,009 - [test_business_token_goods_delete01.py - 59] - 40:测试编号5,测试标题测试商品编号的商品没下架，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 15:23:28,009 - [test_business_token_goods_delete01.py - 60] - 40:assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'code': 1005} != {'code': 1004}
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 51, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'code': 1005} != {'code': 1004}
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:23:39,598 - [test_business_token_goods_delete01.py - 59] - 40:测试编号1,测试标题正常流程，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 15:23:39,598 - [test_business_token_goods_delete01.py - 60] - 40:assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  {'code': 1000} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 51, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  {'code': 1000} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:23:39,731 - [test_business_token_goods_delete01.py - 64] - 20:测试编号2,测试标题测试商品编号为空，执行成功
2022-03-09 15:23:39,861 - [test_business_token_goods_delete01.py - 64] - 20:测试编号3,测试标题测试商品编号不存在，执行成功
2022-03-09 15:23:40,015 - [test_business_token_goods_delete01.py - 64] - 20:测试编号4,测试标题测试商品编号格式错误，执行成功
2022-03-09 15:23:40,147 - [test_business_token_goods_delete01.py - 59] - 40:测试编号5,测试标题测试商品编号的商品没下架，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 15:23:40,147 - [test_business_token_goods_delete01.py - 60] - 40:assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  {'code': 1005} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 51, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  {'code': 1005} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:24:04,369 - [test_business_token_goods_delete01.py - 59] - 40:测试编号1,测试标题正常流程，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 15:24:04,369 - [test_business_token_goods_delete01.py - 60] - 40:assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  {'code': 1000} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 51, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  {'code': 1000} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:24:04,536 - [test_business_token_goods_delete01.py - 64] - 20:测试编号2,测试标题测试商品编号为空，执行成功
2022-03-09 15:24:04,672 - [test_business_token_goods_delete01.py - 64] - 20:测试编号3,测试标题测试商品编号不存在，执行成功
2022-03-09 15:24:04,803 - [test_business_token_goods_delete01.py - 64] - 20:测试编号4,测试标题测试商品编号格式错误，执行成功
2022-03-09 15:24:04,936 - [test_business_token_goods_delete01.py - 59] - 40:测试编号5,测试标题测试商品编号的商品没下架，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 15:24:04,937 - [test_business_token_goods_delete01.py - 60] - 40:assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  {'code': 1005} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 51, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  {'code': 1005} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:51:35,397 - [test_business_token_goods_delete01.py - 59] - 40:测试编号1,测试标题正常流程，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 15:51:35,397 - [test_business_token_goods_delete01.py - 60] - 40:assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  {'code': 1000} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 51, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  {'code': 1000} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:51:35,531 - [test_business_token_goods_delete01.py - 64] - 20:测试编号2,测试标题测试商品编号为空，执行成功
2022-03-09 15:51:35,658 - [test_business_token_goods_delete01.py - 64] - 20:测试编号3,测试标题测试商品编号不存在，执行成功
2022-03-09 15:51:35,815 - [test_business_token_goods_delete01.py - 64] - 20:测试编号4,测试标题测试商品编号格式错误，执行成功
2022-03-09 15:51:35,969 - [test_business_token_goods_delete01.py - 59] - 40:测试编号5,测试标题测试商品编号的商品没下架，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 15:51:35,969 - [test_business_token_goods_delete01.py - 60] - 40:assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  {'code': 1005} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 51, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  {'code': 1005} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 15:53:30,039 - [test_business_token_goods_delete01.py - 59] - 40:测试编号1,测试标题正常流程，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 15:53:30,039 - [test_business_token_goods_delete01.py - 60] - 40:assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  {'code': 1000} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 51, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  {'code': 1000} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 16:26:46,669 - [test_business_token_goods_delete01.py - 64] - 20:测试编号1,测试标题正常流程，执行成功
2022-03-09 16:26:56,620 - [test_business_token_goods_delete01.py - 59] - 40:测试编号1,测试标题正常流程，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 16:26:56,620 - [test_business_token_goods_delete01.py - 60] - 40:assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  {'code': 1000} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 51, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  {'code': 1000} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 16:27:29,682 - [test_business_token_goods_delete01.py - 59] - 40:测试编号1,测试标题正常流程，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 16:27:29,682 - [test_business_token_goods_delete01.py - 60] - 40:assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'code': 1000} != {'code': 1004}
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 51, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...sg': '商品删除成功'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'code': 1000} != {'code': 1004}
  {'msg': '商品删除成功'} != {'msg': '该商品不存在'}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          -  ^^^
  + {'code': 1000, 'msg': '商品删除成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 16:28:51,096 - [test_business_token_goods_delete01.py - 64] - 20:测试编号1,测试标题正常流程，执行成功
2022-03-09 16:28:55,233 - [test_business_token_goods_delete01.py - 64] - 20:测试编号1,测试标题正常流程，执行成功
2022-03-09 16:29:22,755 - [test_business_token_goods_delete01.py - 64] - 20:测试编号1,测试标题正常流程，执行成功
2022-03-09 16:29:22,884 - [test_business_token_goods_delete01.py - 64] - 20:测试编号2,测试标题测试商品编号为空，执行成功
2022-03-09 16:29:23,012 - [test_business_token_goods_delete01.py - 64] - 20:测试编号3,测试标题测试商品编号不存在，执行成功
2022-03-09 16:29:23,144 - [test_business_token_goods_delete01.py - 64] - 20:测试编号4,测试标题测试商品编号格式错误，执行成功
2022-03-09 16:29:23,286 - [test_business_token_goods_delete01.py - 59] - 40:测试编号5,测试标题测试商品编号的商品没下架，执行失败，实际结果{'code': 1004, 'msg': '该商品不存在'}
2022-03-09 16:29:23,286 - [test_business_token_goods_delete01.py - 60] - 40:assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'code': 1005} != {'code': 1004}
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_delete08\test_business_token_goods_delete01.py", line 51, in test_goods_delete
    assert eval(case.expect) == res
AssertionError: assert {'code': 1005...商品没有下架，不允许删除'} == {'code': 1004...sg': '该商品不存在'}
  Differing items:
  {'code': 1005} != {'code': 1004}
  {'msg': '当前商品没有下架，不允许删除'} != {'msg': '该商品不存在'}
  Full diff:
  - {'code': 1004, 'msg': '该商品不存在'}
  ?             ^          ^   ^^
  + {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 16:30:34,968 - [test_business_token_goods_delete01.py - 64] - 20:测试编号1,测试标题正常流程，执行成功
2022-03-09 16:30:35,101 - [test_business_token_goods_delete01.py - 64] - 20:测试编号2,测试标题测试商品编号为空，执行成功
2022-03-09 16:30:35,227 - [test_business_token_goods_delete01.py - 64] - 20:测试编号3,测试标题测试商品编号不存在，执行成功
2022-03-09 16:30:35,356 - [test_business_token_goods_delete01.py - 64] - 20:测试编号4,测试标题测试商品编号格式错误，执行成功
2022-03-09 16:30:35,494 - [test_business_token_goods_delete01.py - 64] - 20:测试编号5,测试标题测试商品编号的商品没下架，执行成功
2022-03-09 16:31:34,785 - [test_business_token_goods_delete01.py - 64] - 20:测试编号1,测试标题正常流程，执行成功
2022-03-09 16:31:34,920 - [test_business_token_goods_delete01.py - 64] - 20:测试编号2,测试标题测试商品编号为空，执行成功
2022-03-09 16:31:35,055 - [test_business_token_goods_delete01.py - 64] - 20:测试编号3,测试标题测试商品编号不存在，执行成功
2022-03-09 16:31:35,190 - [test_business_token_goods_delete01.py - 64] - 20:测试编号4,测试标题测试商品编号格式错误，执行成功
2022-03-09 16:31:35,323 - [test_business_token_goods_delete01.py - 64] - 20:测试编号5,测试标题测试商品编号的商品没下架，执行成功
2022-03-09 16:31:45,051 - [test_business_regist_json01.py - 53] - 20:测试编号1，测试标题正常流程,执行成功
2022-03-09 16:31:45,191 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正确流程，执行成功
2022-03-09 16:31:45,316 - [test_business_register03.py - 76] - 20:测试标号2，测试标题用户名为空的场景，执行成功
2022-03-09 16:31:45,471 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-09 16:31:45,615 - [test_business_register03.py - 76] - 20:测试标号4，测试标题用户名为5位无效边界值的场景，执行成功
2022-03-09 16:31:45,740 - [test_business_register03.py - 76] - 20:测试标号5，测试标题用户名为9位无效边界值的场景，执行成功
2022-03-09 16:31:45,867 - [test_business_register03.py - 76] - 20:测试标号6，测试标题用户名已存在的场景，执行成功
2022-03-09 16:31:45,993 - [test_business_register03.py - 76] - 20:测试标号7，测试标题用户名包含特殊符号的场景，执行成功
2022-03-09 16:31:46,118 - [test_business_register03.py - 76] - 20:测试标号8，测试标题用户名前包含空格的场景，执行成功
2022-03-09 16:31:46,244 - [test_business_register03.py - 76] - 20:测试标号9，测试标题用户名中包含空格的场景，执行成功
2022-03-09 16:31:46,374 - [test_business_register03.py - 76] - 20:测试标号10，测试标题用户名后包含空格的场景，执行成功
2022-03-09 16:31:46,506 - [test_business_register03.py - 76] - 20:测试标号11，测试标题用户名以非字母开头的场景，执行成功
2022-03-09 16:31:46,634 - [test_business_register03.py - 76] - 20:测试标号12，测试标题密码为空的场景，执行成功
2022-03-09 16:31:46,767 - [test_business_register03.py - 76] - 20:测试标号13，测试标题密码为8位有效边界值的场景，执行成功
2022-03-09 16:31:46,918 - [test_business_register03.py - 76] - 20:测试标号14，测试标题密码为6位无效边界值的场景，执行成功
2022-03-09 16:31:47,045 - [test_business_register03.py - 76] - 20:测试标号15，测试标题密码为12位无效边界值的场景，执行成功
2022-03-09 16:31:47,170 - [test_business_register03.py - 76] - 20:测试标号16，测试标题密码包含特殊符号的场景，执行成功
2022-03-09 16:31:47,295 - [test_business_register03.py - 76] - 20:测试标号17，测试标题密码纯字母的场景，执行成功
2022-03-09 16:31:47,422 - [test_business_register03.py - 76] - 20:测试标号18，测试标题密码纯数字的场景，执行成功
2022-03-09 16:31:47,550 - [test_business_register03.py - 76] - 20:测试标号19，测试标题密码区分大小写的场景，执行成功
2022-03-09 16:31:47,694 - [test_business_register03.py - 76] - 20:测试标号20，测试标题确认密码为空的场景，执行成功
2022-03-09 16:31:47,819 - [test_business_register03.py - 76] - 20:测试标号21，测试标题确认密码与密码不一致的场景，执行成功
2022-03-09 16:31:47,945 - [test_business_register03.py - 76] - 20:测试标号22，测试标题确认密码区分大小写的场景，执行成功
2022-03-09 16:31:48,070 - [test_business_register03.py - 76] - 20:测试标号23，测试标题手机号为空的场景，执行成功
2022-03-09 16:31:48,196 - [test_business_register03.py - 76] - 20:测试标号24，测试标题手机号为非11位数字的场景，执行成功
2022-03-09 16:31:48,343 - [test_business_register03.py - 76] - 20:测试标号25，测试标题手机号为非数字的场景，执行成功
2022-03-09 16:31:48,468 - [test_business_register03.py - 76] - 20:测试标号26，测试标题手机号为不支持的号段的场景，执行成功
2022-03-09 16:31:48,597 - [test_business_register03.py - 76] - 20:测试标号27，测试标题手机号已注册的场景，执行成功
2022-03-09 16:31:48,736 - [test_business_register03.py - 76] - 20:测试标号28，测试标题性别为空的场景的场景，执行成功
2022-03-09 16:31:48,871 - [test_business_register03.py - 76] - 20:测试标号29，测试标题性别为非枚举值的场景，执行成功
2022-03-09 16:31:49,001 - [test_business_register03.py - 76] - 20:测试标号30，测试标题性别为男+女的场景，执行成功
2022-03-09 16:31:49,142 - [test_business_register03.py - 76] - 20:测试标号31，测试标题生日为空的场景，执行成功
2022-03-09 16:31:49,268 - [test_business_register03.py - 76] - 20:测试标号32，测试标题生日为非时间格式的场景，执行成功
2022-03-09 16:31:49,398 - [test_business_register03.py - 76] - 20:测试标号33，测试标题生日为非数字，执行成功
2022-03-09 16:31:49,531 - [test_business_register03.py - 71] - 40:测试标号34，测试标题生日超出当前时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-09 16:31:49,532 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-09 16:31:49,673 - [test_business_register03.py - 71] - 40:测试标号35，测试标题生日为不合理的时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-09 16:31:49,673 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'code': 1010} != {'code': 1013}
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-09 16:31:49,838 - [test_business_register03.py - 76] - 20:测试标号36，测试标题qq为空的场景，执行成功
2022-03-09 16:31:49,968 - [test_business_register03.py - 76] - 20:测试标号37，测试标题qq为非数字，执行成功
2022-03-09 16:31:50,157 - [test_business_register03.py - 76] - 20:测试标号38，测试标题邮箱为空的场景，执行成功
2022-03-09 16:31:50,303 - [test_business_register03.py - 76] - 20:测试标号39，测试标题邮箱格式错误的场景，执行成功
2022-03-09 16:31:50,445 - [test_business_register03.py - 76] - 20:测试标号40，测试标题邮箱已注册的场景，执行成功
2022-03-09 16:31:50,590 - [test_business_token_goods_delete01.py - 64] - 20:测试编号1,测试标题正常流程，执行成功
2022-03-09 16:31:50,731 - [test_business_token_goods_delete01.py - 64] - 20:测试编号2,测试标题测试商品编号为空，执行成功
2022-03-09 16:31:50,881 - [test_business_token_goods_delete01.py - 64] - 20:测试编号3,测试标题测试商品编号不存在，执行成功
2022-03-09 16:31:51,027 - [test_business_token_goods_delete01.py - 64] - 20:测试编号4,测试标题测试商品编号格式错误，执行成功
2022-03-09 16:31:51,177 - [test_business_token_goods_delete01.py - 64] - 20:测试编号5,测试标题测试商品编号的商品没下架，执行成功
2022-03-09 16:31:51,387 - [test_business_token_goods_input01.py - 79] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-09 16:31:51,636 - [test_business_token_goods_input01.py - 79] - 20:测试编号2，测试标题测试商品信息录入—token为空，执行成功
2022-03-09 16:31:51,881 - [test_business_token_goods_input01.py - 79] - 20:测试编号3，测试标题测试商品信息录入——token区分大小写，执行成功
2022-03-09 16:31:52,111 - [test_business_token_goods_input01.py - 74] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 1013, 'msg': '产品名称不能重复'}
2022-03-09 16:31:52,111 - [test_business_token_goods_input01.py - 75] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'code': 1011} != {'code': 1013}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 67, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'code': 1011} != {'code': 1013}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-09 16:31:52,341 - [test_business_token_goods_input01.py - 79] - 20:测试编号5，测试标题测试商品名为空的场景，执行成功
2022-03-09 16:31:52,499 - [test_business_token_goods_input01.py - 79] - 20:测试编号6，测试标题测试商品名有效边界的场景，执行成功
2022-03-09 16:31:52,647 - [test_business_token_goods_input01.py - 79] - 20:测试编号7，测试标题测试商品名无效边界的场景，执行成功
2022-03-09 16:31:52,784 - [test_business_token_goods_input01.py - 79] - 20:测试编号8，测试标题测试商品名已存在的场景，执行成功
2022-03-09 16:31:52,921 - [test_business_token_goods_input01.py - 79] - 20:测试编号9，测试标题测试商品分类id为空，执行成功
2022-03-09 16:31:53,059 - [test_business_token_goods_input01.py - 79] - 20:测试编号10，测试标题测试商品分类id不存在，执行成功
2022-03-09 16:31:53,201 - [test_business_token_goods_input01.py - 79] - 20:测试编号11，测试标题测试商品描述为空，执行成功
2022-03-09 16:31:53,344 - [test_business_token_goods_input01.py - 79] - 20:测试编号12，测试标题测试商品描述有效边界，执行成功
2022-03-09 16:31:53,501 - [test_business_token_goods_input01.py - 79] - 20:测试编号13，测试标题测试商品描述无效边界，执行成功
2022-03-09 16:31:53,636 - [test_business_token_goods_input01.py - 79] - 20:测试编号14，测试标题测试商品库存为空，执行成功
2022-03-09 16:31:53,779 - [test_business_token_goods_input01.py - 79] - 20:测试编号15，测试标题测试商品库存最大整数，执行成功
2022-03-09 16:31:53,913 - [test_business_token_goods_input01.py - 79] - 20:测试编号16，测试标题测试商品库存为小数，执行成功
2022-03-09 16:31:54,065 - [test_business_token_goods_input01.py - 79] - 20:测试编号17，测试标题测试商品库存为负数，执行成功
2022-03-09 16:31:54,202 - [test_business_token_goods_input01.py - 79] - 20:测试编号18，测试标题测试商品库存为字符，执行成功
2022-03-09 16:31:54,335 - [test_business_token_goods_input01.py - 79] - 20:测试编号19，测试标题测试商品价格为空，执行成功
2022-03-09 16:31:54,477 - [test_business_token_goods_input01.py - 79] - 20:测试编号20，测试标题测试商品价格有效数字：最大值边界，执行成功
2022-03-09 16:31:54,614 - [test_business_token_goods_input01.py - 79] - 20:测试编号21，测试标题测试商品价格非两位小数的数字，执行成功
2022-03-09 16:31:54,748 - [test_business_token_goods_input01.py - 79] - 20:测试编号22，测试标题测试商品价格超过最大值，执行成功
2022-03-09 16:31:54,905 - [test_business_token_goods_input01.py - 79] - 20:测试编号23，测试标题测试商品价格为整数，执行成功
2022-03-09 16:31:55,038 - [test_business_token_goods_input01.py - 79] - 20:测试编号24，测试标题测试商品价格为0，执行成功
2022-03-09 16:31:55,176 - [test_business_token_goods_promote01.py - 65] - 40:测试编号1,测试标题正常流程,执行失败，实际结果为{'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
2022-03-09 16:31:55,176 - [test_business_token_goods_promote01.py - 66] - 40:assert {'code': 1000...': '促销开启设置成功'} == {'code': 1008...开始时间必须大于当前时间'}
  Differing items:
  {'code': 1000} != {'code': 1008}
  {'msg': '促销开启设置成功'} != {'msg': '促销开始时间必须大于当前时间'}
  Full diff:
  - {'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
  ?             ^             ^^^^^^^^^^^
  + {'code': 1000, 'msg': '促销开启设置成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 56, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...': '促销开启设置成功'} == {'code': 1008...开始时间必须大于当前时间'}
  Differing items:
  {'code': 1000} != {'code': 1008}
  {'msg': '促销开启设置成功'} != {'msg': '促销开始时间必须大于当前时间'}
  Full diff:
  - {'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
  ?             ^             ^^^^^^^^^^^
  + {'code': 1000, 'msg': '促销开启设置成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 16:31:55,321 - [test_business_token_goods_promote01.py - 70] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-09 16:31:55,465 - [test_business_token_goods_promote01.py - 70] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-09 16:31:55,603 - [test_business_token_goods_promote01.py - 70] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-09 16:31:55,877 - [test_business_token_goods_promote01.py - 70] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-09 16:31:56,014 - [test_business_token_goods_promote01.py - 70] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-09 16:31:56,147 - [test_business_token_goods_promote01.py - 70] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-09 16:31:56,284 - [test_business_token_goods_promote01.py - 65] - 40:测试编号8,测试标题测试销结束时间小于促销开始时间,执行失败，实际结果为{'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
2022-03-09 16:31:56,284 - [test_business_token_goods_promote01.py - 66] - 40:assert {'code': 1009...必须大于等于促销开始时间'} == {'code': 1008...开始时间必须大于当前时间'}
  Differing items:
  {'code': 1009} != {'code': 1008}
  {'msg': '促销结束时间必须大于等于促销开始时间'} != {'msg': '促销开始时间必须大于当前时间'}
  Full diff:
  - {'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
  + {'code': 1009, 'msg': '促销结束时间必须大于等于促销开始时间'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 56, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1009...必须大于等于促销开始时间'} == {'code': 1008...开始时间必须大于当前时间'}
  Differing items:
  {'code': 1009} != {'code': 1008}
  {'msg': '促销结束时间必须大于等于促销开始时间'} != {'msg': '促销开始时间必须大于当前时间'}
  Full diff:
  - {'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
  + {'code': 1009, 'msg': '促销结束时间必须大于等于促销开始时间'}
2022-03-09 16:31:56,421 - [test_business_token_goods_promote01.py - 70] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-09 16:31:56,583 - [test_business_token_goods_promote01.py - 70] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-09 16:31:56,725 - [test_business_token_goods_promote01.py - 65] - 40:测试编号11,测试标题测试商品编号不存在,执行失败，实际结果为{'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
2022-03-09 16:31:56,725 - [test_business_token_goods_promote01.py - 66] - 40:assert {'code': 1011...sg': '该商品不存在'} == {'code': 1008...开始时间必须大于当前时间'}
  Differing items:
  {'code': 1011} != {'code': 1008}
  {'msg': '该商品不存在'} != {'msg': '促销开始时间必须大于当前时间'}
  Full diff:
  - {'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
  + {'code': 1011, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 56, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...sg': '该商品不存在'} == {'code': 1008...开始时间必须大于当前时间'}
  Differing items:
  {'code': 1011} != {'code': 1008}
  {'msg': '该商品不存在'} != {'msg': '促销开始时间必须大于当前时间'}
  Full diff:
  - {'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
  + {'code': 1011, 'msg': '该商品不存在'}
2022-03-09 16:31:56,860 - [test_business_token_goods_promote01.py - 70] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-09 16:31:56,998 - [test_business_token_goods_promote01.py - 65] - 40:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行失败，实际结果为{'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
2022-03-09 16:31:56,999 - [test_business_token_goods_promote01.py - 66] - 40:assert {'code': 1012...销状态，不能再次开启促销'} == {'code': 1008...开始时间必须大于当前时间'}
  Differing items:
  {'code': 1012} != {'code': 1008}
  {'msg': '该商品已经在促销状态，不能再次开启促销'} != {'msg': '促销开始时间必须大于当前时间'}
  Full diff:
  - {'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
  + {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 56, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1012...销状态，不能再次开启促销'} == {'code': 1008...开始时间必须大于当前时间'}
  Differing items:
  {'code': 1012} != {'code': 1008}
  {'msg': '该商品已经在促销状态，不能再次开启促销'} != {'msg': '促销开始时间必须大于当前时间'}
  Full diff:
  - {'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
  + {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2022-03-09 16:31:57,140 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号1，测试标题商品信息查询主流程，执行成功
2022-03-09 16:31:57,267 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号2，测试标题商品信息查询—token为空，执行成功
2022-03-09 16:31:57,411 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号3，测试标题商品信息查询—token区分大小写，执行成功
2022-03-09 16:31:57,563 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号4，测试标题商品信息查询—上一次token值，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 1.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': 'aaaaaaaa', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '如如如如', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '精华面霜', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': 'aaa', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '小白瓶', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '小红瓶', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '美容仪', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 99999999}, {'goodsName': '防晒二代', 'shopPrice': 99999999.99, 'promotePrice': 0.0, 'num': 200}]}
2022-03-09 16:31:57,564 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (135 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (135 lines hidden), use '-vv' to show
2022-03-09 16:31:57,729 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号5，测试标题商品信息查询—（不带商品）销售状态为0，执行成功
2022-03-09 16:31:57,882 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号6，测试标题商品信息查询—（不带商品）销售状态为1，执行成功
2022-03-09 16:31:58,020 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号7，测试标题商品信息查询—（不带商品）促销状态为0，执行成功
2022-03-09 16:31:58,181 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号8，测试标题商品信息查询—（不带商品）促销状态为1，执行成功
2022-03-09 16:31:58,319 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号9，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为0，执行成功
2022-03-09 16:31:58,459 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号10，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为1，执行成功
2022-03-09 16:31:58,599 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号11，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为0，执行成功
2022-03-09 16:31:58,734 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号12，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为1，执行成功
2022-03-09 16:31:58,868 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号13，测试标题商品信息查询—（带商品）销售状态为0，执行成功
2022-03-09 16:31:59,006 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号14，测试标题商品信息查询—（带商品）销售状态为1，执行成功
2022-03-09 16:31:59,142 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号15，测试标题商品信息查询—（带商品）促销状态为0，执行成功
2022-03-09 16:31:59,280 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号16，测试标题商品信息查询—（带商品）促销状态为1，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-09 16:31:59,280 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000025EFDCC0B00>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000025EFDCC0B00>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-09 16:31:59,416 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号17，测试标题商品信息查询—（带商品）销售状态为0、促销状态为0，执行成功
2022-03-09 16:31:59,555 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号18，测试标题商品信息查询—（带商品）销售状态为0、促销状态为1，执行成功
2022-03-09 16:31:59,754 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号19，测试标题商品信息查询—（带商品）销售状态为1、促销状态为0，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-09 16:31:59,754 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000025EFDCC0EB8>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000025EFDCC0EB8>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-09 16:31:59,888 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号20，测试标题商品信息查询—（带商品）销售状态为1、促销状态为1，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-09 16:31:59,888 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000025EFDCC0B38>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000025EFDCC0B38>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-09 16:32:00,030 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号21，测试标题商品信息查询—销售状态为非枚举，执行成功
2022-03-09 16:32:00,173 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号22，测试标题商品信息查询—促销状态为非枚举，执行成功
2022-03-09 16:32:00,310 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号23，测试标题商品信息查询—存在的商品编号（6位数字），执行成功
2022-03-09 16:32:00,446 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号24，测试标题商品信息查询—商品编号非6位数字，执行成功
2022-03-09 16:32:00,582 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号25，测试标题商品信息查询—不存在的商品编号（6位数字），执行成功
2022-03-09 16:32:00,713 - [test_login05.py - 80] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-09 16:32:00,879 - [test_login05.py - 80] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-09 16:32:01,036 - [test_login05.py - 80] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-09 16:32:01,171 - [test_login05.py - 80] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-09 16:32:01,378 - [test_login05.py - 75] - 40:测试编号5，测试标题测试密码区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0Njg0NDcyMS4xODMzOTI1OjI3YmMzODhhOGI5YTZiNTJiMjA2MWY1NDljODRmNmM1M2U3ZDM0MWE='}
2022-03-09 16:32:01,378 - [test_login05.py - 76] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...M2U3ZDM0MWE='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0Njg0NDcyMS4xODMzOTI1OjI3YmMzODhhOGI5YTZiNTJiMjA2MWY1NDljODRmNmM1M2U3ZDM0MWE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login05.py", line 72, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...M2U3ZDM0MWE='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0Njg0NDcyMS4xODMzOTI1OjI3YmMzODhhOGI5YTZiNTJiMjA2MWY1NDljODRmNmM1M2U3ZDM0MWE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-09 16:32:01,519 - [test_login05.py - 75] - 40:测试编号6，测试标题测试用户名区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0Njg0NDcyMS4zOTg4MTYzOmFjYzMxMWEwNmNjMGE4MmQ5YmQwYjM4MWFjN2RkYjkzOGViNjdjMTE='}
2022-03-09 16:32:01,519 - [test_login05.py - 76] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OGViNjdjMTE='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0Njg0NDcyMS4zOTg4MTYzOmFjYzMxMWEwNmNjMGE4MmQ5YmQwYjM4MWFjN2RkYjkzOGViNjdjMTE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login05.py", line 72, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OGViNjdjMTE='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0Njg0NDcyMS4zOTg4MTYzOmFjYzMxMWEwNmNjMGE4MmQ5YmQwYjM4MWFjN2RkYjkzOGViNjdjMTE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-09 16:32:01,654 - [test_login05.py - 80] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-09 16:32:01,794 - [test_login05.py - 80] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-09 16:32:01,923 - [test_login05.py - 80] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-09 16:32:02,051 - [test_login05.py - 80] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-09 16:32:02,189 - [test_business_token_order_items01.py - 79] - 20:测试编号1，测试标题订单信息查询主流程，测试成功
2022-03-09 16:32:02,317 - [test_business_token_order_items01.py - 79] - 20:测试编号2，测试标题订单信息查询—token为空，测试成功
2022-03-09 16:32:02,456 - [test_business_token_order_items01.py - 79] - 20:测试编号3，测试标题订单信息查询—token区分大小写，测试成功
2022-03-09 16:32:02,605 - [test_business_token_order_items01.py - 74] - 40:测试编号4，测试标题订单信息查询——上一次token值，测试失败，实际结果{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15888888888', 'status': '未支付', 'value': 0.0, 'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}]}
2022-03-09 16:32:02,606 - [test_business_token_order_items01.py - 75] - 40:assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'code': 1004} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_order_items05\test_business_token_order_items01.py", line 71, in test_order_items
    assert eval(case.expect) == res
AssertionError: assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'code': 1004} != {'code': 1000}
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '好吃点', 'goods_price': 0.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
2022-03-09 16:32:02,749 - [test_business_token_order_items01.py - 79] - 20:测试编号5，测试标题订单信息查询订单编号为空，测试成功
2022-03-09 16:32:02,912 - [test_business_token_order_items01.py - 79] - 20:测试编号6，测试标题订单信息查询订单编号错误，测试成功
2022-03-09 16:32:03,051 - [test_business_token_order_items01.py - 79] - 20:测试编号7，测试标题订单信息查询订单编号不存在，测试成功
2022-03-09 16:38:49,259 - [test_business_regist_json01.py - 53] - 20:测试编号1，测试标题正常流程,执行成功
2022-03-09 16:38:49,395 - [test_business_register03.py - 76] - 20:测试标号1，测试标题正确流程，执行成功
2022-03-09 16:38:49,524 - [test_business_register03.py - 76] - 20:测试标号2，测试标题用户名为空的场景，执行成功
2022-03-09 16:38:49,674 - [test_business_register03.py - 76] - 20:测试标号3，测试标题用户名为8位有效边界值的场景，执行成功
2022-03-09 16:38:49,798 - [test_business_register03.py - 76] - 20:测试标号4，测试标题用户名为5位无效边界值的场景，执行成功
2022-03-09 16:38:49,921 - [test_business_register03.py - 76] - 20:测试标号5，测试标题用户名为9位无效边界值的场景，执行成功
2022-03-09 16:38:50,048 - [test_business_register03.py - 76] - 20:测试标号6，测试标题用户名已存在的场景，执行成功
2022-03-09 16:38:50,172 - [test_business_register03.py - 76] - 20:测试标号7，测试标题用户名包含特殊符号的场景，执行成功
2022-03-09 16:38:50,296 - [test_business_register03.py - 76] - 20:测试标号8，测试标题用户名前包含空格的场景，执行成功
2022-03-09 16:38:50,419 - [test_business_register03.py - 76] - 20:测试标号9，测试标题用户名中包含空格的场景，执行成功
2022-03-09 16:38:50,549 - [test_business_register03.py - 76] - 20:测试标号10，测试标题用户名后包含空格的场景，执行成功
2022-03-09 16:38:50,684 - [test_business_register03.py - 76] - 20:测试标号11，测试标题用户名以非字母开头的场景，执行成功
2022-03-09 16:38:50,814 - [test_business_register03.py - 76] - 20:测试标号12，测试标题密码为空的场景，执行成功
2022-03-09 16:38:50,951 - [test_business_register03.py - 76] - 20:测试标号13，测试标题密码为8位有效边界值的场景，执行成功
2022-03-09 16:38:51,099 - [test_business_register03.py - 76] - 20:测试标号14，测试标题密码为6位无效边界值的场景，执行成功
2022-03-09 16:38:51,222 - [test_business_register03.py - 76] - 20:测试标号15，测试标题密码为12位无效边界值的场景，执行成功
2022-03-09 16:38:51,345 - [test_business_register03.py - 76] - 20:测试标号16，测试标题密码包含特殊符号的场景，执行成功
2022-03-09 16:38:51,492 - [test_business_register03.py - 76] - 20:测试标号17，测试标题密码纯字母的场景，执行成功
2022-03-09 16:38:51,624 - [test_business_register03.py - 76] - 20:测试标号18，测试标题密码纯数字的场景，执行成功
2022-03-09 16:38:51,746 - [test_business_register03.py - 76] - 20:测试标号19，测试标题密码区分大小写的场景，执行成功
2022-03-09 16:38:51,874 - [test_business_register03.py - 76] - 20:测试标号20，测试标题确认密码为空的场景，执行成功
2022-03-09 16:38:52,005 - [test_business_register03.py - 76] - 20:测试标号21，测试标题确认密码与密码不一致的场景，执行成功
2022-03-09 16:38:52,130 - [test_business_register03.py - 76] - 20:测试标号22，测试标题确认密码区分大小写的场景，执行成功
2022-03-09 16:38:52,255 - [test_business_register03.py - 76] - 20:测试标号23，测试标题手机号为空的场景，执行成功
2022-03-09 16:38:52,379 - [test_business_register03.py - 76] - 20:测试标号24，测试标题手机号为非11位数字的场景，执行成功
2022-03-09 16:38:52,525 - [test_business_register03.py - 76] - 20:测试标号25，测试标题手机号为非数字的场景，执行成功
2022-03-09 16:38:52,656 - [test_business_register03.py - 76] - 20:测试标号26，测试标题手机号为不支持的号段的场景，执行成功
2022-03-09 16:38:52,782 - [test_business_register03.py - 76] - 20:测试标号27，测试标题手机号已注册的场景，执行成功
2022-03-09 16:38:52,917 - [test_business_register03.py - 76] - 20:测试标号28，测试标题性别为空的场景的场景，执行成功
2022-03-09 16:38:53,041 - [test_business_register03.py - 76] - 20:测试标号29，测试标题性别为非枚举值的场景，执行成功
2022-03-09 16:38:53,171 - [test_business_register03.py - 76] - 20:测试标号30，测试标题性别为男+女的场景，执行成功
2022-03-09 16:38:53,310 - [test_business_register03.py - 76] - 20:测试标号31，测试标题生日为空的场景，执行成功
2022-03-09 16:38:53,434 - [test_business_register03.py - 76] - 20:测试标号32，测试标题生日为非时间格式的场景，执行成功
2022-03-09 16:38:53,558 - [test_business_register03.py - 76] - 20:测试标号33，测试标题生日为非数字，执行成功
2022-03-09 16:38:53,688 - [test_business_register03.py - 71] - 40:测试标号34，测试标题生日超出当前时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-09 16:38:53,688 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-09 16:38:53,818 - [test_business_register03.py - 71] - 40:测试标号35，测试标题生日为不合理的时间，执行失败，实际结果为{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2022-03-09 16:38:53,818 - [test_business_register03.py - 72] - 40:assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_register03\test_business_register03.py", line 63, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 1010...sg': '生日格式错误'} == {'code': 1013...、手机号、邮箱已经被注册'}
  Differing items:
  {'msg': '生日格式错误'} != {'msg': '该用户名、手机号、邮箱已经被注册'}
  {'code': 1010} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
  + {'code': 1010, 'msg': '生日格式错误'}
2022-03-09 16:38:53,976 - [test_business_register03.py - 76] - 20:测试标号36，测试标题qq为空的场景，执行成功
2022-03-09 16:38:54,104 - [test_business_register03.py - 76] - 20:测试标号37，测试标题qq为非数字，执行成功
2022-03-09 16:38:54,237 - [test_business_register03.py - 76] - 20:测试标号38，测试标题邮箱为空的场景，执行成功
2022-03-09 16:38:54,360 - [test_business_register03.py - 76] - 20:测试标号39，测试标题邮箱格式错误的场景，执行成功
2022-03-09 16:38:54,506 - [test_business_register03.py - 76] - 20:测试标号40，测试标题邮箱已注册的场景，执行成功
2022-03-09 16:38:54,676 - [test_business_token_goods_delete01.py - 64] - 20:测试编号1,测试标题正常流程，执行成功
2022-03-09 16:38:54,810 - [test_business_token_goods_delete01.py - 64] - 20:测试编号2,测试标题测试商品编号为空，执行成功
2022-03-09 16:38:54,948 - [test_business_token_goods_delete01.py - 64] - 20:测试编号3,测试标题测试商品编号不存在，执行成功
2022-03-09 16:38:55,081 - [test_business_token_goods_delete01.py - 64] - 20:测试编号4,测试标题测试商品编号格式错误，执行成功
2022-03-09 16:38:55,214 - [test_business_token_goods_delete01.py - 64] - 20:测试编号5,测试标题测试商品编号的商品没下架，执行成功
2022-03-09 16:38:55,360 - [test_business_token_goods_input01.py - 79] - 20:测试编号1，测试标题正常的流程，执行成功
2022-03-09 16:38:55,535 - [test_business_token_goods_input01.py - 79] - 20:测试编号2，测试标题测试商品信息录入—token为空，执行成功
2022-03-09 16:38:55,678 - [test_business_token_goods_input01.py - 79] - 20:测试编号3，测试标题测试商品信息录入——token区分大小写，执行成功
2022-03-09 16:38:55,830 - [test_business_token_goods_input01.py - 74] - 40:测试编号4，测试标题测试商品信息录入—上一次token值，执行失败，实际结果为{'code': 1013, 'msg': '产品名称不能重复'}
2022-03-09 16:38:55,830 - [test_business_token_goods_input01.py - 75] - 40:assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  {'code': 1011} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_input06\test_business_token_goods_input01.py", line 67, in test_goods_input
    assert eval(case.expect) == res
AssertionError: assert {'code': 1011...请检查token是否失效'} == {'code': 1013...': '产品名称不能重复'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '产品名称不能重复'}
  {'code': 1011} != {'code': 1013}
  Full diff:
  - {'code': 1013, 'msg': '产品名称不能重复'}
  + {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2022-03-09 16:38:55,966 - [test_business_token_goods_input01.py - 79] - 20:测试编号5，测试标题测试商品名为空的场景，执行成功
2022-03-09 16:38:56,116 - [test_business_token_goods_input01.py - 79] - 20:测试编号6，测试标题测试商品名有效边界的场景，执行成功
2022-03-09 16:38:56,254 - [test_business_token_goods_input01.py - 79] - 20:测试编号7，测试标题测试商品名无效边界的场景，执行成功
2022-03-09 16:38:56,389 - [test_business_token_goods_input01.py - 79] - 20:测试编号8，测试标题测试商品名已存在的场景，执行成功
2022-03-09 16:38:56,522 - [test_business_token_goods_input01.py - 79] - 20:测试编号9，测试标题测试商品分类id为空，执行成功
2022-03-09 16:38:56,655 - [test_business_token_goods_input01.py - 79] - 20:测试编号10，测试标题测试商品分类id不存在，执行成功
2022-03-09 16:38:56,798 - [test_business_token_goods_input01.py - 79] - 20:测试编号11，测试标题测试商品描述为空，执行成功
2022-03-09 16:38:56,941 - [test_business_token_goods_input01.py - 79] - 20:测试编号12，测试标题测试商品描述有效边界，执行成功
2022-03-09 16:38:57,102 - [test_business_token_goods_input01.py - 79] - 20:测试编号13，测试标题测试商品描述无效边界，执行成功
2022-03-09 16:38:57,237 - [test_business_token_goods_input01.py - 79] - 20:测试编号14，测试标题测试商品库存为空，执行成功
2022-03-09 16:38:57,376 - [test_business_token_goods_input01.py - 79] - 20:测试编号15，测试标题测试商品库存最大整数，执行成功
2022-03-09 16:38:57,510 - [test_business_token_goods_input01.py - 79] - 20:测试编号16，测试标题测试商品库存为小数，执行成功
2022-03-09 16:38:57,642 - [test_business_token_goods_input01.py - 79] - 20:测试编号17，测试标题测试商品库存为负数，执行成功
2022-03-09 16:38:57,784 - [test_business_token_goods_input01.py - 79] - 20:测试编号18，测试标题测试商品库存为字符，执行成功
2022-03-09 16:38:57,933 - [test_business_token_goods_input01.py - 79] - 20:测试编号19，测试标题测试商品价格为空，执行成功
2022-03-09 16:38:58,076 - [test_business_token_goods_input01.py - 79] - 20:测试编号20，测试标题测试商品价格有效数字：最大值边界，执行成功
2022-03-09 16:38:58,212 - [test_business_token_goods_input01.py - 79] - 20:测试编号21，测试标题测试商品价格非两位小数的数字，执行成功
2022-03-09 16:38:58,351 - [test_business_token_goods_input01.py - 79] - 20:测试编号22，测试标题测试商品价格超过最大值，执行成功
2022-03-09 16:38:58,515 - [test_business_token_goods_input01.py - 79] - 20:测试编号23，测试标题测试商品价格为整数，执行成功
2022-03-09 16:38:58,646 - [test_business_token_goods_input01.py - 79] - 20:测试编号24，测试标题测试商品价格为0，执行成功
2022-03-09 16:38:58,784 - [test_business_token_goods_promote01.py - 65] - 40:测试编号1,测试标题正常流程,执行失败，实际结果为{'code': 1006, 'msg': '促销结束时间格式不正确'}
2022-03-09 16:38:58,784 - [test_business_token_goods_promote01.py - 66] - 40:assert {'code': 1000...': '促销开启设置成功'} == {'code': 1006...'促销结束时间格式不正确'}
  Differing items:
  {'msg': '促销开启设置成功'} != {'msg': '促销结束时间格式不正确'}
  {'code': 1000} != {'code': 1006}
  Full diff:
  - {'code': 1006, 'msg': '促销结束时间格式不正确'}
  ?             ^            ^^^^^^^^^
  + {'code': 1000, 'msg': '促销开启设置成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goods_promote07\test_business_token_goods_promote01.py", line 56, in test_goods_promote
    assert eval(case.expect) == res
AssertionError: assert {'code': 1000...': '促销开启设置成功'} == {'code': 1006...'促销结束时间格式不正确'}
  Differing items:
  {'msg': '促销开启设置成功'} != {'msg': '促销结束时间格式不正确'}
  {'code': 1000} != {'code': 1006}
  Full diff:
  - {'code': 1006, 'msg': '促销结束时间格式不正确'}
  ?             ^            ^^^^^^^^^
  + {'code': 1000, 'msg': '促销开启设置成功'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-09 16:38:58,921 - [test_business_token_goods_promote01.py - 70] - 20:测试编号2,测试标题测试促销开始时间为空的场景,执行成功
2022-03-09 16:38:59,071 - [test_business_token_goods_promote01.py - 70] - 20:测试编号3,测试标题测试促销开始时间格式错误的,执行成功
2022-03-09 16:38:59,216 - [test_business_token_goods_promote01.py - 70] - 20:测试编号4,测试标题测试促销开始时间非日期类型,执行成功
2022-03-09 16:38:59,349 - [test_business_token_goods_promote01.py - 70] - 20:测试编号5,测试标题测试促销开始时间小于当前时间,执行成功
2022-03-09 16:38:59,486 - [test_business_token_goods_promote01.py - 70] - 20:测试编号6,测试标题测试促销结束时间为空,执行成功
2022-03-09 16:38:59,624 - [test_business_token_goods_promote01.py - 70] - 20:测试编号7,测试标题测试促销结束格式错误的,执行成功
2022-03-09 16:38:59,760 - [test_business_token_goods_promote01.py - 70] - 20:测试编号8,测试标题测试销结束时间小于促销开始时间,执行成功
2022-03-09 16:38:59,892 - [test_business_token_goods_promote01.py - 70] - 20:测试编号9,测试标题测试销结束时间非日期类型,执行成功
2022-03-09 16:39:00,050 - [test_business_token_goods_promote01.py - 70] - 20:测试编号10,测试标题测试商品编号为空,执行成功
2022-03-09 16:39:00,186 - [test_business_token_goods_promote01.py - 70] - 20:测试编号11,测试标题测试商品编号不存在,执行成功
2022-03-09 16:39:00,318 - [test_business_token_goods_promote01.py - 70] - 20:测试编号12,测试标题测试商品编号格式错误,执行成功
2022-03-09 16:39:00,455 - [test_business_token_goods_promote01.py - 70] - 20:测试编号13,测试标题测试该商品已经在促销状态，不能再次开启促销,执行成功
2022-03-09 16:39:00,592 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号1，测试标题商品信息查询主流程，执行成功
2022-03-09 16:39:00,722 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号2，测试标题商品信息查询—token为空，执行成功
2022-03-09 16:39:00,888 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号3，测试标题商品信息查询—token区分大小写，执行成功
2022-03-09 16:39:01,044 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号4，测试标题商品信息查询—上一次token值，执行失败，实际结果为{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone20', 'shopPrice': 9999.99, 'promotePrice': 1.0, 'num': 100}, {'goodsName': 'iphone11', 'shopPrice': 9999.99, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '好吃点', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '饼干', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '水果', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '菠萝', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': 'aaaaaaaa', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '肉', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '如如如如', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '精华面霜', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': 'aaa', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '小白瓶', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '小红瓶', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 200}, {'goodsName': '美容仪', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 99999999}, {'goodsName': '防晒二代', 'shopPrice': 99999999.99, 'promotePrice': 0.0, 'num': 200}]}
2022-03-09 16:39:01,045 - [test_business_token_goodsinfo03.py - 97] - 40:assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (135 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 92, in test_goods_info
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'goods_tiems': [{'goodsName': '预留数据',
                    'num': 1000,
                    'promotePrice': 0.0,...
  
  ...Full output truncated (135 lines hidden), use '-vv' to show
2022-03-09 16:39:01,178 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号5，测试标题商品信息查询—（不带商品）销售状态为0，执行成功
2022-03-09 16:39:01,311 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号6，测试标题商品信息查询—（不带商品）销售状态为1，执行成功
2022-03-09 16:39:01,444 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号7，测试标题商品信息查询—（不带商品）促销状态为0，执行成功
2022-03-09 16:39:01,603 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号8，测试标题商品信息查询—（不带商品）促销状态为1，执行成功
2022-03-09 16:39:01,736 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号9，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为0，执行成功
2022-03-09 16:39:01,872 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号10，测试标题商品信息查询—（不带商品）销售状态为0、促销状态为1，执行成功
2022-03-09 16:39:02,008 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号11，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为0，执行成功
2022-03-09 16:39:02,145 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号12，测试标题商品信息查询—（不带商品）销售状态为1、促销状态为1，执行成功
2022-03-09 16:39:02,284 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号13，测试标题商品信息查询—（带商品）销售状态为0，执行成功
2022-03-09 16:39:02,418 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号14，测试标题商品信息查询—（带商品）销售状态为1，执行成功
2022-03-09 16:39:02,550 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号15，测试标题商品信息查询—（带商品）促销状态为0，执行成功
2022-03-09 16:39:02,682 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号16，测试标题商品信息查询—（带商品）促销状态为1，执行成功
2022-03-09 16:39:02,821 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号17，测试标题商品信息查询—（带商品）销售状态为0、促销状态为0，执行成功
2022-03-09 16:39:02,961 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号18，测试标题商品信息查询—（带商品）销售状态为0、促销状态为1，执行成功
2022-03-09 16:39:03,117 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号19，测试标题商品信息查询—（带商品）销售状态为1、促销状态为0，执行成功
2022-03-09 16:39:03,252 - [test_business_token_goodsinfo03.py - 96] - 40:测试编号20，测试标题商品信息查询—（带商品）销售状态为1、促销状态为1，执行失败，实际结果为{'code': 1008, 'msg': '没有符合条件的数据'}
2022-03-09 16:39:03,252 - [test_business_token_goodsinfo03.py - 97] - 40:assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000028ABCD05C50>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_goodsinfo04\test_business_token_goodsinfo03.py", line 86, in test_goods_info
    assert case.expect in str(res)  # 判断响应体包含查询成功
AssertionError: assert '查询成功' in "{'code': 1008, 'msg': '没有符合条件的数据'}"
 +  where '查询成功' = <comms.excel_utils.CaseData object at 0x0000028ABCD05C50>.expect
 +  and   "{'code': 1008, 'msg': '没有符合条件的数据'}" = str({'code': 1008, 'msg': '没有符合条件的数据'})
2022-03-09 16:39:03,392 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号21，测试标题商品信息查询—销售状态为非枚举，执行成功
2022-03-09 16:39:03,527 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号22，测试标题商品信息查询—促销状态为非枚举，执行成功
2022-03-09 16:39:03,663 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号23，测试标题商品信息查询—存在的商品编号（6位数字），执行成功
2022-03-09 16:39:03,799 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号24，测试标题商品信息查询—商品编号非6位数字，执行成功
2022-03-09 16:39:03,939 - [test_business_token_goodsinfo03.py - 101] - 20:测试编号25，测试标题商品信息查询—不存在的商品编号（6位数字），执行成功
2022-03-09 16:39:04,070 - [test_login05.py - 80] - 20:测试编号1，测试标题正常流程，执行成功
2022-03-09 16:39:04,203 - [test_login05.py - 80] - 20:测试编号2，测试标题测试用户名错误的场景，执行成功
2022-03-09 16:39:04,329 - [test_login05.py - 80] - 20:测试编号3，测试标题测试用户名为空的场景，执行成功
2022-03-09 16:39:04,466 - [test_login05.py - 80] - 20:测试编号4，测试标题测试密码输入错误的场景，执行成功
2022-03-09 16:39:04,665 - [test_login05.py - 75] - 40:测试编号5，测试标题测试密码区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0Njg0NTE0NC40ODA3MzU6ZWY5NTI3ODc1ZjNiZWQ3YmY1MTlmODRmZjBjNWU3MDEzZWMzMTFlMA=='}
2022-03-09 16:39:04,666 - [test_login05.py - 76] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZWMzMTFlMA=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0Njg0NTE0NC40ODA3MzU6ZWY5NTI3ODc1ZjNiZWQ3YmY1MTlmODRmZjBjNWU3MDEzZWMzMTFlMA=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login05.py", line 72, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZWMzMTFlMA=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0Njg0NTE0NC40ODA3MzU6ZWY5NTI3ODc1ZjNiZWQ3YmY1MTlmODRmZjBjNWU3MDEzZWMzMTFlMA=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-09 16:39:04,801 - [test_login05.py - 75] - 40:测试编号6，测试标题测试用户名区分大小写的场景，执行失败，实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTY0Njg0NTE0NC42ODExOTg2OjExYmE4NmRkNjI5OWIzNGRhODc5MDU4OTQ1MTRmOTY4ZTcxY2E3ODU='}
2022-03-09 16:39:04,802 - [test_login05.py - 76] - 40:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTcxY2E3ODU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0Njg0NTE0NC42ODExOTg2OjExYmE4NmRkNjI5OWIzNGRhODc5MDU4OTQ1MTRmOTY4ZTcxY2E3ODU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_login02\test_login05.py", line 72, in test_login
    assert eval(case.expect) == res
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTcxY2E3ODU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0Njg0NTE0NC42ODExOTg2OjExYmE4NmRkNjI5OWIzNGRhODc5MDU4OTQ1MTRmOTY4ZTcxY2E3ODU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-09 16:39:04,970 - [test_login05.py - 80] - 20:测试编号7，测试标题测试密码为空的场景，执行成功
2022-03-09 16:39:05,105 - [test_login05.py - 80] - 20:测试编号8，测试标题测试用户类型为空的场景，执行成功
2022-03-09 16:39:05,229 - [test_login05.py - 80] - 20:测试编号9，测试标题测试用户类型非普通的场景，执行成功
2022-03-09 16:39:05,377 - [test_login05.py - 80] - 20:测试编号10，测试标题测试用户类型格式错误的场景，执行成功
2022-03-09 16:39:05,571 - [test_business_token_order_items01.py - 79] - 20:测试编号1，测试标题订单信息查询主流程，测试成功
2022-03-09 16:39:05,703 - [test_business_token_order_items01.py - 79] - 20:测试编号2，测试标题订单信息查询—token为空，测试成功
2022-03-09 16:39:05,928 - [test_business_token_order_items01.py - 79] - 20:测试编号3，测试标题订单信息查询—token区分大小写，测试成功
2022-03-09 16:39:06,166 - [test_business_token_order_items01.py - 74] - 40:测试编号4，测试标题订单信息查询——上一次token值，测试失败，实际结果{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15888888888', 'status': '未支付', 'value': 100.0, 'goods_tiems': [{'goods_name': '预留数据', 'goods_price': 100.0}]}
2022-03-09 16:39:06,166 - [test_business_token_order_items01.py - 75] - 40:assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1004} != {'code': 1000}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '预留数据', 'goods_price': 100.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest\testcases\test_business_token_order_items05\test_business_token_order_items01.py", line 71, in test_order_items
    assert eval(case.expect) == res
AssertionError: assert {'code': 1004...请检查token是否失效'} == {'code': 1000...utoTrue', ...}
  Differing items:
  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}
  {'code': 1004} != {'code': 1000}
  Right contains 5 more items:
  {'goods_tiems': [{'goods_name': '预留数据', 'goods_price': 100.0}],
   'name': 'AutoTrue',
   'phone': '15888888888',...
  
  ...Full output truncated (18 lines hidden), use '-vv' to show
2022-03-09 16:39:06,358 - [test_business_token_order_items01.py - 79] - 20:测试编号5，测试标题订单信息查询订单编号为空，测试成功
2022-03-09 16:39:06,663 - [test_business_token_order_items01.py - 79] - 20:测试编号6，测试标题订单信息查询订单编号错误，测试成功
2022-03-09 16:39:06,895 - [test_business_token_order_items01.py - 79] - 20:测试编号7，测试标题订单信息查询订单编号不存在，测试成功
